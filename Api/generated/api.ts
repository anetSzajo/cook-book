/* tslint:disable */
/* eslint-disable */
/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 80,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what\'s in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: david@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface InlineObject10
 */
export interface InlineObject10 {
    /**
     * The username.
     * @type {string}
     * @memberof InlineObject10
     */
    username: string;
    /**
     * The date in the format yyyy-mm-dd.
     * @type {string}
     * @memberof InlineObject10
     */
    date: string;
    /**
     * The private hash for the username.
     * @type {string}
     * @memberof InlineObject10
     */
    hash: string;
}
/**
 * 
 * @export
 * @interface InlineObject11
 */
export interface InlineObject11 {
    /**
     * The username.
     * @type {string}
     * @memberof InlineObject11
     */
    username: string;
    /**
     * The private hash for the username.
     * @type {string}
     * @memberof InlineObject11
     */
    hash: string;
}
/**
 * 
 * @export
 * @interface InlineObject12
 */
export interface InlineObject12 {
    /**
     * The username.
     * @type {string}
     * @memberof InlineObject12
     */
    username: string;
    /**
     * The shopping list item id.
     * @type {number}
     * @memberof InlineObject12
     */
    id: number;
    /**
     * The private hash for the username.
     * @type {string}
     * @memberof InlineObject12
     */
    hash: string;
}
/**
 * 
 * @export
 * @interface InlineObject13
 */
export interface InlineObject13 {
    /**
     * The username.
     * @type {string}
     * @memberof InlineObject13
     */
    username: string;
    /**
     * The start date in the format yyyy-mm-dd.
     * @type {string}
     * @memberof InlineObject13
     */
    start_date: string;
    /**
     * The end date in the format yyyy-mm-dd.
     * @type {string}
     * @memberof InlineObject13
     */
    end_date: string;
    /**
     * The private hash for the username.
     * @type {string}
     * @memberof InlineObject13
     */
    hash: string;
}
/**
 * 
 * @export
 * @interface InlineObject14
 */
export interface InlineObject14 {
    /**
     * The username.
     * @type {string}
     * @memberof InlineObject14
     */
    username: string;
    /**
     * The private hash for the username.
     * @type {string}
     * @memberof InlineObject14
     */
    hash: string;
}
/**
 * 
 * @export
 * @interface InlineObject15
 */
export interface InlineObject15 {
    /**
     * The username.
     * @type {string}
     * @memberof InlineObject15
     */
    username: string;
    /**
     * The shopping list item id.
     * @type {number}
     * @memberof InlineObject15
     */
    id: number;
    /**
     * The private hash for the username.
     * @type {string}
     * @memberof InlineObject15
     */
    hash: string;
}
/**
 * 
 * @export
 * @interface InlineObject9
 */
export interface InlineObject9 {
    /**
     * The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
     * @type {string}
     * @memberof InlineObject9
     */
    locale?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add an item to the user\'s meal plan.
         * @summary Add to Meal Plan
         * @param {string} username The username.
         * @param {string} hash The private hash for the username.
         * @param {InlineObject11} inlineObject11 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToMealPlan: async (username: string, hash: string, inlineObject11: InlineObject11, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('addToMealPlan', 'username', username)
            // verify required parameter 'hash' is not null or undefined
            assertParamExists('addToMealPlan', 'hash', hash)
            // verify required parameter 'inlineObject11' is not null or undefined
            assertParamExists('addToMealPlan', 'inlineObject11', inlineObject11)
            const localVarPath = `/mealplanner/{username}/items`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (hash !== undefined) {
                localVarQueryParameter['hash'] = hash;
            }


    
            localVarHeaderParameter['Content-Type'] = '';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject11, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add an item to the current shopping list of a user.
         * @summary Add to Shopping List
         * @param {string} username The username.
         * @param {string} hash The private hash for the username.
         * @param {InlineObject14} inlineObject14 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToShoppingList: async (username: string, hash: string, inlineObject14: InlineObject14, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('addToShoppingList', 'username', username)
            // verify required parameter 'hash' is not null or undefined
            assertParamExists('addToShoppingList', 'hash', hash)
            // verify required parameter 'inlineObject14' is not null or undefined
            assertParamExists('addToShoppingList', 'inlineObject14', inlineObject14)
            const localVarPath = `/mealplanner/{username}/shopping-list/items`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (hash !== undefined) {
                localVarQueryParameter['hash'] = hash;
            }


    
            localVarHeaderParameter['Content-Type'] = '';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject14, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Parse a recipe search query to find out its intention.
         * @summary Analyze a Recipe Search Query
         * @param {string} q The recipe search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyzeARecipeSearchQuery: async (q: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'q' is not null or undefined
            assertParamExists('analyzeARecipeSearchQuery', 'q', q)
            const localVarPath = `/recipes/queries/analyze`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe\'s instructions will be extracted independently of the step they\'re used in.
         * @summary Analyze Recipe Instructions
         * @param {string} instructions The instructions to be analyzed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyzeRecipeInstructions: async (instructions: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'instructions' is not null or undefined
            assertParamExists('analyzeRecipeInstructions', 'instructions', instructions)
            const localVarPath = `/recipes/analyzeInstructions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)


            if (instructions !== undefined) { 
                localVarFormParams.set('instructions', instructions as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Autocomplete the entry of an ingredient.
         * @summary Autocomplete Ingredient Search
         * @param {string} query The partial or full ingredient name.
         * @param {number} [number] The number of results to return (between 1 and 100).
         * @param {boolean} [metaInformation] Whether to return more meta information about the ingredients.
         * @param {string} [intolerances] A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autocompleteIngredientSearch: async (query: string, number?: number, metaInformation?: boolean, intolerances?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('autocompleteIngredientSearch', 'query', query)
            const localVarPath = `/food/ingredients/autocomplete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (number !== undefined) {
                localVarQueryParameter['number'] = number;
            }

            if (metaInformation !== undefined) {
                localVarQueryParameter['metaInformation'] = metaInformation;
            }

            if (intolerances !== undefined) {
                localVarQueryParameter['intolerances'] = intolerances;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
         * @summary Autocomplete Menu Item Search
         * @param {string} query The (partial) search query.
         * @param {number} [number] The number of results to return (between 1 and 25).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autocompleteMenuItemSearch: async (query: string, number?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('autocompleteMenuItemSearch', 'query', query)
            const localVarPath = `/food/menuItems/suggest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (number !== undefined) {
                localVarQueryParameter['number'] = number;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
         * @summary Autocomplete Product Search
         * @param {string} query The (partial) search query.
         * @param {number} [number] The number of results to return (between 1 and 25).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autocompleteProductSearch: async (query: string, number?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('autocompleteProductSearch', 'query', query)
            const localVarPath = `/food/products/suggest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (number !== undefined) {
                localVarQueryParameter['number'] = number;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Autocomplete a partial input to suggest possible recipe names.
         * @summary Autocomplete Recipe Search
         * @param {string} query The query to be autocompleted.
         * @param {number} [number] The number of results to return (between 1 and 25).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autocompleteRecipeSearch: async (query: string, number?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('autocompleteRecipeSearch', 'query', query)
            const localVarPath = `/recipes/autocomplete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (number !== undefined) {
                localVarQueryParameter['number'] = number;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Classify the recipe\'s cuisine.
         * @summary Classify Cuisine
         * @param {string} title The title of the recipe.
         * @param {string} ingredientList The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classifyCuisine: async (title: string, ingredientList: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'title' is not null or undefined
            assertParamExists('classifyCuisine', 'title', title)
            // verify required parameter 'ingredientList' is not null or undefined
            assertParamExists('classifyCuisine', 'ingredientList', ingredientList)
            const localVarPath = `/recipes/cuisine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)


            if (title !== undefined) { 
                localVarFormParams.set('title', title as any);
            }
    
            if (ingredientList !== undefined) { 
                localVarFormParams.set('ingredientList', ingredientList as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
         * @summary Classify Grocery Product
         * @param {InlineObject9} inlineObject9 
         * @param {string} [locale] The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classifyGroceryProduct: async (inlineObject9: InlineObject9, locale?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject9' is not null or undefined
            assertParamExists('classifyGroceryProduct', 'inlineObject9', inlineObject9)
            const localVarPath = `/food/products/classify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject9, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provide a set of product jsons, get back classified products.
         * @summary Classify Grocery Product Bulk
         * @param {Array<any>} requestBody 
         * @param {string} [locale] The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classifyGroceryProductBulk: async (requestBody: Array<any>, locale?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('classifyGroceryProductBulk', 'requestBody', requestBody)
            const localVarPath = `/food/products/classifyBatch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete all planned items from the user\'s meal plan for a specific day.
         * @summary Clear Meal Plan Day
         * @param {string} username The username.
         * @param {string} date The date in the format yyyy-mm-dd.
         * @param {string} hash The private hash for the username.
         * @param {InlineObject10} inlineObject10 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearMealPlanDay: async (username: string, date: string, hash: string, inlineObject10: InlineObject10, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('clearMealPlanDay', 'username', username)
            // verify required parameter 'date' is not null or undefined
            assertParamExists('clearMealPlanDay', 'date', date)
            // verify required parameter 'hash' is not null or undefined
            assertParamExists('clearMealPlanDay', 'hash', hash)
            // verify required parameter 'inlineObject10' is not null or undefined
            assertParamExists('clearMealPlanDay', 'inlineObject10', inlineObject10)
            const localVarPath = `/mealplanner/{username}/day/{date}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)))
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (hash !== undefined) {
                localVarQueryParameter['hash'] = hash;
            }


    
            localVarHeaderParameter['Content-Type'] = '';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject10, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
         * @summary Compute Glycemic Load
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        computeGlycemicLoad: async (body: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('computeGlycemicLoad', 'body', body)
            const localVarPath = `/food/ingredients/glycemicLoad`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * In order to call user-specific endpoints, you need to connect your app\'s users to spoonacular users.
         * @summary Connect User
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectUser: async (body: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('connectUser', 'body', body)
            const localVarPath = `/users/connect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)


    
            localVarHeaderParameter['Content-Type'] = '';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Convert amounts like \"2 cups of flour to grams\".
         * @summary Convert Amounts
         * @param {string} ingredientName The ingredient which you want to convert.
         * @param {number} sourceAmount The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.
         * @param {string} sourceUnit The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
         * @param {string} targetUnit The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertAmounts: async (ingredientName: string, sourceAmount: number, sourceUnit: string, targetUnit: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ingredientName' is not null or undefined
            assertParamExists('convertAmounts', 'ingredientName', ingredientName)
            // verify required parameter 'sourceAmount' is not null or undefined
            assertParamExists('convertAmounts', 'sourceAmount', sourceAmount)
            // verify required parameter 'sourceUnit' is not null or undefined
            assertParamExists('convertAmounts', 'sourceUnit', sourceUnit)
            // verify required parameter 'targetUnit' is not null or undefined
            assertParamExists('convertAmounts', 'targetUnit', targetUnit)
            const localVarPath = `/recipes/convert`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (ingredientName !== undefined) {
                localVarQueryParameter['ingredientName'] = ingredientName;
            }

            if (sourceAmount !== undefined) {
                localVarQueryParameter['sourceAmount'] = sourceAmount;
            }

            if (sourceUnit !== undefined) {
                localVarQueryParameter['sourceUnit'] = sourceUnit;
            }

            if (targetUnit !== undefined) {
                localVarQueryParameter['targetUnit'] = targetUnit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a recipe card for a recipe.
         * @summary Create Recipe Card
         * @param {string} title The title of the recipe.
         * @param {any} image The binary image of the recipe as jpg.
         * @param {string} ingredients The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
         * @param {string} instructions The instructions to make the recipe. One step per line (separate lines with \\\\n).
         * @param {number} readyInMinutes The number of minutes it takes to get the recipe on the table.
         * @param {number} servings The number of servings the recipe makes.
         * @param {string} mask The mask to put over the recipe image (\\\&quot;ellipseMask\\\&quot;, \\\&quot;diamondMask\\\&quot;, \\\&quot;starMask\\\&quot;, \\\&quot;heartMask\\\&quot;, \\\&quot;potMask\\\&quot;, \\\&quot;fishMask\\\&quot;).
         * @param {string} backgroundImage The background image (\\\&quot;none\\\&quot;,\\\&quot;background1\\\&quot;, or \\\&quot;background2\\\&quot;).
         * @param {string} [author] The author of the recipe.
         * @param {string} [backgroundColor] The background color for the recipe card as a hex-string.
         * @param {string} [fontColor] The font color for the recipe card as a hex-string.
         * @param {string} [source] The source of the recipe.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecipeCard: async (title: string, image: any, ingredients: string, instructions: string, readyInMinutes: number, servings: number, mask: string, backgroundImage: string, author?: string, backgroundColor?: string, fontColor?: string, source?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'title' is not null or undefined
            assertParamExists('createRecipeCard', 'title', title)
            // verify required parameter 'image' is not null or undefined
            assertParamExists('createRecipeCard', 'image', image)
            // verify required parameter 'ingredients' is not null or undefined
            assertParamExists('createRecipeCard', 'ingredients', ingredients)
            // verify required parameter 'instructions' is not null or undefined
            assertParamExists('createRecipeCard', 'instructions', instructions)
            // verify required parameter 'readyInMinutes' is not null or undefined
            assertParamExists('createRecipeCard', 'readyInMinutes', readyInMinutes)
            // verify required parameter 'servings' is not null or undefined
            assertParamExists('createRecipeCard', 'servings', servings)
            // verify required parameter 'mask' is not null or undefined
            assertParamExists('createRecipeCard', 'mask', mask)
            // verify required parameter 'backgroundImage' is not null or undefined
            assertParamExists('createRecipeCard', 'backgroundImage', backgroundImage)
            const localVarPath = `/recipes/visualizeRecipe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)


            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }
    
            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
            if (ingredients !== undefined) { 
                localVarFormParams.append('ingredients', ingredients as any);
            }
    
            if (instructions !== undefined) { 
                localVarFormParams.append('instructions', instructions as any);
            }
    
            if (readyInMinutes !== undefined) { 
                localVarFormParams.append('readyInMinutes', readyInMinutes as any);
            }
    
            if (servings !== undefined) { 
                localVarFormParams.append('servings', servings as any);
            }
    
            if (mask !== undefined) { 
                localVarFormParams.append('mask', mask as any);
            }
    
            if (backgroundImage !== undefined) { 
                localVarFormParams.append('backgroundImage', backgroundImage as any);
            }
    
            if (author !== undefined) { 
                localVarFormParams.append('author', author as any);
            }
    
            if (backgroundColor !== undefined) { 
                localVarFormParams.append('backgroundColor', backgroundColor as any);
            }
    
            if (fontColor !== undefined) { 
                localVarFormParams.append('fontColor', fontColor as any);
            }
    
            if (source !== undefined) { 
                localVarFormParams.append('source', source as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an item from the user\'s meal plan.
         * @summary Delete from Meal Plan
         * @param {string} username The username.
         * @param {number} id The shopping list item id.
         * @param {string} hash The private hash for the username.
         * @param {InlineObject12} inlineObject12 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFromMealPlan: async (username: string, id: number, hash: string, inlineObject12: InlineObject12, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('deleteFromMealPlan', 'username', username)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteFromMealPlan', 'id', id)
            // verify required parameter 'hash' is not null or undefined
            assertParamExists('deleteFromMealPlan', 'hash', hash)
            // verify required parameter 'inlineObject12' is not null or undefined
            assertParamExists('deleteFromMealPlan', 'inlineObject12', inlineObject12)
            const localVarPath = `/mealplanner/{username}/items/{id}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (hash !== undefined) {
                localVarQueryParameter['hash'] = hash;
            }


    
            localVarHeaderParameter['Content-Type'] = '';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject12, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an item from the current shopping list of the user.
         * @summary Delete from Shopping List
         * @param {string} username The username.
         * @param {number} id The shopping list item id.
         * @param {string} hash The private hash for the username.
         * @param {InlineObject15} inlineObject15 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFromShoppingList: async (username: string, id: number, hash: string, inlineObject15: InlineObject15, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('deleteFromShoppingList', 'username', username)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteFromShoppingList', 'id', id)
            // verify required parameter 'hash' is not null or undefined
            assertParamExists('deleteFromShoppingList', 'hash', hash)
            // verify required parameter 'inlineObject15' is not null or undefined
            assertParamExists('deleteFromShoppingList', 'inlineObject15', inlineObject15)
            const localVarPath = `/mealplanner/{username}/shopping-list/items/{id}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (hash !== undefined) {
                localVarQueryParameter['hash'] = hash;
            }


    
            localVarHeaderParameter['Content-Type'] = '';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject15, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.
         * @summary Detect Food in Text
         * @param {string} text The text in which food items, such as dish names and ingredients, should be detected in.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detectFoodInText: async (text: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'text' is not null or undefined
            assertParamExists('detectFoodInText', 'text', text)
            const localVarPath = `/food/detect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)


            if (text !== undefined) { 
                localVarFormParams.set('text', text as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
         * @summary Extract Recipe from Website
         * @param {string} url The URL of the recipe page.
         * @param {boolean} [forceExtraction] If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.
         * @param {boolean} [analyze] If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extractRecipeFromWebsite: async (url: string, forceExtraction?: boolean, analyze?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            assertParamExists('extractRecipeFromWebsite', 'url', url)
            const localVarPath = `/recipes/extract`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }

            if (forceExtraction !== undefined) {
                localVarQueryParameter['forceExtraction'] = forceExtraction;
            }

            if (analyze !== undefined) {
                localVarQueryParameter['analyze'] = analyze;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
         * @summary Generate Meal Plan
         * @param {string} [timeFrame] Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;.
         * @param {number} [targetCalories] What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.
         * @param {string} [diet] Enter a diet that the meal plan has to adhere to. See a full list of supported diets.
         * @param {string} [exclude] A comma-separated list of allergens or ingredients that must be excluded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateMealPlan: async (timeFrame?: string, targetCalories?: number, diet?: string, exclude?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mealplanner/generate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (timeFrame !== undefined) {
                localVarQueryParameter['timeFrame'] = timeFrame;
            }

            if (targetCalories !== undefined) {
                localVarQueryParameter['targetCalories'] = targetCalories;
            }

            if (diet !== undefined) {
                localVarQueryParameter['diet'] = diet;
            }

            if (exclude !== undefined) {
                localVarQueryParameter['exclude'] = exclude;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate the shopping list for a user from the meal planner in a given time frame.
         * @summary Generate Shopping List
         * @param {string} username The username.
         * @param {string} startDate The start date in the format yyyy-mm-dd.
         * @param {string} endDate The end date in the format yyyy-mm-dd.
         * @param {string} hash The private hash for the username.
         * @param {InlineObject13} inlineObject13 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateShoppingList: async (username: string, startDate: string, endDate: string, hash: string, inlineObject13: InlineObject13, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('generateShoppingList', 'username', username)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('generateShoppingList', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('generateShoppingList', 'endDate', endDate)
            // verify required parameter 'hash' is not null or undefined
            assertParamExists('generateShoppingList', 'hash', hash)
            // verify required parameter 'inlineObject13' is not null or undefined
            assertParamExists('generateShoppingList', 'inlineObject13', inlineObject13)
            const localVarPath = `/mealplanner/{username}/shopping-list/{start-date}/{end-date}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)))
                .replace(`{${"start-date"}}`, encodeURIComponent(String(startDate)))
                .replace(`{${"end-date"}}`, encodeURIComponent(String(endDate)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (hash !== undefined) {
                localVarQueryParameter['hash'] = hash;
            }


    
            localVarHeaderParameter['Content-Type'] = '';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject13, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a random joke that is related to food. Caution: this is an endpoint for adults!
         * @summary Get a Random Food Joke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getARandomFoodJoke: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/food/jokes/random`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an analyzed breakdown of a recipe\'s instructions. Each step is enriched with the ingredients and equipment required.
         * @summary Get Analyzed Recipe Instructions
         * @param {number} id The recipe id.
         * @param {boolean} [stepBreakdown] Whether to break down the recipe steps even more.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalyzedRecipeInstructions: async (id: number, stepBreakdown?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAnalyzedRecipeInstructions', 'id', id)
            const localVarPath = `/recipes/{id}/analyzedInstructions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (stepBreakdown !== undefined) {
                localVarQueryParameter['stepBreakdown'] = stepBreakdown;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Find comparable products to the given one.
         * @summary Get Comparable Products
         * @param {number} upc The UPC of the product for which you want to find comparable products.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComparableProducts: async (upc: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'upc' is not null or undefined
            assertParamExists('getComparableProducts', 'upc', upc)
            const localVarPath = `/food/products/upc/{upc}/comparable`
                .replace(`{${"upc"}}`, encodeURIComponent(String(upc)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns suggestions for things the user can say or ask the chatbot.
         * @summary Get Conversation Suggests
         * @param {string} query A (partial) query from the user. The endpoint will return if it matches topics it can talk about.
         * @param {number} [number] The number of suggestions to return (between 1 and 25).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationSuggests: async (query: string, number?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('getConversationSuggests', 'query', query)
            const localVarPath = `/food/converse/suggest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (number !== undefined) {
                localVarQueryParameter['number'] = number;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Find a dish that goes well with a given wine.
         * @summary Get Dish Pairing for Wine
         * @param {string} wine The type of wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDishPairingForWine: async (wine: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'wine' is not null or undefined
            assertParamExists('getDishPairingForWine', 'wine', wine)
            const localVarPath = `/food/wine/dishes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (wine !== undefined) {
                localVarQueryParameter['wine'] = wine;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
         * @summary Get Ingredient Information
         * @param {number} id The ingredient id.
         * @param {number} [amount] The amount of this ingredient.
         * @param {string} [unit] The unit for the given amount.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientInformation: async (id: number, amount?: number, unit?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getIngredientInformation', 'id', id)
            const localVarPath = `/food/ingredients/{id}/information`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (unit !== undefined) {
                localVarQueryParameter['unit'] = unit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for substitutes for a given ingredient.
         * @summary Get Ingredient Substitutes
         * @param {string} ingredientName The name of the ingredient you want to replace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientSubstitutes: async (ingredientName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ingredientName' is not null or undefined
            assertParamExists('getIngredientSubstitutes', 'ingredientName', ingredientName)
            const localVarPath = `/food/ingredients/substitutes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (ingredientName !== undefined) {
                localVarQueryParameter['ingredientName'] = ingredientName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for substitutes for a given ingredient.
         * @summary Get Ingredient Substitutes by ID
         * @param {number} id The id of the ingredient you want substitutes for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientSubstitutesByID: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getIngredientSubstitutesByID', 'id', id)
            const localVarPath = `/food/ingredients/{id}/substitutes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a meal plan template.
         * @summary Get Meal Plan Template
         * @param {string} username The username.
         * @param {number} id The shopping list item id.
         * @param {string} hash The private hash for the username.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMealPlanTemplate: async (username: string, id: number, hash: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getMealPlanTemplate', 'username', username)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMealPlanTemplate', 'id', id)
            // verify required parameter 'hash' is not null or undefined
            assertParamExists('getMealPlanTemplate', 'hash', hash)
            const localVarPath = `/mealplanner/{username}/templates/{id}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (hash !== undefined) {
                localVarQueryParameter['hash'] = hash;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get meal plan templates from user or public ones.
         * @summary Get Meal Plan Templates
         * @param {string} username The username.
         * @param {string} hash The private hash for the username.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMealPlanTemplates: async (username: string, hash: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getMealPlanTemplates', 'username', username)
            // verify required parameter 'hash' is not null or undefined
            assertParamExists('getMealPlanTemplates', 'hash', hash)
            const localVarPath = `/mealplanner/{username}/templates`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (hash !== undefined) {
                localVarQueryParameter['hash'] = hash;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user\'s hash that can be found in his/her account.
         * @summary Get Meal Plan Week
         * @param {string} username The username.
         * @param {string} startDate The start date of the meal planned week in the format yyyy-mm-dd.
         * @param {string} hash The private hash for the username.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMealPlanWeek: async (username: string, startDate: string, hash: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getMealPlanWeek', 'username', username)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('getMealPlanWeek', 'startDate', startDate)
            // verify required parameter 'hash' is not null or undefined
            assertParamExists('getMealPlanWeek', 'hash', hash)
            const localVarPath = `/mealplanner/{username}/week/{start-date}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)))
                .replace(`{${"start-date"}}`, encodeURIComponent(String(startDate)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (hash !== undefined) {
                localVarQueryParameter['hash'] = hash;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use a menu item id to get all available information about a menu item, such as nutrition.
         * @summary Get Menu Item Information
         * @param {number} id The menu item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenuItemInformation: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMenuItemInformation', 'id', id)
            const localVarPath = `/food/menuItems/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
         * @summary Get Product Information
         * @param {number} id The id of the packaged food.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductInformation: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProductInformation', 'id', id)
            const localVarPath = `/food/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns random food trivia.
         * @summary Get Random Food Trivia
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRandomFoodTrivia: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/food/trivia/random`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
         * @summary Get Random Recipes
         * @param {boolean} [limitLicense] Whether the recipes should have an open license that allows display with proper attribution.
         * @param {string} [tags] The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
         * @param {number} [number] The number of random recipes to be returned (between 1 and 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRandomRecipes: async (limitLicense?: boolean, tags?: string, number?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/recipes/random`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (limitLicense !== undefined) {
                localVarQueryParameter['limitLicense'] = limitLicense;
            }

            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }

            if (number !== undefined) {
                localVarQueryParameter['number'] = number;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a recipe\'s equipment list.
         * @summary Get Recipe Equipment by ID
         * @param {number} id The recipe id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipeEquipmentByID: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRecipeEquipmentByID', 'id', id)
            const localVarPath = `/recipes/{id}/equipmentWidget.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
         * @summary Get Recipe Information
         * @param {number} id The id of the recipe.
         * @param {boolean} [includeNutrition] Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipeInformation: async (id: number, includeNutrition?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRecipeInformation', 'id', id)
            const localVarPath = `/recipes/{id}/information`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (includeNutrition !== undefined) {
                localVarQueryParameter['includeNutrition'] = includeNutrition;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
         * @summary Get Recipe Information Bulk
         * @param {string} ids A comma-separated list of recipe ids.
         * @param {boolean} [includeNutrition] Include nutrition data to the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipeInformationBulk: async (ids: string, includeNutrition?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('getRecipeInformationBulk', 'ids', ids)
            const localVarPath = `/recipes/informationBulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }

            if (includeNutrition !== undefined) {
                localVarQueryParameter['includeNutrition'] = includeNutrition;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a recipe\'s ingredient list.
         * @summary Get Recipe Ingredients by ID
         * @param {number} id The recipe id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipeIngredientsByID: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRecipeIngredientsByID', 'id', id)
            const localVarPath = `/recipes/{id}/ingredientWidget.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a recipe\'s nutrition widget data.
         * @summary Get Recipe Nutrition Widget by ID
         * @param {number} id The recipe id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipeNutritionWidgetByID: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRecipeNutritionWidgetByID', 'id', id)
            const localVarPath = `/recipes/{id}/nutritionWidget.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a recipe\'s price breakdown data.
         * @summary Get Recipe Price Breakdown by ID
         * @param {number} id The recipe id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipePriceBreakdownByID: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRecipePriceBreakdownByID', 'id', id)
            const localVarPath = `/recipes/{id}/priceBreakdownWidget.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a recipe\'s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
         * @summary Get Recipe Taste by ID
         * @param {number} id The recipe id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipeTasteByID: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRecipeTasteByID', 'id', id)
            const localVarPath = `/recipes/{id}/tasteWidget.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current shopping list for the given user.
         * @summary Get Shopping List
         * @param {string} username The username.
         * @param {string} hash The private hash for the username.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShoppingList: async (username: string, hash: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getShoppingList', 'username', username)
            // verify required parameter 'hash' is not null or undefined
            assertParamExists('getShoppingList', 'hash', hash)
            const localVarPath = `/mealplanner/{username}/shopping-list`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (hash !== undefined) {
                localVarQueryParameter['hash'] = hash;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Find recipes which are similar to the given one.
         * @summary Get Similar Recipes
         * @param {number} id The id of the source recipe for which similar recipes should be found.
         * @param {number} [number] The number of random recipes to be returned (between 1 and 100).
         * @param {boolean} [limitLicense] Whether the recipes should have an open license that allows display with proper attribution.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilarRecipes: async (id: number, number?: number, limitLicense?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSimilarRecipes', 'id', id)
            const localVarPath = `/recipes/{id}/similar`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (number !== undefined) {
                localVarQueryParameter['number'] = number;
            }

            if (limitLicense !== undefined) {
                localVarQueryParameter['limitLicense'] = limitLicense;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a simple description of a certain wine, e.g. \"malbec\", \"riesling\", or \"merlot\".
         * @summary Get Wine Description
         * @param {string} wine The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWineDescription: async (wine: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'wine' is not null or undefined
            assertParamExists('getWineDescription', 'wine', wine)
            const localVarPath = `/food/wine/description`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (wine !== undefined) {
                localVarQueryParameter['wine'] = wine;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Find a wine that goes well with a food. Food can be a dish name (\"steak\"), an ingredient name (\"salmon\"), or a cuisine (\"italian\").
         * @summary Get Wine Pairing
         * @param {string} food The food to get a pairing for. This can be a dish (\&quot;steak\&quot;), an ingredient (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
         * @param {number} [maxPrice] The maximum price for the specific wine recommendation in USD.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWinePairing: async (food: string, maxPrice?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'food' is not null or undefined
            assertParamExists('getWinePairing', 'food', food)
            const localVarPath = `/food/wine/pairing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (food !== undefined) {
                localVarQueryParameter['food'] = food;
            }

            if (maxPrice !== undefined) {
                localVarQueryParameter['maxPrice'] = maxPrice;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific wine recommendation (concrete product) for a given wine type, e.g. \"merlot\".
         * @summary Get Wine Recommendation
         * @param {string} wine The type of wine to get a specific product recommendation for.
         * @param {number} [maxPrice] The maximum price for the specific wine recommendation in USD.
         * @param {number} [minRating] The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars.
         * @param {number} [number] The number of wine recommendations expected (between 1 and 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWineRecommendation: async (wine: string, maxPrice?: number, minRating?: number, number?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'wine' is not null or undefined
            assertParamExists('getWineRecommendation', 'wine', wine)
            const localVarPath = `/food/wine/recommendation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (wine !== undefined) {
                localVarQueryParameter['wine'] = wine;
            }

            if (maxPrice !== undefined) {
                localVarQueryParameter['maxPrice'] = maxPrice;
            }

            if (minRating !== undefined) {
                localVarQueryParameter['minRating'] = minRating;
            }

            if (number !== undefined) {
                localVarQueryParameter['number'] = number;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Estimate the macronutrients of a dish based on its title.
         * @summary Guess Nutrition by Dish Name
         * @param {string} title The title of the dish.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guessNutritionByDishName: async (title: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'title' is not null or undefined
            assertParamExists('guessNutritionByDishName', 'title', title)
            const localVarPath = `/recipes/guessNutrition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes. You can play around with that endpoint!
         * @summary Image Analysis by URL
         * @param {string} imageUrl The URL of the image to be analyzed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageAnalysisByURL: async (imageUrl: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageUrl' is not null or undefined
            assertParamExists('imageAnalysisByURL', 'imageUrl', imageUrl)
            const localVarPath = `/food/images/analyze`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (imageUrl !== undefined) {
                localVarQueryParameter['imageUrl'] = imageUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Classify a food image. You can play around with that endpoint!
         * @summary Image Classification by URL
         * @param {string} imageUrl The URL of the image to be classified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageClassificationByURL: async (imageUrl: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageUrl' is not null or undefined
            assertParamExists('imageClassificationByURL', 'imageUrl', imageUrl)
            const localVarPath = `/food/images/classify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (imageUrl !== undefined) {
                localVarQueryParameter['imageUrl'] = imageUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).
         * @summary Ingredient Search
         * @param {string} query The partial or full ingredient name.
         * @param {boolean} [addChildren] Whether to add children of found foods.
         * @param {number} [minProteinPercent] The minimum percentage of protein the food must have (between 0 and 100).
         * @param {number} [maxProteinPercent] The maximum percentage of protein the food can have (between 0 and 100).
         * @param {number} [minFatPercent] The minimum percentage of fat the food must have (between 0 and 100).
         * @param {number} [maxFatPercent] The maximum percentage of fat the food can have (between 0 and 100).
         * @param {number} [minCarbsPercent] The minimum percentage of carbs the food must have (between 0 and 100).
         * @param {number} [maxCarbsPercent] The maximum percentage of carbs the food can have (between 0 and 100).
         * @param {boolean} [metaInformation] Whether to return more meta information about the ingredients.
         * @param {string} [intolerances] A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
         * @param {string} [sort] The strategy to sort recipes by. See a full list of supported sorting options.
         * @param {string} [sortDirection] The direction in which to sort. Must be either \&#39;asc\&#39; (ascending) or \&#39;desc\&#39; (descending).
         * @param {number} [offset] The number of results to skip (between 0 and 990).
         * @param {number} [number] The number of expected results (between 1 and 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ingredientSearch: async (query: string, addChildren?: boolean, minProteinPercent?: number, maxProteinPercent?: number, minFatPercent?: number, maxFatPercent?: number, minCarbsPercent?: number, maxCarbsPercent?: number, metaInformation?: boolean, intolerances?: string, sort?: string, sortDirection?: string, offset?: number, number?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('ingredientSearch', 'query', query)
            const localVarPath = `/food/ingredients/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (addChildren !== undefined) {
                localVarQueryParameter['addChildren'] = addChildren;
            }

            if (minProteinPercent !== undefined) {
                localVarQueryParameter['minProteinPercent'] = minProteinPercent;
            }

            if (maxProteinPercent !== undefined) {
                localVarQueryParameter['maxProteinPercent'] = maxProteinPercent;
            }

            if (minFatPercent !== undefined) {
                localVarQueryParameter['minFatPercent'] = minFatPercent;
            }

            if (maxFatPercent !== undefined) {
                localVarQueryParameter['maxFatPercent'] = maxFatPercent;
            }

            if (minCarbsPercent !== undefined) {
                localVarQueryParameter['minCarbsPercent'] = minCarbsPercent;
            }

            if (maxCarbsPercent !== undefined) {
                localVarQueryParameter['maxCarbsPercent'] = maxCarbsPercent;
            }

            if (metaInformation !== undefined) {
                localVarQueryParameter['metaInformation'] = metaInformation;
            }

            if (intolerances !== undefined) {
                localVarQueryParameter['intolerances'] = intolerances;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (number !== undefined) {
                localVarQueryParameter['number'] = number;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Map a set of ingredients to products you can buy in the grocery store.
         * @summary Map Ingredients to Grocery Products
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapIngredientsToGroceryProducts: async (body: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('mapIngredientsToGroceryProducts', 'body', body)
            const localVarPath = `/food/ingredients/map`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Extract an ingredient from plain text.
         * @summary Parse Ingredients
         * @param {string} ingredientList The ingredient list of the recipe, one ingredient per line.
         * @param {number} servings The number of servings that you can make from the ingredients.
         * @param {boolean} [includeNutrition] Whether nutrition data should be added to correctly parsed ingredients.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parseIngredients: async (ingredientList: string, servings: number, includeNutrition?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ingredientList' is not null or undefined
            assertParamExists('parseIngredients', 'ingredientList', ingredientList)
            // verify required parameter 'servings' is not null or undefined
            assertParamExists('parseIngredients', 'servings', servings)
            const localVarPath = `/recipes/parseIngredients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)


            if (ingredientList !== undefined) { 
                localVarFormParams.set('ingredientList', ingredientList as any);
            }
    
            if (servings !== undefined) { 
                localVarFormParams.set('servings', servings as any);
            }
    
            if (includeNutrition !== undefined) { 
                localVarFormParams.set('includeNutrition', includeNutrition as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Answer a nutrition related natural language question.
         * @summary Quick Answer
         * @param {string} q The nutrition related question.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quickAnswer: async (q: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'q' is not null or undefined
            assertParamExists('quickAnswer', 'q', q)
            const localVarPath = `/recipes/quickAnswer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.
         * @summary Search All Food
         * @param {string} query The search query.
         * @param {number} [offset] The number of results to skip (between 0 and 990).
         * @param {number} [number] The number of expected results (between 1 and 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAllFood: async (query: string, offset?: number, number?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('searchAllFood', 'query', query)
            const localVarPath = `/food/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (number !== undefined) {
                localVarQueryParameter['number'] = number;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search custom foods in a user\'s account.
         * @summary Search Custom Foods
         * @param {string} query The search query.
         * @param {string} username The username.
         * @param {string} hash The private hash for the username.
         * @param {number} [offset] The number of results to skip (between 0 and 990).
         * @param {number} [number] The number of expected results (between 1 and 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCustomFoods: async (query: string, username: string, hash: string, offset?: number, number?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('searchCustomFoods', 'query', query)
            // verify required parameter 'username' is not null or undefined
            assertParamExists('searchCustomFoods', 'username', username)
            // verify required parameter 'hash' is not null or undefined
            assertParamExists('searchCustomFoods', 'hash', hash)
            const localVarPath = `/food/customFoods/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (hash !== undefined) {
                localVarQueryParameter['hash'] = hash;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (number !== undefined) {
                localVarQueryParameter['number'] = number;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Find recipe and other food related videos.
         * @summary Search Food Videos
         * @param {string} query The search query.
         * @param {string} [type] The type of the recipes. See a full list of supported meal types.
         * @param {string} [cuisine] The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines.
         * @param {string} [diet] The diet for which the recipes must be suitable. See a full list of supported diets.
         * @param {string} [includeIngredients] A comma-separated list of ingredients that the recipes should contain.
         * @param {string} [excludeIngredients] A comma-separated list of ingredients or ingredient types that the recipes must not contain.
         * @param {number} [minLength] Minimum video length in seconds.
         * @param {number} [maxLength] Maximum video length in seconds.
         * @param {number} [offset] The number of results to skip (between 0 and 900).
         * @param {number} [number] The number of results to return (between 1 and 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchFoodVideos: async (query: string, type?: string, cuisine?: string, diet?: string, includeIngredients?: string, excludeIngredients?: string, minLength?: number, maxLength?: number, offset?: number, number?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('searchFoodVideos', 'query', query)
            const localVarPath = `/food/videos/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (cuisine !== undefined) {
                localVarQueryParameter['cuisine'] = cuisine;
            }

            if (diet !== undefined) {
                localVarQueryParameter['diet'] = diet;
            }

            if (includeIngredients !== undefined) {
                localVarQueryParameter['includeIngredients'] = includeIngredients;
            }

            if (excludeIngredients !== undefined) {
                localVarQueryParameter['excludeIngredients'] = excludeIngredients;
            }

            if (minLength !== undefined) {
                localVarQueryParameter['minLength'] = minLength;
            }

            if (maxLength !== undefined) {
                localVarQueryParameter['maxLength'] = maxLength;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (number !== undefined) {
                localVarQueryParameter['number'] = number;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search packaged food products, such as frozen pizza or Greek yogurt.
         * @summary Search Grocery Products
         * @param {string} query The search query.
         * @param {number} [minCalories] The minimum amount of calories the product must have.
         * @param {number} [maxCalories] The maximum amount of calories the product can have.
         * @param {number} [minCarbs] The minimum amount of carbohydrates in grams the product must have.
         * @param {number} [maxCarbs] The maximum amount of carbohydrates in grams the product can have.
         * @param {number} [minProtein] The minimum amount of protein in grams the product must have.
         * @param {number} [maxProtein] The maximum amount of protein in grams the product can have.
         * @param {number} [minFat] The minimum amount of fat in grams the product must have.
         * @param {number} [maxFat] The maximum amount of fat in grams the product can have.
         * @param {number} [offset] The number of results to skip (between 0 and 990).
         * @param {number} [number] The number of expected results (between 1 and 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchGroceryProducts: async (query: string, minCalories?: number, maxCalories?: number, minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minFat?: number, maxFat?: number, offset?: number, number?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('searchGroceryProducts', 'query', query)
            const localVarPath = `/food/products/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (minCalories !== undefined) {
                localVarQueryParameter['minCalories'] = minCalories;
            }

            if (maxCalories !== undefined) {
                localVarQueryParameter['maxCalories'] = maxCalories;
            }

            if (minCarbs !== undefined) {
                localVarQueryParameter['minCarbs'] = minCarbs;
            }

            if (maxCarbs !== undefined) {
                localVarQueryParameter['maxCarbs'] = maxCarbs;
            }

            if (minProtein !== undefined) {
                localVarQueryParameter['minProtein'] = minProtein;
            }

            if (maxProtein !== undefined) {
                localVarQueryParameter['maxProtein'] = maxProtein;
            }

            if (minFat !== undefined) {
                localVarQueryParameter['minFat'] = minFat;
            }

            if (maxFat !== undefined) {
                localVarQueryParameter['maxFat'] = maxFat;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (number !== undefined) {
                localVarQueryParameter['number'] = number;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a packaged food using its UPC.
         * @summary Search Grocery Products by UPC
         * @param {number} upc The product\&#39;s UPC.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchGroceryProductsByUPC: async (upc: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'upc' is not null or undefined
            assertParamExists('searchGroceryProductsByUPC', 'upc', upc)
            const localVarPath = `/food/products/upc/{upc}`
                .replace(`{${"upc"}}`, encodeURIComponent(String(upc)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald\'s Big Mac or Starbucks Mocha.
         * @summary Search Menu Items
         * @param {string} query The search query.
         * @param {number} [minCalories] The minimum amount of calories the menu item must have.
         * @param {number} [maxCalories] The maximum amount of calories the menu item can have.
         * @param {number} [minCarbs] The minimum amount of carbohydrates in grams the menu item must have.
         * @param {number} [maxCarbs] The maximum amount of carbohydrates in grams the menu item can have.
         * @param {number} [minProtein] The minimum amount of protein in grams the menu item must have.
         * @param {number} [maxProtein] The maximum amount of protein in grams the menu item can have.
         * @param {number} [minFat] The minimum amount of fat in grams the menu item must have.
         * @param {number} [maxFat] The maximum amount of fat in grams the menu item can have.
         * @param {number} [offset] The offset number for paging (between 0 and 990).
         * @param {number} [number] The number of expected results (between 1 and 10).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMenuItems: async (query: string, minCalories?: number, maxCalories?: number, minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minFat?: number, maxFat?: number, offset?: number, number?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('searchMenuItems', 'query', query)
            const localVarPath = `/food/menuItems/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (minCalories !== undefined) {
                localVarQueryParameter['minCalories'] = minCalories;
            }

            if (maxCalories !== undefined) {
                localVarQueryParameter['maxCalories'] = maxCalories;
            }

            if (minCarbs !== undefined) {
                localVarQueryParameter['minCarbs'] = minCarbs;
            }

            if (maxCarbs !== undefined) {
                localVarQueryParameter['maxCarbs'] = maxCarbs;
            }

            if (minProtein !== undefined) {
                localVarQueryParameter['minProtein'] = minProtein;
            }

            if (maxProtein !== undefined) {
                localVarQueryParameter['maxProtein'] = maxProtein;
            }

            if (minFat !== undefined) {
                localVarQueryParameter['minFat'] = minFat;
            }

            if (maxFat !== undefined) {
                localVarQueryParameter['maxFat'] = maxFat;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (number !== undefined) {
                localVarQueryParameter['number'] = number;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
         * @summary Search Recipes
         * @param {string} query The (natural language) recipe search query.
         * @param {string} [cuisine] The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as \&#39;OR\&#39;). See a full list of supported cuisines.
         * @param {string} [excludeCuisine] The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as \&#39;AND\&#39;). See a full list of supported cuisines.
         * @param {string} [diet] The diet for which the recipes must be suitable. See a full list of supported diets.
         * @param {string} [intolerances] A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
         * @param {string} [equipment] The equipment required. Multiple values will be interpreted as \&#39;or\&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;.
         * @param {string} [includeIngredients] A comma-separated list of ingredients that should/must be used in the recipes.
         * @param {string} [excludeIngredients] A comma-separated list of ingredients or ingredient types that the recipes must not contain.
         * @param {string} [type] The type of recipe. See a full list of supported meal types.
         * @param {boolean} [instructionsRequired] Whether the recipes must have instructions.
         * @param {boolean} [fillIngredients] Add information about the ingredients and whether they are used or missing in relation to the query.
         * @param {boolean} [addRecipeInformation] If set to true, you get more information about the recipes returned.
         * @param {boolean} [addRecipeNutrition] If set to true, you get nutritional information about each recipes returned.
         * @param {string} [author] The username of the recipe author.
         * @param {string} [tags] User defined tags that have to match. The author param has to be set.
         * @param {number} [recipeBoxId] The id of the recipe box to which the search should be limited to.
         * @param {string} [titleMatch] Enter text that must be found in the title of the recipes.
         * @param {number} [maxReadyTime] The maximum time in minutes it should take to prepare and cook the recipe.
         * @param {boolean} [ignorePantry] Whether to ignore typical pantry items, such as water, salt, flour, etc.
         * @param {string} [sort] The strategy to sort recipes by. See a full list of supported sorting options.
         * @param {string} [sortDirection] The direction in which to sort. Must be either \&#39;asc\&#39; (ascending) or \&#39;desc\&#39; (descending).
         * @param {number} [minCarbs] The minimum amount of carbohydrates in grams the recipe must have.
         * @param {number} [maxCarbs] The maximum amount of carbohydrates in grams the recipe can have.
         * @param {number} [minProtein] The minimum amount of protein in grams the recipe must have.
         * @param {number} [maxProtein] The maximum amount of protein in grams the recipe can have.
         * @param {number} [minCalories] The minimum amount of calories the recipe must have.
         * @param {number} [maxCalories] The maximum amount of calories the recipe can have.
         * @param {number} [minFat] The minimum amount of fat in grams the recipe must have.
         * @param {number} [maxFat] The maximum amount of fat in grams the recipe can have.
         * @param {number} [minAlcohol] The minimum amount of alcohol in grams the recipe must have.
         * @param {number} [maxAlcohol] The maximum amount of alcohol in grams the recipe can have.
         * @param {number} [minCaffeine] The minimum amount of caffeine in milligrams the recipe must have.
         * @param {number} [maxCaffeine] The maximum amount of caffeine in milligrams the recipe can have.
         * @param {number} [minCopper] The minimum amount of copper in milligrams the recipe must have.
         * @param {number} [maxCopper] The maximum amount of copper in milligrams the recipe can have.
         * @param {number} [minCalcium] The minimum amount of calcium in milligrams the recipe must have.
         * @param {number} [maxCalcium] The maximum amount of calcium in milligrams the recipe can have.
         * @param {number} [minCholine] The minimum amount of choline in milligrams the recipe must have.
         * @param {number} [maxCholine] The maximum amount of choline in milligrams the recipe can have.
         * @param {number} [minCholesterol] The minimum amount of cholesterol in milligrams the recipe must have.
         * @param {number} [maxCholesterol] The maximum amount of cholesterol in milligrams the recipe can have.
         * @param {number} [minFluoride] The minimum amount of fluoride in milligrams the recipe must have.
         * @param {number} [maxFluoride] The maximum amount of fluoride in milligrams the recipe can have.
         * @param {number} [minSaturatedFat] The minimum amount of saturated fat in grams the recipe must have.
         * @param {number} [maxSaturatedFat] The maximum amount of saturated fat in grams the recipe can have.
         * @param {number} [minVitaminA] The minimum amount of Vitamin A in IU the recipe must have.
         * @param {number} [maxVitaminA] The maximum amount of Vitamin A in IU the recipe can have.
         * @param {number} [minVitaminC] The minimum amount of Vitamin C milligrams the recipe must have.
         * @param {number} [maxVitaminC] The maximum amount of Vitamin C in milligrams the recipe can have.
         * @param {number} [minVitaminD] The minimum amount of Vitamin D in micrograms the recipe must have.
         * @param {number} [maxVitaminD] The maximum amount of Vitamin D in micrograms the recipe can have.
         * @param {number} [minVitaminE] The minimum amount of Vitamin E in milligrams the recipe must have.
         * @param {number} [maxVitaminE] The maximum amount of Vitamin E in milligrams the recipe can have.
         * @param {number} [minVitaminK] The minimum amount of Vitamin K in micrograms the recipe must have.
         * @param {number} [maxVitaminK] The maximum amount of Vitamin K in micrograms the recipe can have.
         * @param {number} [minVitaminB1] The minimum amount of Vitamin B1 in milligrams the recipe must have.
         * @param {number} [maxVitaminB1] The maximum amount of Vitamin B1 in milligrams the recipe can have.
         * @param {number} [minVitaminB2] The minimum amount of Vitamin B2 in milligrams the recipe must have.
         * @param {number} [maxVitaminB2] The maximum amount of Vitamin B2 in milligrams the recipe can have.
         * @param {number} [minVitaminB5] The minimum amount of Vitamin B5 in milligrams the recipe must have.
         * @param {number} [maxVitaminB5] The maximum amount of Vitamin B5 in milligrams the recipe can have.
         * @param {number} [minVitaminB3] The minimum amount of Vitamin B3 in milligrams the recipe must have.
         * @param {number} [maxVitaminB3] The maximum amount of Vitamin B3 in milligrams the recipe can have.
         * @param {number} [minVitaminB6] The minimum amount of Vitamin B6 in milligrams the recipe must have.
         * @param {number} [maxVitaminB6] The maximum amount of Vitamin B6 in milligrams the recipe can have.
         * @param {number} [minVitaminB12] The minimum amount of Vitamin B12 in micrograms the recipe must have.
         * @param {number} [maxVitaminB12] The maximum amount of Vitamin B12 in micrograms the recipe can have.
         * @param {number} [minFiber] The minimum amount of fiber in grams the recipe must have.
         * @param {number} [maxFiber] The maximum amount of fiber in grams the recipe can have.
         * @param {number} [minFolate] The minimum amount of folate in micrograms the recipe must have.
         * @param {number} [maxFolate] The maximum amount of folate in micrograms the recipe can have.
         * @param {number} [minFolicAcid] The minimum amount of folic acid in micrograms the recipe must have.
         * @param {number} [maxFolicAcid] The maximum amount of folic acid in micrograms the recipe can have.
         * @param {number} [minIodine] The minimum amount of iodine in micrograms the recipe must have.
         * @param {number} [maxIodine] The maximum amount of iodine in micrograms the recipe can have.
         * @param {number} [minIron] The minimum amount of iron in milligrams the recipe must have.
         * @param {number} [maxIron] The maximum amount of iron in milligrams the recipe can have.
         * @param {number} [minMagnesium] The minimum amount of magnesium in milligrams the recipe must have.
         * @param {number} [maxMagnesium] The maximum amount of magnesium in milligrams the recipe can have.
         * @param {number} [minManganese] The minimum amount of manganese in milligrams the recipe must have.
         * @param {number} [maxManganese] The maximum amount of manganese in milligrams the recipe can have.
         * @param {number} [minPhosphorus] The minimum amount of phosphorus in milligrams the recipe must have.
         * @param {number} [maxPhosphorus] The maximum amount of phosphorus in milligrams the recipe can have.
         * @param {number} [minPotassium] The minimum amount of potassium in milligrams the recipe must have.
         * @param {number} [maxPotassium] The maximum amount of potassium in milligrams the recipe can have.
         * @param {number} [minSelenium] The minimum amount of selenium in micrograms the recipe must have.
         * @param {number} [maxSelenium] The maximum amount of selenium in micrograms the recipe can have.
         * @param {number} [minSodium] The minimum amount of sodium in milligrams the recipe must have.
         * @param {number} [maxSodium] The maximum amount of sodium in milligrams the recipe can have.
         * @param {number} [minSugar] The minimum amount of sugar in grams the recipe must have.
         * @param {number} [maxSugar] The maximum amount of sugar in grams the recipe can have.
         * @param {number} [minZinc] The minimum amount of zinc in milligrams the recipe must have.
         * @param {number} [maxZinc] The maximum amount of zinc in milligrams the recipe can have.
         * @param {number} [offset] The number of results to skip (between 0 and 900).
         * @param {number} [number] The number of expected results (between 1 and 100).
         * @param {boolean} [limitLicense] Whether the recipes should have an open license that allows display with proper attribution.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRecipes: async (query: string, cuisine?: string, excludeCuisine?: string, diet?: string, intolerances?: string, equipment?: string, includeIngredients?: string, excludeIngredients?: string, type?: string, instructionsRequired?: boolean, fillIngredients?: boolean, addRecipeInformation?: boolean, addRecipeNutrition?: boolean, author?: string, tags?: string, recipeBoxId?: number, titleMatch?: string, maxReadyTime?: number, ignorePantry?: boolean, sort?: string, sortDirection?: string, minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minCalories?: number, maxCalories?: number, minFat?: number, maxFat?: number, minAlcohol?: number, maxAlcohol?: number, minCaffeine?: number, maxCaffeine?: number, minCopper?: number, maxCopper?: number, minCalcium?: number, maxCalcium?: number, minCholine?: number, maxCholine?: number, minCholesterol?: number, maxCholesterol?: number, minFluoride?: number, maxFluoride?: number, minSaturatedFat?: number, maxSaturatedFat?: number, minVitaminA?: number, maxVitaminA?: number, minVitaminC?: number, maxVitaminC?: number, minVitaminD?: number, maxVitaminD?: number, minVitaminE?: number, maxVitaminE?: number, minVitaminK?: number, maxVitaminK?: number, minVitaminB1?: number, maxVitaminB1?: number, minVitaminB2?: number, maxVitaminB2?: number, minVitaminB5?: number, maxVitaminB5?: number, minVitaminB3?: number, maxVitaminB3?: number, minVitaminB6?: number, maxVitaminB6?: number, minVitaminB12?: number, maxVitaminB12?: number, minFiber?: number, maxFiber?: number, minFolate?: number, maxFolate?: number, minFolicAcid?: number, maxFolicAcid?: number, minIodine?: number, maxIodine?: number, minIron?: number, maxIron?: number, minMagnesium?: number, maxMagnesium?: number, minManganese?: number, maxManganese?: number, minPhosphorus?: number, maxPhosphorus?: number, minPotassium?: number, maxPotassium?: number, minSelenium?: number, maxSelenium?: number, minSodium?: number, maxSodium?: number, minSugar?: number, maxSugar?: number, minZinc?: number, maxZinc?: number, offset?: number, number?: number, limitLicense?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('searchRecipes', 'query', query)
            const localVarPath = `/recipes/complexSearch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (cuisine !== undefined) {
                localVarQueryParameter['cuisine'] = cuisine;
            }

            if (excludeCuisine !== undefined) {
                localVarQueryParameter['excludeCuisine'] = excludeCuisine;
            }

            if (diet !== undefined) {
                localVarQueryParameter['diet'] = diet;
            }

            if (intolerances !== undefined) {
                localVarQueryParameter['intolerances'] = intolerances;
            }

            if (equipment !== undefined) {
                localVarQueryParameter['equipment'] = equipment;
            }

            if (includeIngredients !== undefined) {
                localVarQueryParameter['includeIngredients'] = includeIngredients;
            }

            if (excludeIngredients !== undefined) {
                localVarQueryParameter['excludeIngredients'] = excludeIngredients;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (instructionsRequired !== undefined) {
                localVarQueryParameter['instructionsRequired'] = instructionsRequired;
            }

            if (fillIngredients !== undefined) {
                localVarQueryParameter['fillIngredients'] = fillIngredients;
            }

            if (addRecipeInformation !== undefined) {
                localVarQueryParameter['addRecipeInformation'] = addRecipeInformation;
            }

            if (addRecipeNutrition !== undefined) {
                localVarQueryParameter['addRecipeNutrition'] = addRecipeNutrition;
            }

            if (author !== undefined) {
                localVarQueryParameter['author'] = author;
            }

            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }

            if (recipeBoxId !== undefined) {
                localVarQueryParameter['recipeBoxId'] = recipeBoxId;
            }

            if (titleMatch !== undefined) {
                localVarQueryParameter['titleMatch'] = titleMatch;
            }

            if (maxReadyTime !== undefined) {
                localVarQueryParameter['maxReadyTime'] = maxReadyTime;
            }

            if (ignorePantry !== undefined) {
                localVarQueryParameter['ignorePantry'] = ignorePantry;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (minCarbs !== undefined) {
                localVarQueryParameter['minCarbs'] = minCarbs;
            }

            if (maxCarbs !== undefined) {
                localVarQueryParameter['maxCarbs'] = maxCarbs;
            }

            if (minProtein !== undefined) {
                localVarQueryParameter['minProtein'] = minProtein;
            }

            if (maxProtein !== undefined) {
                localVarQueryParameter['maxProtein'] = maxProtein;
            }

            if (minCalories !== undefined) {
                localVarQueryParameter['minCalories'] = minCalories;
            }

            if (maxCalories !== undefined) {
                localVarQueryParameter['maxCalories'] = maxCalories;
            }

            if (minFat !== undefined) {
                localVarQueryParameter['minFat'] = minFat;
            }

            if (maxFat !== undefined) {
                localVarQueryParameter['maxFat'] = maxFat;
            }

            if (minAlcohol !== undefined) {
                localVarQueryParameter['minAlcohol'] = minAlcohol;
            }

            if (maxAlcohol !== undefined) {
                localVarQueryParameter['maxAlcohol'] = maxAlcohol;
            }

            if (minCaffeine !== undefined) {
                localVarQueryParameter['minCaffeine'] = minCaffeine;
            }

            if (maxCaffeine !== undefined) {
                localVarQueryParameter['maxCaffeine'] = maxCaffeine;
            }

            if (minCopper !== undefined) {
                localVarQueryParameter['minCopper'] = minCopper;
            }

            if (maxCopper !== undefined) {
                localVarQueryParameter['maxCopper'] = maxCopper;
            }

            if (minCalcium !== undefined) {
                localVarQueryParameter['minCalcium'] = minCalcium;
            }

            if (maxCalcium !== undefined) {
                localVarQueryParameter['maxCalcium'] = maxCalcium;
            }

            if (minCholine !== undefined) {
                localVarQueryParameter['minCholine'] = minCholine;
            }

            if (maxCholine !== undefined) {
                localVarQueryParameter['maxCholine'] = maxCholine;
            }

            if (minCholesterol !== undefined) {
                localVarQueryParameter['minCholesterol'] = minCholesterol;
            }

            if (maxCholesterol !== undefined) {
                localVarQueryParameter['maxCholesterol'] = maxCholesterol;
            }

            if (minFluoride !== undefined) {
                localVarQueryParameter['minFluoride'] = minFluoride;
            }

            if (maxFluoride !== undefined) {
                localVarQueryParameter['maxFluoride'] = maxFluoride;
            }

            if (minSaturatedFat !== undefined) {
                localVarQueryParameter['minSaturatedFat'] = minSaturatedFat;
            }

            if (maxSaturatedFat !== undefined) {
                localVarQueryParameter['maxSaturatedFat'] = maxSaturatedFat;
            }

            if (minVitaminA !== undefined) {
                localVarQueryParameter['minVitaminA'] = minVitaminA;
            }

            if (maxVitaminA !== undefined) {
                localVarQueryParameter['maxVitaminA'] = maxVitaminA;
            }

            if (minVitaminC !== undefined) {
                localVarQueryParameter['minVitaminC'] = minVitaminC;
            }

            if (maxVitaminC !== undefined) {
                localVarQueryParameter['maxVitaminC'] = maxVitaminC;
            }

            if (minVitaminD !== undefined) {
                localVarQueryParameter['minVitaminD'] = minVitaminD;
            }

            if (maxVitaminD !== undefined) {
                localVarQueryParameter['maxVitaminD'] = maxVitaminD;
            }

            if (minVitaminE !== undefined) {
                localVarQueryParameter['minVitaminE'] = minVitaminE;
            }

            if (maxVitaminE !== undefined) {
                localVarQueryParameter['maxVitaminE'] = maxVitaminE;
            }

            if (minVitaminK !== undefined) {
                localVarQueryParameter['minVitaminK'] = minVitaminK;
            }

            if (maxVitaminK !== undefined) {
                localVarQueryParameter['maxVitaminK'] = maxVitaminK;
            }

            if (minVitaminB1 !== undefined) {
                localVarQueryParameter['minVitaminB1'] = minVitaminB1;
            }

            if (maxVitaminB1 !== undefined) {
                localVarQueryParameter['maxVitaminB1'] = maxVitaminB1;
            }

            if (minVitaminB2 !== undefined) {
                localVarQueryParameter['minVitaminB2'] = minVitaminB2;
            }

            if (maxVitaminB2 !== undefined) {
                localVarQueryParameter['maxVitaminB2'] = maxVitaminB2;
            }

            if (minVitaminB5 !== undefined) {
                localVarQueryParameter['minVitaminB5'] = minVitaminB5;
            }

            if (maxVitaminB5 !== undefined) {
                localVarQueryParameter['maxVitaminB5'] = maxVitaminB5;
            }

            if (minVitaminB3 !== undefined) {
                localVarQueryParameter['minVitaminB3'] = minVitaminB3;
            }

            if (maxVitaminB3 !== undefined) {
                localVarQueryParameter['maxVitaminB3'] = maxVitaminB3;
            }

            if (minVitaminB6 !== undefined) {
                localVarQueryParameter['minVitaminB6'] = minVitaminB6;
            }

            if (maxVitaminB6 !== undefined) {
                localVarQueryParameter['maxVitaminB6'] = maxVitaminB6;
            }

            if (minVitaminB12 !== undefined) {
                localVarQueryParameter['minVitaminB12'] = minVitaminB12;
            }

            if (maxVitaminB12 !== undefined) {
                localVarQueryParameter['maxVitaminB12'] = maxVitaminB12;
            }

            if (minFiber !== undefined) {
                localVarQueryParameter['minFiber'] = minFiber;
            }

            if (maxFiber !== undefined) {
                localVarQueryParameter['maxFiber'] = maxFiber;
            }

            if (minFolate !== undefined) {
                localVarQueryParameter['minFolate'] = minFolate;
            }

            if (maxFolate !== undefined) {
                localVarQueryParameter['maxFolate'] = maxFolate;
            }

            if (minFolicAcid !== undefined) {
                localVarQueryParameter['minFolicAcid'] = minFolicAcid;
            }

            if (maxFolicAcid !== undefined) {
                localVarQueryParameter['maxFolicAcid'] = maxFolicAcid;
            }

            if (minIodine !== undefined) {
                localVarQueryParameter['minIodine'] = minIodine;
            }

            if (maxIodine !== undefined) {
                localVarQueryParameter['maxIodine'] = maxIodine;
            }

            if (minIron !== undefined) {
                localVarQueryParameter['minIron'] = minIron;
            }

            if (maxIron !== undefined) {
                localVarQueryParameter['maxIron'] = maxIron;
            }

            if (minMagnesium !== undefined) {
                localVarQueryParameter['minMagnesium'] = minMagnesium;
            }

            if (maxMagnesium !== undefined) {
                localVarQueryParameter['maxMagnesium'] = maxMagnesium;
            }

            if (minManganese !== undefined) {
                localVarQueryParameter['minManganese'] = minManganese;
            }

            if (maxManganese !== undefined) {
                localVarQueryParameter['maxManganese'] = maxManganese;
            }

            if (minPhosphorus !== undefined) {
                localVarQueryParameter['minPhosphorus'] = minPhosphorus;
            }

            if (maxPhosphorus !== undefined) {
                localVarQueryParameter['maxPhosphorus'] = maxPhosphorus;
            }

            if (minPotassium !== undefined) {
                localVarQueryParameter['minPotassium'] = minPotassium;
            }

            if (maxPotassium !== undefined) {
                localVarQueryParameter['maxPotassium'] = maxPotassium;
            }

            if (minSelenium !== undefined) {
                localVarQueryParameter['minSelenium'] = minSelenium;
            }

            if (maxSelenium !== undefined) {
                localVarQueryParameter['maxSelenium'] = maxSelenium;
            }

            if (minSodium !== undefined) {
                localVarQueryParameter['minSodium'] = minSodium;
            }

            if (maxSodium !== undefined) {
                localVarQueryParameter['maxSodium'] = maxSodium;
            }

            if (minSugar !== undefined) {
                localVarQueryParameter['minSugar'] = minSugar;
            }

            if (maxSugar !== undefined) {
                localVarQueryParameter['maxSugar'] = maxSugar;
            }

            if (minZinc !== undefined) {
                localVarQueryParameter['minZinc'] = minZinc;
            }

            if (maxZinc !== undefined) {
                localVarQueryParameter['maxZinc'] = maxZinc;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (number !== undefined) {
                localVarQueryParameter['number'] = number;
            }

            if (limitLicense !== undefined) {
                localVarQueryParameter['limitLicense'] = limitLicense;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *              Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don\'t currently have (post shopping).         
         * @summary Search Recipes by Ingredients
         * @param {string} ingredients A comma-separated list of ingredients that the recipes should contain.
         * @param {number} [number] The maximum number of recipes to return (between 1 and 100). Defaults to 10.
         * @param {boolean} [limitLicense] Whether the recipes should have an open license that allows display with proper attribution.
         * @param {number} [ranking] Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
         * @param {boolean} [ignorePantry] Whether to ignore typical pantry items, such as water, salt, flour, etc.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRecipesByIngredients: async (ingredients: string, number?: number, limitLicense?: boolean, ranking?: number, ignorePantry?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ingredients' is not null or undefined
            assertParamExists('searchRecipesByIngredients', 'ingredients', ingredients)
            const localVarPath = `/recipes/findByIngredients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (ingredients !== undefined) {
                localVarQueryParameter['ingredients'] = ingredients;
            }

            if (number !== undefined) {
                localVarQueryParameter['number'] = number;
            }

            if (limitLicense !== undefined) {
                localVarQueryParameter['limitLicense'] = limitLicense;
            }

            if (ranking !== undefined) {
                localVarQueryParameter['ranking'] = ranking;
            }

            if (ignorePantry !== undefined) {
                localVarQueryParameter['ignorePantry'] = ignorePantry;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
         * @summary Search Recipes by Nutrients
         * @param {number} [minCarbs] The minimum amount of carbohydrates in grams the recipe must have.
         * @param {number} [maxCarbs] The maximum amount of carbohydrates in grams the recipe can have.
         * @param {number} [minProtein] The minimum amount of protein in grams the recipe must have.
         * @param {number} [maxProtein] The maximum amount of protein in grams the recipe can have.
         * @param {number} [minCalories] The minimum amount of calories the recipe must have.
         * @param {number} [maxCalories] The maximum amount of calories the recipe can have.
         * @param {number} [minFat] The minimum amount of fat in grams the recipe must have.
         * @param {number} [maxFat] The maximum amount of fat in grams the recipe can have.
         * @param {number} [minAlcohol] The minimum amount of alcohol in grams the recipe must have.
         * @param {number} [maxAlcohol] The maximum amount of alcohol in grams the recipe can have.
         * @param {number} [minCaffeine] The minimum amount of caffeine in milligrams the recipe must have.
         * @param {number} [maxCaffeine] The maximum amount of caffeine in milligrams the recipe can have.
         * @param {number} [minCopper] The minimum amount of copper in milligrams the recipe must have.
         * @param {number} [maxCopper] The maximum amount of copper in milligrams the recipe can have.
         * @param {number} [minCalcium] The minimum amount of calcium in milligrams the recipe must have.
         * @param {number} [maxCalcium] The maximum amount of calcium in milligrams the recipe can have.
         * @param {number} [minCholine] The minimum amount of choline in milligrams the recipe must have.
         * @param {number} [maxCholine] The maximum amount of choline in milligrams the recipe can have.
         * @param {number} [minCholesterol] The minimum amount of cholesterol in milligrams the recipe must have.
         * @param {number} [maxCholesterol] The maximum amount of cholesterol in milligrams the recipe can have.
         * @param {number} [minFluoride] The minimum amount of fluoride in milligrams the recipe must have.
         * @param {number} [maxFluoride] The maximum amount of fluoride in milligrams the recipe can have.
         * @param {number} [minSaturatedFat] The minimum amount of saturated fat in grams the recipe must have.
         * @param {number} [maxSaturatedFat] The maximum amount of saturated fat in grams the recipe can have.
         * @param {number} [minVitaminA] The minimum amount of Vitamin A in IU the recipe must have.
         * @param {number} [maxVitaminA] The maximum amount of Vitamin A in IU the recipe can have.
         * @param {number} [minVitaminC] The minimum amount of Vitamin C in milligrams the recipe must have.
         * @param {number} [maxVitaminC] The maximum amount of Vitamin C in milligrams the recipe can have.
         * @param {number} [minVitaminD] The minimum amount of Vitamin D in micrograms the recipe must have.
         * @param {number} [maxVitaminD] The maximum amount of Vitamin D in micrograms the recipe can have.
         * @param {number} [minVitaminE] The minimum amount of Vitamin E in milligrams the recipe must have.
         * @param {number} [maxVitaminE] The maximum amount of Vitamin E in milligrams the recipe can have.
         * @param {number} [minVitaminK] The minimum amount of Vitamin K in micrograms the recipe must have.
         * @param {number} [maxVitaminK] The maximum amount of Vitamin K in micrograms the recipe can have.
         * @param {number} [minVitaminB1] The minimum amount of Vitamin B1 in milligrams the recipe must have.
         * @param {number} [maxVitaminB1] The maximum amount of Vitamin B1 in milligrams the recipe can have.
         * @param {number} [minVitaminB2] The minimum amount of Vitamin B2 in milligrams the recipe must have.
         * @param {number} [maxVitaminB2] The maximum amount of Vitamin B2 in milligrams the recipe can have.
         * @param {number} [minVitaminB5] The minimum amount of Vitamin B5 in milligrams the recipe must have.
         * @param {number} [maxVitaminB5] The maximum amount of Vitamin B5 in milligrams the recipe can have.
         * @param {number} [minVitaminB3] The minimum amount of Vitamin B3 in milligrams the recipe must have.
         * @param {number} [maxVitaminB3] The maximum amount of Vitamin B3 in milligrams the recipe can have.
         * @param {number} [minVitaminB6] The minimum amount of Vitamin B6 in milligrams the recipe must have.
         * @param {number} [maxVitaminB6] The maximum amount of Vitamin B6 in milligrams the recipe can have.
         * @param {number} [minVitaminB12] The minimum amount of Vitamin B12 in micrograms the recipe must have.
         * @param {number} [maxVitaminB12] The maximum amount of Vitamin B12 in micrograms the recipe can have.
         * @param {number} [minFiber] The minimum amount of fiber in grams the recipe must have.
         * @param {number} [maxFiber] The maximum amount of fiber in grams the recipe can have.
         * @param {number} [minFolate] The minimum amount of folate in micrograms the recipe must have.
         * @param {number} [maxFolate] The maximum amount of folate in micrograms the recipe can have.
         * @param {number} [minFolicAcid] The minimum amount of folic acid in micrograms the recipe must have.
         * @param {number} [maxFolicAcid] The maximum amount of folic acid in micrograms the recipe can have.
         * @param {number} [minIodine] The minimum amount of iodine in micrograms the recipe must have.
         * @param {number} [maxIodine] The maximum amount of iodine in micrograms the recipe can have.
         * @param {number} [minIron] The minimum amount of iron in milligrams the recipe must have.
         * @param {number} [maxIron] The maximum amount of iron in milligrams the recipe can have.
         * @param {number} [minMagnesium] The minimum amount of magnesium in milligrams the recipe must have.
         * @param {number} [maxMagnesium] The maximum amount of magnesium in milligrams the recipe can have.
         * @param {number} [minManganese] The minimum amount of manganese in milligrams the recipe must have.
         * @param {number} [maxManganese] The maximum amount of manganese in milligrams the recipe can have.
         * @param {number} [minPhosphorus] The minimum amount of phosphorus in milligrams the recipe must have.
         * @param {number} [maxPhosphorus] The maximum amount of phosphorus in milligrams the recipe can have.
         * @param {number} [minPotassium] The minimum amount of potassium in milligrams the recipe must have.
         * @param {number} [maxPotassium] The maximum amount of potassium in milligrams the recipe can have.
         * @param {number} [minSelenium] The minimum amount of selenium in micrograms the recipe must have.
         * @param {number} [maxSelenium] The maximum amount of selenium in micrograms the recipe can have.
         * @param {number} [minSodium] The minimum amount of sodium in milligrams the recipe must have.
         * @param {number} [maxSodium] The maximum amount of sodium in milligrams the recipe can have.
         * @param {number} [minSugar] The minimum amount of sugar in grams the recipe must have.
         * @param {number} [maxSugar] The maximum amount of sugar in grams the recipe can have.
         * @param {number} [minZinc] The minimum amount of zinc in milligrams the recipe must have.
         * @param {number} [maxZinc] The maximum amount of zinc in milligrams the recipe can have.
         * @param {number} [offset] The number of results to skip (between 0 and 900).
         * @param {number} [number] The number of expected results (between 1 and 100).
         * @param {boolean} [random] If true, every request will give you a random set of recipes within the requested limits.
         * @param {boolean} [limitLicense] Whether the recipes should have an open license that allows display with proper attribution.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRecipesByNutrients: async (minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minCalories?: number, maxCalories?: number, minFat?: number, maxFat?: number, minAlcohol?: number, maxAlcohol?: number, minCaffeine?: number, maxCaffeine?: number, minCopper?: number, maxCopper?: number, minCalcium?: number, maxCalcium?: number, minCholine?: number, maxCholine?: number, minCholesterol?: number, maxCholesterol?: number, minFluoride?: number, maxFluoride?: number, minSaturatedFat?: number, maxSaturatedFat?: number, minVitaminA?: number, maxVitaminA?: number, minVitaminC?: number, maxVitaminC?: number, minVitaminD?: number, maxVitaminD?: number, minVitaminE?: number, maxVitaminE?: number, minVitaminK?: number, maxVitaminK?: number, minVitaminB1?: number, maxVitaminB1?: number, minVitaminB2?: number, maxVitaminB2?: number, minVitaminB5?: number, maxVitaminB5?: number, minVitaminB3?: number, maxVitaminB3?: number, minVitaminB6?: number, maxVitaminB6?: number, minVitaminB12?: number, maxVitaminB12?: number, minFiber?: number, maxFiber?: number, minFolate?: number, maxFolate?: number, minFolicAcid?: number, maxFolicAcid?: number, minIodine?: number, maxIodine?: number, minIron?: number, maxIron?: number, minMagnesium?: number, maxMagnesium?: number, minManganese?: number, maxManganese?: number, minPhosphorus?: number, maxPhosphorus?: number, minPotassium?: number, maxPotassium?: number, minSelenium?: number, maxSelenium?: number, minSodium?: number, maxSodium?: number, minSugar?: number, maxSugar?: number, minZinc?: number, maxZinc?: number, offset?: number, number?: number, random?: boolean, limitLicense?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/recipes/findByNutrients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (minCarbs !== undefined) {
                localVarQueryParameter['minCarbs'] = minCarbs;
            }

            if (maxCarbs !== undefined) {
                localVarQueryParameter['maxCarbs'] = maxCarbs;
            }

            if (minProtein !== undefined) {
                localVarQueryParameter['minProtein'] = minProtein;
            }

            if (maxProtein !== undefined) {
                localVarQueryParameter['maxProtein'] = maxProtein;
            }

            if (minCalories !== undefined) {
                localVarQueryParameter['minCalories'] = minCalories;
            }

            if (maxCalories !== undefined) {
                localVarQueryParameter['maxCalories'] = maxCalories;
            }

            if (minFat !== undefined) {
                localVarQueryParameter['minFat'] = minFat;
            }

            if (maxFat !== undefined) {
                localVarQueryParameter['maxFat'] = maxFat;
            }

            if (minAlcohol !== undefined) {
                localVarQueryParameter['minAlcohol'] = minAlcohol;
            }

            if (maxAlcohol !== undefined) {
                localVarQueryParameter['maxAlcohol'] = maxAlcohol;
            }

            if (minCaffeine !== undefined) {
                localVarQueryParameter['minCaffeine'] = minCaffeine;
            }

            if (maxCaffeine !== undefined) {
                localVarQueryParameter['maxCaffeine'] = maxCaffeine;
            }

            if (minCopper !== undefined) {
                localVarQueryParameter['minCopper'] = minCopper;
            }

            if (maxCopper !== undefined) {
                localVarQueryParameter['maxCopper'] = maxCopper;
            }

            if (minCalcium !== undefined) {
                localVarQueryParameter['minCalcium'] = minCalcium;
            }

            if (maxCalcium !== undefined) {
                localVarQueryParameter['maxCalcium'] = maxCalcium;
            }

            if (minCholine !== undefined) {
                localVarQueryParameter['minCholine'] = minCholine;
            }

            if (maxCholine !== undefined) {
                localVarQueryParameter['maxCholine'] = maxCholine;
            }

            if (minCholesterol !== undefined) {
                localVarQueryParameter['minCholesterol'] = minCholesterol;
            }

            if (maxCholesterol !== undefined) {
                localVarQueryParameter['maxCholesterol'] = maxCholesterol;
            }

            if (minFluoride !== undefined) {
                localVarQueryParameter['minFluoride'] = minFluoride;
            }

            if (maxFluoride !== undefined) {
                localVarQueryParameter['maxFluoride'] = maxFluoride;
            }

            if (minSaturatedFat !== undefined) {
                localVarQueryParameter['minSaturatedFat'] = minSaturatedFat;
            }

            if (maxSaturatedFat !== undefined) {
                localVarQueryParameter['maxSaturatedFat'] = maxSaturatedFat;
            }

            if (minVitaminA !== undefined) {
                localVarQueryParameter['minVitaminA'] = minVitaminA;
            }

            if (maxVitaminA !== undefined) {
                localVarQueryParameter['maxVitaminA'] = maxVitaminA;
            }

            if (minVitaminC !== undefined) {
                localVarQueryParameter['minVitaminC'] = minVitaminC;
            }

            if (maxVitaminC !== undefined) {
                localVarQueryParameter['maxVitaminC'] = maxVitaminC;
            }

            if (minVitaminD !== undefined) {
                localVarQueryParameter['minVitaminD'] = minVitaminD;
            }

            if (maxVitaminD !== undefined) {
                localVarQueryParameter['maxVitaminD'] = maxVitaminD;
            }

            if (minVitaminE !== undefined) {
                localVarQueryParameter['minVitaminE'] = minVitaminE;
            }

            if (maxVitaminE !== undefined) {
                localVarQueryParameter['maxVitaminE'] = maxVitaminE;
            }

            if (minVitaminK !== undefined) {
                localVarQueryParameter['minVitaminK'] = minVitaminK;
            }

            if (maxVitaminK !== undefined) {
                localVarQueryParameter['maxVitaminK'] = maxVitaminK;
            }

            if (minVitaminB1 !== undefined) {
                localVarQueryParameter['minVitaminB1'] = minVitaminB1;
            }

            if (maxVitaminB1 !== undefined) {
                localVarQueryParameter['maxVitaminB1'] = maxVitaminB1;
            }

            if (minVitaminB2 !== undefined) {
                localVarQueryParameter['minVitaminB2'] = minVitaminB2;
            }

            if (maxVitaminB2 !== undefined) {
                localVarQueryParameter['maxVitaminB2'] = maxVitaminB2;
            }

            if (minVitaminB5 !== undefined) {
                localVarQueryParameter['minVitaminB5'] = minVitaminB5;
            }

            if (maxVitaminB5 !== undefined) {
                localVarQueryParameter['maxVitaminB5'] = maxVitaminB5;
            }

            if (minVitaminB3 !== undefined) {
                localVarQueryParameter['minVitaminB3'] = minVitaminB3;
            }

            if (maxVitaminB3 !== undefined) {
                localVarQueryParameter['maxVitaminB3'] = maxVitaminB3;
            }

            if (minVitaminB6 !== undefined) {
                localVarQueryParameter['minVitaminB6'] = minVitaminB6;
            }

            if (maxVitaminB6 !== undefined) {
                localVarQueryParameter['maxVitaminB6'] = maxVitaminB6;
            }

            if (minVitaminB12 !== undefined) {
                localVarQueryParameter['minVitaminB12'] = minVitaminB12;
            }

            if (maxVitaminB12 !== undefined) {
                localVarQueryParameter['maxVitaminB12'] = maxVitaminB12;
            }

            if (minFiber !== undefined) {
                localVarQueryParameter['minFiber'] = minFiber;
            }

            if (maxFiber !== undefined) {
                localVarQueryParameter['maxFiber'] = maxFiber;
            }

            if (minFolate !== undefined) {
                localVarQueryParameter['minFolate'] = minFolate;
            }

            if (maxFolate !== undefined) {
                localVarQueryParameter['maxFolate'] = maxFolate;
            }

            if (minFolicAcid !== undefined) {
                localVarQueryParameter['minFolicAcid'] = minFolicAcid;
            }

            if (maxFolicAcid !== undefined) {
                localVarQueryParameter['maxFolicAcid'] = maxFolicAcid;
            }

            if (minIodine !== undefined) {
                localVarQueryParameter['minIodine'] = minIodine;
            }

            if (maxIodine !== undefined) {
                localVarQueryParameter['maxIodine'] = maxIodine;
            }

            if (minIron !== undefined) {
                localVarQueryParameter['minIron'] = minIron;
            }

            if (maxIron !== undefined) {
                localVarQueryParameter['maxIron'] = maxIron;
            }

            if (minMagnesium !== undefined) {
                localVarQueryParameter['minMagnesium'] = minMagnesium;
            }

            if (maxMagnesium !== undefined) {
                localVarQueryParameter['maxMagnesium'] = maxMagnesium;
            }

            if (minManganese !== undefined) {
                localVarQueryParameter['minManganese'] = minManganese;
            }

            if (maxManganese !== undefined) {
                localVarQueryParameter['maxManganese'] = maxManganese;
            }

            if (minPhosphorus !== undefined) {
                localVarQueryParameter['minPhosphorus'] = minPhosphorus;
            }

            if (maxPhosphorus !== undefined) {
                localVarQueryParameter['maxPhosphorus'] = maxPhosphorus;
            }

            if (minPotassium !== undefined) {
                localVarQueryParameter['minPotassium'] = minPotassium;
            }

            if (maxPotassium !== undefined) {
                localVarQueryParameter['maxPotassium'] = maxPotassium;
            }

            if (minSelenium !== undefined) {
                localVarQueryParameter['minSelenium'] = minSelenium;
            }

            if (maxSelenium !== undefined) {
                localVarQueryParameter['maxSelenium'] = maxSelenium;
            }

            if (minSodium !== undefined) {
                localVarQueryParameter['minSodium'] = minSodium;
            }

            if (maxSodium !== undefined) {
                localVarQueryParameter['maxSodium'] = maxSodium;
            }

            if (minSugar !== undefined) {
                localVarQueryParameter['minSugar'] = minSugar;
            }

            if (maxSugar !== undefined) {
                localVarQueryParameter['maxSugar'] = maxSugar;
            }

            if (minZinc !== undefined) {
                localVarQueryParameter['minZinc'] = minZinc;
            }

            if (maxZinc !== undefined) {
                localVarQueryParameter['maxZinc'] = maxZinc;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (number !== undefined) {
                localVarQueryParameter['number'] = number;
            }

            if (random !== undefined) {
                localVarQueryParameter['random'] = random;
            }

            if (limitLicense !== undefined) {
                localVarQueryParameter['limitLicense'] = limitLicense;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search spoonacular\'s site content. You\'ll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.
         * @summary Search Site Content
         * @param {string} query The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSiteContent: async (query: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('searchSiteContent', 'query', query)
            const localVarPath = `/food/site/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Automatically generate a short description that summarizes key information about the recipe.
         * @summary Summarize Recipe
         * @param {number} id The recipe id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        summarizeRecipe: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('summarizeRecipe', 'id', id)
            const localVarPath = `/recipes/{id}/summary`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \"Get Conversation Suggests\" endpoint to show your user what he or she can say.
         * @summary Talk to Chatbot
         * @param {string} text The request / question / answer from the user to the chatbot.
         * @param {string} [contextId] An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        talkToChatbot: async (text: string, contextId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'text' is not null or undefined
            assertParamExists('talkToChatbot', 'text', text)
            const localVarPath = `/food/converse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }

            if (contextId !== undefined) {
                localVarQueryParameter['contextId'] = contextId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Visualize the equipment used to make a recipe. You can play around with that endpoint!
         * @summary Visualize Equipment
         * @param {string} instructions The recipe\\\&#39;s instructions.
         * @param {string} [view] How to visualize the equipment, either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot;.
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {boolean} [showBacklink] Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizeEquipment: async (instructions: string, view?: string, defaultCss?: boolean, showBacklink?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'instructions' is not null or undefined
            assertParamExists('visualizeEquipment', 'instructions', instructions)
            const localVarPath = `/recipes/visualizeEquipment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)


            if (instructions !== undefined) { 
                localVarFormParams.set('instructions', instructions as any);
            }
    
            if (view !== undefined) { 
                localVarFormParams.set('view', view as any);
            }
    
            if (defaultCss !== undefined) { 
                localVarFormParams.set('defaultCss', defaultCss as any);
            }
    
            if (showBacklink !== undefined) { 
                localVarFormParams.set('showBacklink', showBacklink as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Visualize ingredients of a recipe. You can play around with that endpoint!
         * @summary Visualize Ingredients
         * @param {string} ingredientList The ingredient list of the recipe, one ingredient per line.
         * @param {number} servings The number of servings.
         * @param {string} [measure] The original system of measurement, either \\\&quot;metric\\\&quot; or \\\&quot;us\\\&quot;.
         * @param {string} [view] How to visualize the ingredients, either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot;.
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {boolean} [showBacklink] Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizeIngredients: async (ingredientList: string, servings: number, measure?: string, view?: string, defaultCss?: boolean, showBacklink?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ingredientList' is not null or undefined
            assertParamExists('visualizeIngredients', 'ingredientList', ingredientList)
            // verify required parameter 'servings' is not null or undefined
            assertParamExists('visualizeIngredients', 'servings', servings)
            const localVarPath = `/recipes/visualizeIngredients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)


            if (ingredientList !== undefined) { 
                localVarFormParams.set('ingredientList', ingredientList as any);
            }
    
            if (servings !== undefined) { 
                localVarFormParams.set('servings', servings as any);
            }
    
            if (measure !== undefined) { 
                localVarFormParams.set('measure', measure as any);
            }
    
            if (view !== undefined) { 
                localVarFormParams.set('view', view as any);
            }
    
            if (defaultCss !== undefined) { 
                localVarFormParams.set('defaultCss', defaultCss as any);
            }
    
            if (showBacklink !== undefined) { 
                localVarFormParams.set('showBacklink', showBacklink as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Visualize a menu item\'s nutritional information as HTML including CSS.
         * @summary Visualize Menu Item Nutrition by ID
         * @param {number} id The menu item id.
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizeMenuItemNutritionByID: async (id: number, defaultCss?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('visualizeMenuItemNutritionByID', 'id', id)
            const localVarPath = `/food/menuItems/{id}/nutritionWidget`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (defaultCss !== undefined) {
                localVarQueryParameter['defaultCss'] = defaultCss;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Visualize the price breakdown of a recipe. You can play around with that endpoint!
         * @summary Visualize Price Breakdown
         * @param {string} ingredientList The ingredient list of the recipe, one ingredient per line.
         * @param {number} servings The number of servings.
         * @param {number} [mode] The mode in which the widget should be delivered. 1 &#x3D; separate views (compact), 2 &#x3D; all in one view (full).
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {boolean} [showBacklink] Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizePriceBreakdown: async (ingredientList: string, servings: number, mode?: number, defaultCss?: boolean, showBacklink?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ingredientList' is not null or undefined
            assertParamExists('visualizePriceBreakdown', 'ingredientList', ingredientList)
            // verify required parameter 'servings' is not null or undefined
            assertParamExists('visualizePriceBreakdown', 'servings', servings)
            const localVarPath = `/recipes/visualizePriceEstimator`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)


            if (ingredientList !== undefined) { 
                localVarFormParams.set('ingredientList', ingredientList as any);
            }
    
            if (servings !== undefined) { 
                localVarFormParams.set('servings', servings as any);
            }
    
            if (mode !== undefined) { 
                localVarFormParams.set('mode', mode as any);
            }
    
            if (defaultCss !== undefined) { 
                localVarFormParams.set('defaultCss', defaultCss as any);
            }
    
            if (showBacklink !== undefined) { 
                localVarFormParams.set('showBacklink', showBacklink as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Visualize a product\'s nutritional information as HTML including CSS.
         * @summary Visualize Product Nutrition by ID
         * @param {number} id The id of the product.
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizeProductNutritionByID: async (id: number, defaultCss?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('visualizeProductNutritionByID', 'id', id)
            const localVarPath = `/food/products/{id}/nutritionWidget`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (defaultCss !== undefined) {
                localVarQueryParameter['defaultCss'] = defaultCss;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Visualize a recipe\'s equipment list.
         * @summary Visualize Recipe Equipment by ID
         * @param {number} id The recipe id.
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizeRecipeEquipmentByID: async (id: number, defaultCss?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('visualizeRecipeEquipmentByID', 'id', id)
            const localVarPath = `/recipes/{id}/equipmentWidget`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (defaultCss !== undefined) {
                localVarQueryParameter['defaultCss'] = defaultCss;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Visualize a recipe\'s ingredient list.
         * @summary Visualize Recipe Ingredients by ID
         * @param {number} id The recipe id.
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizeRecipeIngredientsByID: async (id: number, defaultCss?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('visualizeRecipeIngredientsByID', 'id', id)
            const localVarPath = `/recipes/{id}/ingredientWidget`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (defaultCss !== undefined) {
                localVarQueryParameter['defaultCss'] = defaultCss;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Visualize a recipe\'s nutritional information as HTML including CSS. You can play around with that endpoint!
         * @summary Visualize Recipe Nutrition
         * @param {string} ingredientList The ingredient list of the recipe, one ingredient per line.
         * @param {number} servings The number of servings.
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {boolean} [showBacklink] Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizeRecipeNutrition: async (ingredientList: string, servings: number, defaultCss?: boolean, showBacklink?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ingredientList' is not null or undefined
            assertParamExists('visualizeRecipeNutrition', 'ingredientList', ingredientList)
            // verify required parameter 'servings' is not null or undefined
            assertParamExists('visualizeRecipeNutrition', 'servings', servings)
            const localVarPath = `/recipes/visualizeNutrition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)


            if (ingredientList !== undefined) { 
                localVarFormParams.set('ingredientList', ingredientList as any);
            }
    
            if (servings !== undefined) { 
                localVarFormParams.set('servings', servings as any);
            }
    
            if (defaultCss !== undefined) { 
                localVarFormParams.set('defaultCss', defaultCss as any);
            }
    
            if (showBacklink !== undefined) { 
                localVarFormParams.set('showBacklink', showBacklink as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Visualize a recipe\'s nutritional information as HTML including CSS.
         * @summary Visualize Recipe Nutrition by ID
         * @param {number} id The recipe id.
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizeRecipeNutritionByID: async (id: number, defaultCss?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('visualizeRecipeNutritionByID', 'id', id)
            const localVarPath = `/recipes/{id}/nutritionWidget`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (defaultCss !== undefined) {
                localVarQueryParameter['defaultCss'] = defaultCss;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Visualize a recipe\'s price breakdown.
         * @summary Visualize Recipe Price Breakdown by ID
         * @param {number} id The recipe id.
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizeRecipePriceBreakdownByID: async (id: number, defaultCss?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('visualizeRecipePriceBreakdownByID', 'id', id)
            const localVarPath = `/recipes/{id}/priceBreakdownWidget`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)

            if (defaultCss !== undefined) {
                localVarQueryParameter['defaultCss'] = defaultCss;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Visualize a recipe\'s taste information as HTML including CSS. You can play around with that endpoint!
         * @summary Visualize Recipe Taste
         * @param {string} ingredientList The ingredient list of the recipe, one ingredient per line.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizeRecipeTaste: async (ingredientList: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ingredientList' is not null or undefined
            assertParamExists('visualizeRecipeTaste', 'ingredientList', ingredientList)
            const localVarPath = `/recipes/visualizeTaste`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)


            if (ingredientList !== undefined) { 
                localVarFormParams.set('ingredientList', ingredientList as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a recipe\'s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
         * @summary Visualize Recipe Taste by ID
         * @param {number} id The recipe id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizeRecipeTasteByID: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('visualizeRecipeTasteByID', 'id', id)
            const localVarPath = `/recipes/{id}/tasteWidget`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyScheme required
            await setApiKeyToObject(localVarQueryParameter, "apiKey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Add an item to the user\'s meal plan.
         * @summary Add to Meal Plan
         * @param {string} username The username.
         * @param {string} hash The private hash for the username.
         * @param {InlineObject11} inlineObject11 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addToMealPlan(username: string, hash: string, inlineObject11: InlineObject11, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addToMealPlan(username, hash, inlineObject11, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add an item to the current shopping list of a user.
         * @summary Add to Shopping List
         * @param {string} username The username.
         * @param {string} hash The private hash for the username.
         * @param {InlineObject14} inlineObject14 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addToShoppingList(username: string, hash: string, inlineObject14: InlineObject14, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addToShoppingList(username, hash, inlineObject14, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Parse a recipe search query to find out its intention.
         * @summary Analyze a Recipe Search Query
         * @param {string} q The recipe search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyzeARecipeSearchQuery(q: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyzeARecipeSearchQuery(q, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe\'s instructions will be extracted independently of the step they\'re used in.
         * @summary Analyze Recipe Instructions
         * @param {string} instructions The instructions to be analyzed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyzeRecipeInstructions(instructions: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyzeRecipeInstructions(instructions, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Autocomplete the entry of an ingredient.
         * @summary Autocomplete Ingredient Search
         * @param {string} query The partial or full ingredient name.
         * @param {number} [number] The number of results to return (between 1 and 100).
         * @param {boolean} [metaInformation] Whether to return more meta information about the ingredients.
         * @param {string} [intolerances] A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async autocompleteIngredientSearch(query: string, number?: number, metaInformation?: boolean, intolerances?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.autocompleteIngredientSearch(query, number, metaInformation, intolerances, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
         * @summary Autocomplete Menu Item Search
         * @param {string} query The (partial) search query.
         * @param {number} [number] The number of results to return (between 1 and 25).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async autocompleteMenuItemSearch(query: string, number?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.autocompleteMenuItemSearch(query, number, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
         * @summary Autocomplete Product Search
         * @param {string} query The (partial) search query.
         * @param {number} [number] The number of results to return (between 1 and 25).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async autocompleteProductSearch(query: string, number?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.autocompleteProductSearch(query, number, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Autocomplete a partial input to suggest possible recipe names.
         * @summary Autocomplete Recipe Search
         * @param {string} query The query to be autocompleted.
         * @param {number} [number] The number of results to return (between 1 and 25).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async autocompleteRecipeSearch(query: string, number?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.autocompleteRecipeSearch(query, number, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Classify the recipe\'s cuisine.
         * @summary Classify Cuisine
         * @param {string} title The title of the recipe.
         * @param {string} ingredientList The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async classifyCuisine(title: string, ingredientList: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.classifyCuisine(title, ingredientList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
         * @summary Classify Grocery Product
         * @param {InlineObject9} inlineObject9 
         * @param {string} [locale] The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async classifyGroceryProduct(inlineObject9: InlineObject9, locale?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.classifyGroceryProduct(inlineObject9, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Provide a set of product jsons, get back classified products.
         * @summary Classify Grocery Product Bulk
         * @param {Array<any>} requestBody 
         * @param {string} [locale] The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async classifyGroceryProductBulk(requestBody: Array<any>, locale?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.classifyGroceryProductBulk(requestBody, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete all planned items from the user\'s meal plan for a specific day.
         * @summary Clear Meal Plan Day
         * @param {string} username The username.
         * @param {string} date The date in the format yyyy-mm-dd.
         * @param {string} hash The private hash for the username.
         * @param {InlineObject10} inlineObject10 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clearMealPlanDay(username: string, date: string, hash: string, inlineObject10: InlineObject10, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clearMealPlanDay(username, date, hash, inlineObject10, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
         * @summary Compute Glycemic Load
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async computeGlycemicLoad(body: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.computeGlycemicLoad(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * In order to call user-specific endpoints, you need to connect your app\'s users to spoonacular users.
         * @summary Connect User
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async connectUser(body: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.connectUser(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Convert amounts like \"2 cups of flour to grams\".
         * @summary Convert Amounts
         * @param {string} ingredientName The ingredient which you want to convert.
         * @param {number} sourceAmount The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.
         * @param {string} sourceUnit The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
         * @param {string} targetUnit The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async convertAmounts(ingredientName: string, sourceAmount: number, sourceUnit: string, targetUnit: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.convertAmounts(ingredientName, sourceAmount, sourceUnit, targetUnit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generate a recipe card for a recipe.
         * @summary Create Recipe Card
         * @param {string} title The title of the recipe.
         * @param {any} image The binary image of the recipe as jpg.
         * @param {string} ingredients The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
         * @param {string} instructions The instructions to make the recipe. One step per line (separate lines with \\\\n).
         * @param {number} readyInMinutes The number of minutes it takes to get the recipe on the table.
         * @param {number} servings The number of servings the recipe makes.
         * @param {string} mask The mask to put over the recipe image (\\\&quot;ellipseMask\\\&quot;, \\\&quot;diamondMask\\\&quot;, \\\&quot;starMask\\\&quot;, \\\&quot;heartMask\\\&quot;, \\\&quot;potMask\\\&quot;, \\\&quot;fishMask\\\&quot;).
         * @param {string} backgroundImage The background image (\\\&quot;none\\\&quot;,\\\&quot;background1\\\&quot;, or \\\&quot;background2\\\&quot;).
         * @param {string} [author] The author of the recipe.
         * @param {string} [backgroundColor] The background color for the recipe card as a hex-string.
         * @param {string} [fontColor] The font color for the recipe card as a hex-string.
         * @param {string} [source] The source of the recipe.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRecipeCard(title: string, image: any, ingredients: string, instructions: string, readyInMinutes: number, servings: number, mask: string, backgroundImage: string, author?: string, backgroundColor?: string, fontColor?: string, source?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRecipeCard(title, image, ingredients, instructions, readyInMinutes, servings, mask, backgroundImage, author, backgroundColor, fontColor, source, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an item from the user\'s meal plan.
         * @summary Delete from Meal Plan
         * @param {string} username The username.
         * @param {number} id The shopping list item id.
         * @param {string} hash The private hash for the username.
         * @param {InlineObject12} inlineObject12 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFromMealPlan(username: string, id: number, hash: string, inlineObject12: InlineObject12, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFromMealPlan(username, id, hash, inlineObject12, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an item from the current shopping list of the user.
         * @summary Delete from Shopping List
         * @param {string} username The username.
         * @param {number} id The shopping list item id.
         * @param {string} hash The private hash for the username.
         * @param {InlineObject15} inlineObject15 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFromShoppingList(username: string, id: number, hash: string, inlineObject15: InlineObject15, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFromShoppingList(username, id, hash, inlineObject15, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.
         * @summary Detect Food in Text
         * @param {string} text The text in which food items, such as dish names and ingredients, should be detected in.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async detectFoodInText(text: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.detectFoodInText(text, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
         * @summary Extract Recipe from Website
         * @param {string} url The URL of the recipe page.
         * @param {boolean} [forceExtraction] If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.
         * @param {boolean} [analyze] If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extractRecipeFromWebsite(url: string, forceExtraction?: boolean, analyze?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extractRecipeFromWebsite(url, forceExtraction, analyze, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
         * @summary Generate Meal Plan
         * @param {string} [timeFrame] Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;.
         * @param {number} [targetCalories] What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.
         * @param {string} [diet] Enter a diet that the meal plan has to adhere to. See a full list of supported diets.
         * @param {string} [exclude] A comma-separated list of allergens or ingredients that must be excluded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateMealPlan(timeFrame?: string, targetCalories?: number, diet?: string, exclude?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateMealPlan(timeFrame, targetCalories, diet, exclude, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generate the shopping list for a user from the meal planner in a given time frame.
         * @summary Generate Shopping List
         * @param {string} username The username.
         * @param {string} startDate The start date in the format yyyy-mm-dd.
         * @param {string} endDate The end date in the format yyyy-mm-dd.
         * @param {string} hash The private hash for the username.
         * @param {InlineObject13} inlineObject13 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateShoppingList(username: string, startDate: string, endDate: string, hash: string, inlineObject13: InlineObject13, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateShoppingList(username, startDate, endDate, hash, inlineObject13, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a random joke that is related to food. Caution: this is an endpoint for adults!
         * @summary Get a Random Food Joke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getARandomFoodJoke(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getARandomFoodJoke(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an analyzed breakdown of a recipe\'s instructions. Each step is enriched with the ingredients and equipment required.
         * @summary Get Analyzed Recipe Instructions
         * @param {number} id The recipe id.
         * @param {boolean} [stepBreakdown] Whether to break down the recipe steps even more.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnalyzedRecipeInstructions(id: number, stepBreakdown?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnalyzedRecipeInstructions(id, stepBreakdown, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Find comparable products to the given one.
         * @summary Get Comparable Products
         * @param {number} upc The UPC of the product for which you want to find comparable products.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getComparableProducts(upc: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getComparableProducts(upc, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns suggestions for things the user can say or ask the chatbot.
         * @summary Get Conversation Suggests
         * @param {string} query A (partial) query from the user. The endpoint will return if it matches topics it can talk about.
         * @param {number} [number] The number of suggestions to return (between 1 and 25).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConversationSuggests(query: string, number?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConversationSuggests(query, number, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Find a dish that goes well with a given wine.
         * @summary Get Dish Pairing for Wine
         * @param {string} wine The type of wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDishPairingForWine(wine: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDishPairingForWine(wine, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
         * @summary Get Ingredient Information
         * @param {number} id The ingredient id.
         * @param {number} [amount] The amount of this ingredient.
         * @param {string} [unit] The unit for the given amount.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIngredientInformation(id: number, amount?: number, unit?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIngredientInformation(id, amount, unit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search for substitutes for a given ingredient.
         * @summary Get Ingredient Substitutes
         * @param {string} ingredientName The name of the ingredient you want to replace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIngredientSubstitutes(ingredientName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIngredientSubstitutes(ingredientName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search for substitutes for a given ingredient.
         * @summary Get Ingredient Substitutes by ID
         * @param {number} id The id of the ingredient you want substitutes for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIngredientSubstitutesByID(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIngredientSubstitutesByID(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a meal plan template.
         * @summary Get Meal Plan Template
         * @param {string} username The username.
         * @param {number} id The shopping list item id.
         * @param {string} hash The private hash for the username.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMealPlanTemplate(username: string, id: number, hash: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMealPlanTemplate(username, id, hash, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get meal plan templates from user or public ones.
         * @summary Get Meal Plan Templates
         * @param {string} username The username.
         * @param {string} hash The private hash for the username.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMealPlanTemplates(username: string, hash: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMealPlanTemplates(username, hash, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user\'s hash that can be found in his/her account.
         * @summary Get Meal Plan Week
         * @param {string} username The username.
         * @param {string} startDate The start date of the meal planned week in the format yyyy-mm-dd.
         * @param {string} hash The private hash for the username.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMealPlanWeek(username: string, startDate: string, hash: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMealPlanWeek(username, startDate, hash, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use a menu item id to get all available information about a menu item, such as nutrition.
         * @summary Get Menu Item Information
         * @param {number} id The menu item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMenuItemInformation(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMenuItemInformation(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
         * @summary Get Product Information
         * @param {number} id The id of the packaged food.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductInformation(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductInformation(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns random food trivia.
         * @summary Get Random Food Trivia
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRandomFoodTrivia(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRandomFoodTrivia(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
         * @summary Get Random Recipes
         * @param {boolean} [limitLicense] Whether the recipes should have an open license that allows display with proper attribution.
         * @param {string} [tags] The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
         * @param {number} [number] The number of random recipes to be returned (between 1 and 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRandomRecipes(limitLicense?: boolean, tags?: string, number?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRandomRecipes(limitLicense, tags, number, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a recipe\'s equipment list.
         * @summary Get Recipe Equipment by ID
         * @param {number} id The recipe id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecipeEquipmentByID(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecipeEquipmentByID(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
         * @summary Get Recipe Information
         * @param {number} id The id of the recipe.
         * @param {boolean} [includeNutrition] Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecipeInformation(id: number, includeNutrition?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecipeInformation(id, includeNutrition, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
         * @summary Get Recipe Information Bulk
         * @param {string} ids A comma-separated list of recipe ids.
         * @param {boolean} [includeNutrition] Include nutrition data to the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecipeInformationBulk(ids: string, includeNutrition?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecipeInformationBulk(ids, includeNutrition, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a recipe\'s ingredient list.
         * @summary Get Recipe Ingredients by ID
         * @param {number} id The recipe id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecipeIngredientsByID(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecipeIngredientsByID(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a recipe\'s nutrition widget data.
         * @summary Get Recipe Nutrition Widget by ID
         * @param {number} id The recipe id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecipeNutritionWidgetByID(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecipeNutritionWidgetByID(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a recipe\'s price breakdown data.
         * @summary Get Recipe Price Breakdown by ID
         * @param {number} id The recipe id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecipePriceBreakdownByID(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecipePriceBreakdownByID(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a recipe\'s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
         * @summary Get Recipe Taste by ID
         * @param {number} id The recipe id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecipeTasteByID(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecipeTasteByID(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the current shopping list for the given user.
         * @summary Get Shopping List
         * @param {string} username The username.
         * @param {string} hash The private hash for the username.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShoppingList(username: string, hash: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShoppingList(username, hash, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Find recipes which are similar to the given one.
         * @summary Get Similar Recipes
         * @param {number} id The id of the source recipe for which similar recipes should be found.
         * @param {number} [number] The number of random recipes to be returned (between 1 and 100).
         * @param {boolean} [limitLicense] Whether the recipes should have an open license that allows display with proper attribution.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimilarRecipes(id: number, number?: number, limitLicense?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSimilarRecipes(id, number, limitLicense, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a simple description of a certain wine, e.g. \"malbec\", \"riesling\", or \"merlot\".
         * @summary Get Wine Description
         * @param {string} wine The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWineDescription(wine: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWineDescription(wine, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Find a wine that goes well with a food. Food can be a dish name (\"steak\"), an ingredient name (\"salmon\"), or a cuisine (\"italian\").
         * @summary Get Wine Pairing
         * @param {string} food The food to get a pairing for. This can be a dish (\&quot;steak\&quot;), an ingredient (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
         * @param {number} [maxPrice] The maximum price for the specific wine recommendation in USD.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWinePairing(food: string, maxPrice?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWinePairing(food, maxPrice, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a specific wine recommendation (concrete product) for a given wine type, e.g. \"merlot\".
         * @summary Get Wine Recommendation
         * @param {string} wine The type of wine to get a specific product recommendation for.
         * @param {number} [maxPrice] The maximum price for the specific wine recommendation in USD.
         * @param {number} [minRating] The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars.
         * @param {number} [number] The number of wine recommendations expected (between 1 and 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWineRecommendation(wine: string, maxPrice?: number, minRating?: number, number?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWineRecommendation(wine, maxPrice, minRating, number, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Estimate the macronutrients of a dish based on its title.
         * @summary Guess Nutrition by Dish Name
         * @param {string} title The title of the dish.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async guessNutritionByDishName(title: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.guessNutritionByDishName(title, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes. You can play around with that endpoint!
         * @summary Image Analysis by URL
         * @param {string} imageUrl The URL of the image to be analyzed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageAnalysisByURL(imageUrl: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageAnalysisByURL(imageUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Classify a food image. You can play around with that endpoint!
         * @summary Image Classification by URL
         * @param {string} imageUrl The URL of the image to be classified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageClassificationByURL(imageUrl: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageClassificationByURL(imageUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).
         * @summary Ingredient Search
         * @param {string} query The partial or full ingredient name.
         * @param {boolean} [addChildren] Whether to add children of found foods.
         * @param {number} [minProteinPercent] The minimum percentage of protein the food must have (between 0 and 100).
         * @param {number} [maxProteinPercent] The maximum percentage of protein the food can have (between 0 and 100).
         * @param {number} [minFatPercent] The minimum percentage of fat the food must have (between 0 and 100).
         * @param {number} [maxFatPercent] The maximum percentage of fat the food can have (between 0 and 100).
         * @param {number} [minCarbsPercent] The minimum percentage of carbs the food must have (between 0 and 100).
         * @param {number} [maxCarbsPercent] The maximum percentage of carbs the food can have (between 0 and 100).
         * @param {boolean} [metaInformation] Whether to return more meta information about the ingredients.
         * @param {string} [intolerances] A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
         * @param {string} [sort] The strategy to sort recipes by. See a full list of supported sorting options.
         * @param {string} [sortDirection] The direction in which to sort. Must be either \&#39;asc\&#39; (ascending) or \&#39;desc\&#39; (descending).
         * @param {number} [offset] The number of results to skip (between 0 and 990).
         * @param {number} [number] The number of expected results (between 1 and 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ingredientSearch(query: string, addChildren?: boolean, minProteinPercent?: number, maxProteinPercent?: number, minFatPercent?: number, maxFatPercent?: number, minCarbsPercent?: number, maxCarbsPercent?: number, metaInformation?: boolean, intolerances?: string, sort?: string, sortDirection?: string, offset?: number, number?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ingredientSearch(query, addChildren, minProteinPercent, maxProteinPercent, minFatPercent, maxFatPercent, minCarbsPercent, maxCarbsPercent, metaInformation, intolerances, sort, sortDirection, offset, number, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Map a set of ingredients to products you can buy in the grocery store.
         * @summary Map Ingredients to Grocery Products
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mapIngredientsToGroceryProducts(body: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mapIngredientsToGroceryProducts(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Extract an ingredient from plain text.
         * @summary Parse Ingredients
         * @param {string} ingredientList The ingredient list of the recipe, one ingredient per line.
         * @param {number} servings The number of servings that you can make from the ingredients.
         * @param {boolean} [includeNutrition] Whether nutrition data should be added to correctly parsed ingredients.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parseIngredients(ingredientList: string, servings: number, includeNutrition?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parseIngredients(ingredientList, servings, includeNutrition, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Answer a nutrition related natural language question.
         * @summary Quick Answer
         * @param {string} q The nutrition related question.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quickAnswer(q: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quickAnswer(q, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.
         * @summary Search All Food
         * @param {string} query The search query.
         * @param {number} [offset] The number of results to skip (between 0 and 990).
         * @param {number} [number] The number of expected results (between 1 and 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchAllFood(query: string, offset?: number, number?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchAllFood(query, offset, number, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search custom foods in a user\'s account.
         * @summary Search Custom Foods
         * @param {string} query The search query.
         * @param {string} username The username.
         * @param {string} hash The private hash for the username.
         * @param {number} [offset] The number of results to skip (between 0 and 990).
         * @param {number} [number] The number of expected results (between 1 and 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchCustomFoods(query: string, username: string, hash: string, offset?: number, number?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchCustomFoods(query, username, hash, offset, number, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Find recipe and other food related videos.
         * @summary Search Food Videos
         * @param {string} query The search query.
         * @param {string} [type] The type of the recipes. See a full list of supported meal types.
         * @param {string} [cuisine] The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines.
         * @param {string} [diet] The diet for which the recipes must be suitable. See a full list of supported diets.
         * @param {string} [includeIngredients] A comma-separated list of ingredients that the recipes should contain.
         * @param {string} [excludeIngredients] A comma-separated list of ingredients or ingredient types that the recipes must not contain.
         * @param {number} [minLength] Minimum video length in seconds.
         * @param {number} [maxLength] Maximum video length in seconds.
         * @param {number} [offset] The number of results to skip (between 0 and 900).
         * @param {number} [number] The number of results to return (between 1 and 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchFoodVideos(query: string, type?: string, cuisine?: string, diet?: string, includeIngredients?: string, excludeIngredients?: string, minLength?: number, maxLength?: number, offset?: number, number?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchFoodVideos(query, type, cuisine, diet, includeIngredients, excludeIngredients, minLength, maxLength, offset, number, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search packaged food products, such as frozen pizza or Greek yogurt.
         * @summary Search Grocery Products
         * @param {string} query The search query.
         * @param {number} [minCalories] The minimum amount of calories the product must have.
         * @param {number} [maxCalories] The maximum amount of calories the product can have.
         * @param {number} [minCarbs] The minimum amount of carbohydrates in grams the product must have.
         * @param {number} [maxCarbs] The maximum amount of carbohydrates in grams the product can have.
         * @param {number} [minProtein] The minimum amount of protein in grams the product must have.
         * @param {number} [maxProtein] The maximum amount of protein in grams the product can have.
         * @param {number} [minFat] The minimum amount of fat in grams the product must have.
         * @param {number} [maxFat] The maximum amount of fat in grams the product can have.
         * @param {number} [offset] The number of results to skip (between 0 and 990).
         * @param {number} [number] The number of expected results (between 1 and 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchGroceryProducts(query: string, minCalories?: number, maxCalories?: number, minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minFat?: number, maxFat?: number, offset?: number, number?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchGroceryProducts(query, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, offset, number, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a packaged food using its UPC.
         * @summary Search Grocery Products by UPC
         * @param {number} upc The product\&#39;s UPC.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchGroceryProductsByUPC(upc: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchGroceryProductsByUPC(upc, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald\'s Big Mac or Starbucks Mocha.
         * @summary Search Menu Items
         * @param {string} query The search query.
         * @param {number} [minCalories] The minimum amount of calories the menu item must have.
         * @param {number} [maxCalories] The maximum amount of calories the menu item can have.
         * @param {number} [minCarbs] The minimum amount of carbohydrates in grams the menu item must have.
         * @param {number} [maxCarbs] The maximum amount of carbohydrates in grams the menu item can have.
         * @param {number} [minProtein] The minimum amount of protein in grams the menu item must have.
         * @param {number} [maxProtein] The maximum amount of protein in grams the menu item can have.
         * @param {number} [minFat] The minimum amount of fat in grams the menu item must have.
         * @param {number} [maxFat] The maximum amount of fat in grams the menu item can have.
         * @param {number} [offset] The offset number for paging (between 0 and 990).
         * @param {number} [number] The number of expected results (between 1 and 10).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchMenuItems(query: string, minCalories?: number, maxCalories?: number, minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minFat?: number, maxFat?: number, offset?: number, number?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchMenuItems(query, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, offset, number, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
         * @summary Search Recipes
         * @param {string} query The (natural language) recipe search query.
         * @param {string} [cuisine] The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as \&#39;OR\&#39;). See a full list of supported cuisines.
         * @param {string} [excludeCuisine] The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as \&#39;AND\&#39;). See a full list of supported cuisines.
         * @param {string} [diet] The diet for which the recipes must be suitable. See a full list of supported diets.
         * @param {string} [intolerances] A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
         * @param {string} [equipment] The equipment required. Multiple values will be interpreted as \&#39;or\&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;.
         * @param {string} [includeIngredients] A comma-separated list of ingredients that should/must be used in the recipes.
         * @param {string} [excludeIngredients] A comma-separated list of ingredients or ingredient types that the recipes must not contain.
         * @param {string} [type] The type of recipe. See a full list of supported meal types.
         * @param {boolean} [instructionsRequired] Whether the recipes must have instructions.
         * @param {boolean} [fillIngredients] Add information about the ingredients and whether they are used or missing in relation to the query.
         * @param {boolean} [addRecipeInformation] If set to true, you get more information about the recipes returned.
         * @param {boolean} [addRecipeNutrition] If set to true, you get nutritional information about each recipes returned.
         * @param {string} [author] The username of the recipe author.
         * @param {string} [tags] User defined tags that have to match. The author param has to be set.
         * @param {number} [recipeBoxId] The id of the recipe box to which the search should be limited to.
         * @param {string} [titleMatch] Enter text that must be found in the title of the recipes.
         * @param {number} [maxReadyTime] The maximum time in minutes it should take to prepare and cook the recipe.
         * @param {boolean} [ignorePantry] Whether to ignore typical pantry items, such as water, salt, flour, etc.
         * @param {string} [sort] The strategy to sort recipes by. See a full list of supported sorting options.
         * @param {string} [sortDirection] The direction in which to sort. Must be either \&#39;asc\&#39; (ascending) or \&#39;desc\&#39; (descending).
         * @param {number} [minCarbs] The minimum amount of carbohydrates in grams the recipe must have.
         * @param {number} [maxCarbs] The maximum amount of carbohydrates in grams the recipe can have.
         * @param {number} [minProtein] The minimum amount of protein in grams the recipe must have.
         * @param {number} [maxProtein] The maximum amount of protein in grams the recipe can have.
         * @param {number} [minCalories] The minimum amount of calories the recipe must have.
         * @param {number} [maxCalories] The maximum amount of calories the recipe can have.
         * @param {number} [minFat] The minimum amount of fat in grams the recipe must have.
         * @param {number} [maxFat] The maximum amount of fat in grams the recipe can have.
         * @param {number} [minAlcohol] The minimum amount of alcohol in grams the recipe must have.
         * @param {number} [maxAlcohol] The maximum amount of alcohol in grams the recipe can have.
         * @param {number} [minCaffeine] The minimum amount of caffeine in milligrams the recipe must have.
         * @param {number} [maxCaffeine] The maximum amount of caffeine in milligrams the recipe can have.
         * @param {number} [minCopper] The minimum amount of copper in milligrams the recipe must have.
         * @param {number} [maxCopper] The maximum amount of copper in milligrams the recipe can have.
         * @param {number} [minCalcium] The minimum amount of calcium in milligrams the recipe must have.
         * @param {number} [maxCalcium] The maximum amount of calcium in milligrams the recipe can have.
         * @param {number} [minCholine] The minimum amount of choline in milligrams the recipe must have.
         * @param {number} [maxCholine] The maximum amount of choline in milligrams the recipe can have.
         * @param {number} [minCholesterol] The minimum amount of cholesterol in milligrams the recipe must have.
         * @param {number} [maxCholesterol] The maximum amount of cholesterol in milligrams the recipe can have.
         * @param {number} [minFluoride] The minimum amount of fluoride in milligrams the recipe must have.
         * @param {number} [maxFluoride] The maximum amount of fluoride in milligrams the recipe can have.
         * @param {number} [minSaturatedFat] The minimum amount of saturated fat in grams the recipe must have.
         * @param {number} [maxSaturatedFat] The maximum amount of saturated fat in grams the recipe can have.
         * @param {number} [minVitaminA] The minimum amount of Vitamin A in IU the recipe must have.
         * @param {number} [maxVitaminA] The maximum amount of Vitamin A in IU the recipe can have.
         * @param {number} [minVitaminC] The minimum amount of Vitamin C milligrams the recipe must have.
         * @param {number} [maxVitaminC] The maximum amount of Vitamin C in milligrams the recipe can have.
         * @param {number} [minVitaminD] The minimum amount of Vitamin D in micrograms the recipe must have.
         * @param {number} [maxVitaminD] The maximum amount of Vitamin D in micrograms the recipe can have.
         * @param {number} [minVitaminE] The minimum amount of Vitamin E in milligrams the recipe must have.
         * @param {number} [maxVitaminE] The maximum amount of Vitamin E in milligrams the recipe can have.
         * @param {number} [minVitaminK] The minimum amount of Vitamin K in micrograms the recipe must have.
         * @param {number} [maxVitaminK] The maximum amount of Vitamin K in micrograms the recipe can have.
         * @param {number} [minVitaminB1] The minimum amount of Vitamin B1 in milligrams the recipe must have.
         * @param {number} [maxVitaminB1] The maximum amount of Vitamin B1 in milligrams the recipe can have.
         * @param {number} [minVitaminB2] The minimum amount of Vitamin B2 in milligrams the recipe must have.
         * @param {number} [maxVitaminB2] The maximum amount of Vitamin B2 in milligrams the recipe can have.
         * @param {number} [minVitaminB5] The minimum amount of Vitamin B5 in milligrams the recipe must have.
         * @param {number} [maxVitaminB5] The maximum amount of Vitamin B5 in milligrams the recipe can have.
         * @param {number} [minVitaminB3] The minimum amount of Vitamin B3 in milligrams the recipe must have.
         * @param {number} [maxVitaminB3] The maximum amount of Vitamin B3 in milligrams the recipe can have.
         * @param {number} [minVitaminB6] The minimum amount of Vitamin B6 in milligrams the recipe must have.
         * @param {number} [maxVitaminB6] The maximum amount of Vitamin B6 in milligrams the recipe can have.
         * @param {number} [minVitaminB12] The minimum amount of Vitamin B12 in micrograms the recipe must have.
         * @param {number} [maxVitaminB12] The maximum amount of Vitamin B12 in micrograms the recipe can have.
         * @param {number} [minFiber] The minimum amount of fiber in grams the recipe must have.
         * @param {number} [maxFiber] The maximum amount of fiber in grams the recipe can have.
         * @param {number} [minFolate] The minimum amount of folate in micrograms the recipe must have.
         * @param {number} [maxFolate] The maximum amount of folate in micrograms the recipe can have.
         * @param {number} [minFolicAcid] The minimum amount of folic acid in micrograms the recipe must have.
         * @param {number} [maxFolicAcid] The maximum amount of folic acid in micrograms the recipe can have.
         * @param {number} [minIodine] The minimum amount of iodine in micrograms the recipe must have.
         * @param {number} [maxIodine] The maximum amount of iodine in micrograms the recipe can have.
         * @param {number} [minIron] The minimum amount of iron in milligrams the recipe must have.
         * @param {number} [maxIron] The maximum amount of iron in milligrams the recipe can have.
         * @param {number} [minMagnesium] The minimum amount of magnesium in milligrams the recipe must have.
         * @param {number} [maxMagnesium] The maximum amount of magnesium in milligrams the recipe can have.
         * @param {number} [minManganese] The minimum amount of manganese in milligrams the recipe must have.
         * @param {number} [maxManganese] The maximum amount of manganese in milligrams the recipe can have.
         * @param {number} [minPhosphorus] The minimum amount of phosphorus in milligrams the recipe must have.
         * @param {number} [maxPhosphorus] The maximum amount of phosphorus in milligrams the recipe can have.
         * @param {number} [minPotassium] The minimum amount of potassium in milligrams the recipe must have.
         * @param {number} [maxPotassium] The maximum amount of potassium in milligrams the recipe can have.
         * @param {number} [minSelenium] The minimum amount of selenium in micrograms the recipe must have.
         * @param {number} [maxSelenium] The maximum amount of selenium in micrograms the recipe can have.
         * @param {number} [minSodium] The minimum amount of sodium in milligrams the recipe must have.
         * @param {number} [maxSodium] The maximum amount of sodium in milligrams the recipe can have.
         * @param {number} [minSugar] The minimum amount of sugar in grams the recipe must have.
         * @param {number} [maxSugar] The maximum amount of sugar in grams the recipe can have.
         * @param {number} [minZinc] The minimum amount of zinc in milligrams the recipe must have.
         * @param {number} [maxZinc] The maximum amount of zinc in milligrams the recipe can have.
         * @param {number} [offset] The number of results to skip (between 0 and 900).
         * @param {number} [number] The number of expected results (between 1 and 100).
         * @param {boolean} [limitLicense] Whether the recipes should have an open license that allows display with proper attribution.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchRecipes(query: string, cuisine?: string, excludeCuisine?: string, diet?: string, intolerances?: string, equipment?: string, includeIngredients?: string, excludeIngredients?: string, type?: string, instructionsRequired?: boolean, fillIngredients?: boolean, addRecipeInformation?: boolean, addRecipeNutrition?: boolean, author?: string, tags?: string, recipeBoxId?: number, titleMatch?: string, maxReadyTime?: number, ignorePantry?: boolean, sort?: string, sortDirection?: string, minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minCalories?: number, maxCalories?: number, minFat?: number, maxFat?: number, minAlcohol?: number, maxAlcohol?: number, minCaffeine?: number, maxCaffeine?: number, minCopper?: number, maxCopper?: number, minCalcium?: number, maxCalcium?: number, minCholine?: number, maxCholine?: number, minCholesterol?: number, maxCholesterol?: number, minFluoride?: number, maxFluoride?: number, minSaturatedFat?: number, maxSaturatedFat?: number, minVitaminA?: number, maxVitaminA?: number, minVitaminC?: number, maxVitaminC?: number, minVitaminD?: number, maxVitaminD?: number, minVitaminE?: number, maxVitaminE?: number, minVitaminK?: number, maxVitaminK?: number, minVitaminB1?: number, maxVitaminB1?: number, minVitaminB2?: number, maxVitaminB2?: number, minVitaminB5?: number, maxVitaminB5?: number, minVitaminB3?: number, maxVitaminB3?: number, minVitaminB6?: number, maxVitaminB6?: number, minVitaminB12?: number, maxVitaminB12?: number, minFiber?: number, maxFiber?: number, minFolate?: number, maxFolate?: number, minFolicAcid?: number, maxFolicAcid?: number, minIodine?: number, maxIodine?: number, minIron?: number, maxIron?: number, minMagnesium?: number, maxMagnesium?: number, minManganese?: number, maxManganese?: number, minPhosphorus?: number, maxPhosphorus?: number, minPotassium?: number, maxPotassium?: number, minSelenium?: number, maxSelenium?: number, minSodium?: number, maxSodium?: number, minSugar?: number, maxSugar?: number, minZinc?: number, maxZinc?: number, offset?: number, number?: number, limitLicense?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchRecipes(query, cuisine, excludeCuisine, diet, intolerances, equipment, includeIngredients, excludeIngredients, type, instructionsRequired, fillIngredients, addRecipeInformation, addRecipeNutrition, author, tags, recipeBoxId, titleMatch, maxReadyTime, ignorePantry, sort, sortDirection, minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, limitLicense, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *              Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don\'t currently have (post shopping).         
         * @summary Search Recipes by Ingredients
         * @param {string} ingredients A comma-separated list of ingredients that the recipes should contain.
         * @param {number} [number] The maximum number of recipes to return (between 1 and 100). Defaults to 10.
         * @param {boolean} [limitLicense] Whether the recipes should have an open license that allows display with proper attribution.
         * @param {number} [ranking] Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
         * @param {boolean} [ignorePantry] Whether to ignore typical pantry items, such as water, salt, flour, etc.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchRecipesByIngredients(ingredients: string, number?: number, limitLicense?: boolean, ranking?: number, ignorePantry?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchRecipesByIngredients(ingredients, number, limitLicense, ranking, ignorePantry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
         * @summary Search Recipes by Nutrients
         * @param {number} [minCarbs] The minimum amount of carbohydrates in grams the recipe must have.
         * @param {number} [maxCarbs] The maximum amount of carbohydrates in grams the recipe can have.
         * @param {number} [minProtein] The minimum amount of protein in grams the recipe must have.
         * @param {number} [maxProtein] The maximum amount of protein in grams the recipe can have.
         * @param {number} [minCalories] The minimum amount of calories the recipe must have.
         * @param {number} [maxCalories] The maximum amount of calories the recipe can have.
         * @param {number} [minFat] The minimum amount of fat in grams the recipe must have.
         * @param {number} [maxFat] The maximum amount of fat in grams the recipe can have.
         * @param {number} [minAlcohol] The minimum amount of alcohol in grams the recipe must have.
         * @param {number} [maxAlcohol] The maximum amount of alcohol in grams the recipe can have.
         * @param {number} [minCaffeine] The minimum amount of caffeine in milligrams the recipe must have.
         * @param {number} [maxCaffeine] The maximum amount of caffeine in milligrams the recipe can have.
         * @param {number} [minCopper] The minimum amount of copper in milligrams the recipe must have.
         * @param {number} [maxCopper] The maximum amount of copper in milligrams the recipe can have.
         * @param {number} [minCalcium] The minimum amount of calcium in milligrams the recipe must have.
         * @param {number} [maxCalcium] The maximum amount of calcium in milligrams the recipe can have.
         * @param {number} [minCholine] The minimum amount of choline in milligrams the recipe must have.
         * @param {number} [maxCholine] The maximum amount of choline in milligrams the recipe can have.
         * @param {number} [minCholesterol] The minimum amount of cholesterol in milligrams the recipe must have.
         * @param {number} [maxCholesterol] The maximum amount of cholesterol in milligrams the recipe can have.
         * @param {number} [minFluoride] The minimum amount of fluoride in milligrams the recipe must have.
         * @param {number} [maxFluoride] The maximum amount of fluoride in milligrams the recipe can have.
         * @param {number} [minSaturatedFat] The minimum amount of saturated fat in grams the recipe must have.
         * @param {number} [maxSaturatedFat] The maximum amount of saturated fat in grams the recipe can have.
         * @param {number} [minVitaminA] The minimum amount of Vitamin A in IU the recipe must have.
         * @param {number} [maxVitaminA] The maximum amount of Vitamin A in IU the recipe can have.
         * @param {number} [minVitaminC] The minimum amount of Vitamin C in milligrams the recipe must have.
         * @param {number} [maxVitaminC] The maximum amount of Vitamin C in milligrams the recipe can have.
         * @param {number} [minVitaminD] The minimum amount of Vitamin D in micrograms the recipe must have.
         * @param {number} [maxVitaminD] The maximum amount of Vitamin D in micrograms the recipe can have.
         * @param {number} [minVitaminE] The minimum amount of Vitamin E in milligrams the recipe must have.
         * @param {number} [maxVitaminE] The maximum amount of Vitamin E in milligrams the recipe can have.
         * @param {number} [minVitaminK] The minimum amount of Vitamin K in micrograms the recipe must have.
         * @param {number} [maxVitaminK] The maximum amount of Vitamin K in micrograms the recipe can have.
         * @param {number} [minVitaminB1] The minimum amount of Vitamin B1 in milligrams the recipe must have.
         * @param {number} [maxVitaminB1] The maximum amount of Vitamin B1 in milligrams the recipe can have.
         * @param {number} [minVitaminB2] The minimum amount of Vitamin B2 in milligrams the recipe must have.
         * @param {number} [maxVitaminB2] The maximum amount of Vitamin B2 in milligrams the recipe can have.
         * @param {number} [minVitaminB5] The minimum amount of Vitamin B5 in milligrams the recipe must have.
         * @param {number} [maxVitaminB5] The maximum amount of Vitamin B5 in milligrams the recipe can have.
         * @param {number} [minVitaminB3] The minimum amount of Vitamin B3 in milligrams the recipe must have.
         * @param {number} [maxVitaminB3] The maximum amount of Vitamin B3 in milligrams the recipe can have.
         * @param {number} [minVitaminB6] The minimum amount of Vitamin B6 in milligrams the recipe must have.
         * @param {number} [maxVitaminB6] The maximum amount of Vitamin B6 in milligrams the recipe can have.
         * @param {number} [minVitaminB12] The minimum amount of Vitamin B12 in micrograms the recipe must have.
         * @param {number} [maxVitaminB12] The maximum amount of Vitamin B12 in micrograms the recipe can have.
         * @param {number} [minFiber] The minimum amount of fiber in grams the recipe must have.
         * @param {number} [maxFiber] The maximum amount of fiber in grams the recipe can have.
         * @param {number} [minFolate] The minimum amount of folate in micrograms the recipe must have.
         * @param {number} [maxFolate] The maximum amount of folate in micrograms the recipe can have.
         * @param {number} [minFolicAcid] The minimum amount of folic acid in micrograms the recipe must have.
         * @param {number} [maxFolicAcid] The maximum amount of folic acid in micrograms the recipe can have.
         * @param {number} [minIodine] The minimum amount of iodine in micrograms the recipe must have.
         * @param {number} [maxIodine] The maximum amount of iodine in micrograms the recipe can have.
         * @param {number} [minIron] The minimum amount of iron in milligrams the recipe must have.
         * @param {number} [maxIron] The maximum amount of iron in milligrams the recipe can have.
         * @param {number} [minMagnesium] The minimum amount of magnesium in milligrams the recipe must have.
         * @param {number} [maxMagnesium] The maximum amount of magnesium in milligrams the recipe can have.
         * @param {number} [minManganese] The minimum amount of manganese in milligrams the recipe must have.
         * @param {number} [maxManganese] The maximum amount of manganese in milligrams the recipe can have.
         * @param {number} [minPhosphorus] The minimum amount of phosphorus in milligrams the recipe must have.
         * @param {number} [maxPhosphorus] The maximum amount of phosphorus in milligrams the recipe can have.
         * @param {number} [minPotassium] The minimum amount of potassium in milligrams the recipe must have.
         * @param {number} [maxPotassium] The maximum amount of potassium in milligrams the recipe can have.
         * @param {number} [minSelenium] The minimum amount of selenium in micrograms the recipe must have.
         * @param {number} [maxSelenium] The maximum amount of selenium in micrograms the recipe can have.
         * @param {number} [minSodium] The minimum amount of sodium in milligrams the recipe must have.
         * @param {number} [maxSodium] The maximum amount of sodium in milligrams the recipe can have.
         * @param {number} [minSugar] The minimum amount of sugar in grams the recipe must have.
         * @param {number} [maxSugar] The maximum amount of sugar in grams the recipe can have.
         * @param {number} [minZinc] The minimum amount of zinc in milligrams the recipe must have.
         * @param {number} [maxZinc] The maximum amount of zinc in milligrams the recipe can have.
         * @param {number} [offset] The number of results to skip (between 0 and 900).
         * @param {number} [number] The number of expected results (between 1 and 100).
         * @param {boolean} [random] If true, every request will give you a random set of recipes within the requested limits.
         * @param {boolean} [limitLicense] Whether the recipes should have an open license that allows display with proper attribution.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchRecipesByNutrients(minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minCalories?: number, maxCalories?: number, minFat?: number, maxFat?: number, minAlcohol?: number, maxAlcohol?: number, minCaffeine?: number, maxCaffeine?: number, minCopper?: number, maxCopper?: number, minCalcium?: number, maxCalcium?: number, minCholine?: number, maxCholine?: number, minCholesterol?: number, maxCholesterol?: number, minFluoride?: number, maxFluoride?: number, minSaturatedFat?: number, maxSaturatedFat?: number, minVitaminA?: number, maxVitaminA?: number, minVitaminC?: number, maxVitaminC?: number, minVitaminD?: number, maxVitaminD?: number, minVitaminE?: number, maxVitaminE?: number, minVitaminK?: number, maxVitaminK?: number, minVitaminB1?: number, maxVitaminB1?: number, minVitaminB2?: number, maxVitaminB2?: number, minVitaminB5?: number, maxVitaminB5?: number, minVitaminB3?: number, maxVitaminB3?: number, minVitaminB6?: number, maxVitaminB6?: number, minVitaminB12?: number, maxVitaminB12?: number, minFiber?: number, maxFiber?: number, minFolate?: number, maxFolate?: number, minFolicAcid?: number, maxFolicAcid?: number, minIodine?: number, maxIodine?: number, minIron?: number, maxIron?: number, minMagnesium?: number, maxMagnesium?: number, minManganese?: number, maxManganese?: number, minPhosphorus?: number, maxPhosphorus?: number, minPotassium?: number, maxPotassium?: number, minSelenium?: number, maxSelenium?: number, minSodium?: number, maxSodium?: number, minSugar?: number, maxSugar?: number, minZinc?: number, maxZinc?: number, offset?: number, number?: number, random?: boolean, limitLicense?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchRecipesByNutrients(minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, random, limitLicense, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search spoonacular\'s site content. You\'ll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.
         * @summary Search Site Content
         * @param {string} query The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchSiteContent(query: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchSiteContent(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Automatically generate a short description that summarizes key information about the recipe.
         * @summary Summarize Recipe
         * @param {number} id The recipe id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async summarizeRecipe(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.summarizeRecipe(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \"Get Conversation Suggests\" endpoint to show your user what he or she can say.
         * @summary Talk to Chatbot
         * @param {string} text The request / question / answer from the user to the chatbot.
         * @param {string} [contextId] An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async talkToChatbot(text: string, contextId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.talkToChatbot(text, contextId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Visualize the equipment used to make a recipe. You can play around with that endpoint!
         * @summary Visualize Equipment
         * @param {string} instructions The recipe\\\&#39;s instructions.
         * @param {string} [view] How to visualize the equipment, either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot;.
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {boolean} [showBacklink] Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async visualizeEquipment(instructions: string, view?: string, defaultCss?: boolean, showBacklink?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.visualizeEquipment(instructions, view, defaultCss, showBacklink, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Visualize ingredients of a recipe. You can play around with that endpoint!
         * @summary Visualize Ingredients
         * @param {string} ingredientList The ingredient list of the recipe, one ingredient per line.
         * @param {number} servings The number of servings.
         * @param {string} [measure] The original system of measurement, either \\\&quot;metric\\\&quot; or \\\&quot;us\\\&quot;.
         * @param {string} [view] How to visualize the ingredients, either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot;.
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {boolean} [showBacklink] Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async visualizeIngredients(ingredientList: string, servings: number, measure?: string, view?: string, defaultCss?: boolean, showBacklink?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.visualizeIngredients(ingredientList, servings, measure, view, defaultCss, showBacklink, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Visualize a menu item\'s nutritional information as HTML including CSS.
         * @summary Visualize Menu Item Nutrition by ID
         * @param {number} id The menu item id.
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async visualizeMenuItemNutritionByID(id: number, defaultCss?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.visualizeMenuItemNutritionByID(id, defaultCss, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Visualize the price breakdown of a recipe. You can play around with that endpoint!
         * @summary Visualize Price Breakdown
         * @param {string} ingredientList The ingredient list of the recipe, one ingredient per line.
         * @param {number} servings The number of servings.
         * @param {number} [mode] The mode in which the widget should be delivered. 1 &#x3D; separate views (compact), 2 &#x3D; all in one view (full).
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {boolean} [showBacklink] Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async visualizePriceBreakdown(ingredientList: string, servings: number, mode?: number, defaultCss?: boolean, showBacklink?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.visualizePriceBreakdown(ingredientList, servings, mode, defaultCss, showBacklink, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Visualize a product\'s nutritional information as HTML including CSS.
         * @summary Visualize Product Nutrition by ID
         * @param {number} id The id of the product.
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async visualizeProductNutritionByID(id: number, defaultCss?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.visualizeProductNutritionByID(id, defaultCss, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Visualize a recipe\'s equipment list.
         * @summary Visualize Recipe Equipment by ID
         * @param {number} id The recipe id.
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async visualizeRecipeEquipmentByID(id: number, defaultCss?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.visualizeRecipeEquipmentByID(id, defaultCss, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Visualize a recipe\'s ingredient list.
         * @summary Visualize Recipe Ingredients by ID
         * @param {number} id The recipe id.
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async visualizeRecipeIngredientsByID(id: number, defaultCss?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.visualizeRecipeIngredientsByID(id, defaultCss, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Visualize a recipe\'s nutritional information as HTML including CSS. You can play around with that endpoint!
         * @summary Visualize Recipe Nutrition
         * @param {string} ingredientList The ingredient list of the recipe, one ingredient per line.
         * @param {number} servings The number of servings.
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {boolean} [showBacklink] Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async visualizeRecipeNutrition(ingredientList: string, servings: number, defaultCss?: boolean, showBacklink?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.visualizeRecipeNutrition(ingredientList, servings, defaultCss, showBacklink, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Visualize a recipe\'s nutritional information as HTML including CSS.
         * @summary Visualize Recipe Nutrition by ID
         * @param {number} id The recipe id.
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async visualizeRecipeNutritionByID(id: number, defaultCss?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.visualizeRecipeNutritionByID(id, defaultCss, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Visualize a recipe\'s price breakdown.
         * @summary Visualize Recipe Price Breakdown by ID
         * @param {number} id The recipe id.
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async visualizeRecipePriceBreakdownByID(id: number, defaultCss?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.visualizeRecipePriceBreakdownByID(id, defaultCss, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Visualize a recipe\'s taste information as HTML including CSS. You can play around with that endpoint!
         * @summary Visualize Recipe Taste
         * @param {string} ingredientList The ingredient list of the recipe, one ingredient per line.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async visualizeRecipeTaste(ingredientList: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.visualizeRecipeTaste(ingredientList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a recipe\'s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
         * @summary Visualize Recipe Taste by ID
         * @param {number} id The recipe id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async visualizeRecipeTasteByID(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.visualizeRecipeTasteByID(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Add an item to the user\'s meal plan.
         * @summary Add to Meal Plan
         * @param {string} username The username.
         * @param {string} hash The private hash for the username.
         * @param {InlineObject11} inlineObject11 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToMealPlan(username: string, hash: string, inlineObject11: InlineObject11, options?: any): AxiosPromise<object> {
            return localVarFp.addToMealPlan(username, hash, inlineObject11, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an item to the current shopping list of a user.
         * @summary Add to Shopping List
         * @param {string} username The username.
         * @param {string} hash The private hash for the username.
         * @param {InlineObject14} inlineObject14 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToShoppingList(username: string, hash: string, inlineObject14: InlineObject14, options?: any): AxiosPromise<object> {
            return localVarFp.addToShoppingList(username, hash, inlineObject14, options).then((request) => request(axios, basePath));
        },
        /**
         * Parse a recipe search query to find out its intention.
         * @summary Analyze a Recipe Search Query
         * @param {string} q The recipe search query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyzeARecipeSearchQuery(q: string, options?: any): AxiosPromise<object> {
            return localVarFp.analyzeARecipeSearchQuery(q, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe\'s instructions will be extracted independently of the step they\'re used in.
         * @summary Analyze Recipe Instructions
         * @param {string} instructions The instructions to be analyzed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyzeRecipeInstructions(instructions: string, options?: any): AxiosPromise<object> {
            return localVarFp.analyzeRecipeInstructions(instructions, options).then((request) => request(axios, basePath));
        },
        /**
         * Autocomplete the entry of an ingredient.
         * @summary Autocomplete Ingredient Search
         * @param {string} query The partial or full ingredient name.
         * @param {number} [number] The number of results to return (between 1 and 100).
         * @param {boolean} [metaInformation] Whether to return more meta information about the ingredients.
         * @param {string} [intolerances] A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autocompleteIngredientSearch(query: string, number?: number, metaInformation?: boolean, intolerances?: string, options?: any): AxiosPromise<object> {
            return localVarFp.autocompleteIngredientSearch(query, number, metaInformation, intolerances, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
         * @summary Autocomplete Menu Item Search
         * @param {string} query The (partial) search query.
         * @param {number} [number] The number of results to return (between 1 and 25).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autocompleteMenuItemSearch(query: string, number?: number, options?: any): AxiosPromise<object> {
            return localVarFp.autocompleteMenuItemSearch(query, number, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
         * @summary Autocomplete Product Search
         * @param {string} query The (partial) search query.
         * @param {number} [number] The number of results to return (between 1 and 25).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autocompleteProductSearch(query: string, number?: number, options?: any): AxiosPromise<object> {
            return localVarFp.autocompleteProductSearch(query, number, options).then((request) => request(axios, basePath));
        },
        /**
         * Autocomplete a partial input to suggest possible recipe names.
         * @summary Autocomplete Recipe Search
         * @param {string} query The query to be autocompleted.
         * @param {number} [number] The number of results to return (between 1 and 25).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autocompleteRecipeSearch(query: string, number?: number, options?: any): AxiosPromise<object> {
            return localVarFp.autocompleteRecipeSearch(query, number, options).then((request) => request(axios, basePath));
        },
        /**
         * Classify the recipe\'s cuisine.
         * @summary Classify Cuisine
         * @param {string} title The title of the recipe.
         * @param {string} ingredientList The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classifyCuisine(title: string, ingredientList: string, options?: any): AxiosPromise<object> {
            return localVarFp.classifyCuisine(title, ingredientList, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
         * @summary Classify Grocery Product
         * @param {InlineObject9} inlineObject9 
         * @param {string} [locale] The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classifyGroceryProduct(inlineObject9: InlineObject9, locale?: string, options?: any): AxiosPromise<object> {
            return localVarFp.classifyGroceryProduct(inlineObject9, locale, options).then((request) => request(axios, basePath));
        },
        /**
         * Provide a set of product jsons, get back classified products.
         * @summary Classify Grocery Product Bulk
         * @param {Array<any>} requestBody 
         * @param {string} [locale] The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classifyGroceryProductBulk(requestBody: Array<any>, locale?: string, options?: any): AxiosPromise<object> {
            return localVarFp.classifyGroceryProductBulk(requestBody, locale, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete all planned items from the user\'s meal plan for a specific day.
         * @summary Clear Meal Plan Day
         * @param {string} username The username.
         * @param {string} date The date in the format yyyy-mm-dd.
         * @param {string} hash The private hash for the username.
         * @param {InlineObject10} inlineObject10 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearMealPlanDay(username: string, date: string, hash: string, inlineObject10: InlineObject10, options?: any): AxiosPromise<object> {
            return localVarFp.clearMealPlanDay(username, date, hash, inlineObject10, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
         * @summary Compute Glycemic Load
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        computeGlycemicLoad(body: object, options?: any): AxiosPromise<object> {
            return localVarFp.computeGlycemicLoad(body, options).then((request) => request(axios, basePath));
        },
        /**
         * In order to call user-specific endpoints, you need to connect your app\'s users to spoonacular users.
         * @summary Connect User
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectUser(body: object, options?: any): AxiosPromise<object> {
            return localVarFp.connectUser(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Convert amounts like \"2 cups of flour to grams\".
         * @summary Convert Amounts
         * @param {string} ingredientName The ingredient which you want to convert.
         * @param {number} sourceAmount The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.
         * @param {string} sourceUnit The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
         * @param {string} targetUnit The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertAmounts(ingredientName: string, sourceAmount: number, sourceUnit: string, targetUnit: string, options?: any): AxiosPromise<object> {
            return localVarFp.convertAmounts(ingredientName, sourceAmount, sourceUnit, targetUnit, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate a recipe card for a recipe.
         * @summary Create Recipe Card
         * @param {string} title The title of the recipe.
         * @param {any} image The binary image of the recipe as jpg.
         * @param {string} ingredients The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
         * @param {string} instructions The instructions to make the recipe. One step per line (separate lines with \\\\n).
         * @param {number} readyInMinutes The number of minutes it takes to get the recipe on the table.
         * @param {number} servings The number of servings the recipe makes.
         * @param {string} mask The mask to put over the recipe image (\\\&quot;ellipseMask\\\&quot;, \\\&quot;diamondMask\\\&quot;, \\\&quot;starMask\\\&quot;, \\\&quot;heartMask\\\&quot;, \\\&quot;potMask\\\&quot;, \\\&quot;fishMask\\\&quot;).
         * @param {string} backgroundImage The background image (\\\&quot;none\\\&quot;,\\\&quot;background1\\\&quot;, or \\\&quot;background2\\\&quot;).
         * @param {string} [author] The author of the recipe.
         * @param {string} [backgroundColor] The background color for the recipe card as a hex-string.
         * @param {string} [fontColor] The font color for the recipe card as a hex-string.
         * @param {string} [source] The source of the recipe.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecipeCard(title: string, image: any, ingredients: string, instructions: string, readyInMinutes: number, servings: number, mask: string, backgroundImage: string, author?: string, backgroundColor?: string, fontColor?: string, source?: string, options?: any): AxiosPromise<object> {
            return localVarFp.createRecipeCard(title, image, ingredients, instructions, readyInMinutes, servings, mask, backgroundImage, author, backgroundColor, fontColor, source, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an item from the user\'s meal plan.
         * @summary Delete from Meal Plan
         * @param {string} username The username.
         * @param {number} id The shopping list item id.
         * @param {string} hash The private hash for the username.
         * @param {InlineObject12} inlineObject12 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFromMealPlan(username: string, id: number, hash: string, inlineObject12: InlineObject12, options?: any): AxiosPromise<object> {
            return localVarFp.deleteFromMealPlan(username, id, hash, inlineObject12, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an item from the current shopping list of the user.
         * @summary Delete from Shopping List
         * @param {string} username The username.
         * @param {number} id The shopping list item id.
         * @param {string} hash The private hash for the username.
         * @param {InlineObject15} inlineObject15 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFromShoppingList(username: string, id: number, hash: string, inlineObject15: InlineObject15, options?: any): AxiosPromise<object> {
            return localVarFp.deleteFromShoppingList(username, id, hash, inlineObject15, options).then((request) => request(axios, basePath));
        },
        /**
         * Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.
         * @summary Detect Food in Text
         * @param {string} text The text in which food items, such as dish names and ingredients, should be detected in.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detectFoodInText(text: string, options?: any): AxiosPromise<object> {
            return localVarFp.detectFoodInText(text, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
         * @summary Extract Recipe from Website
         * @param {string} url The URL of the recipe page.
         * @param {boolean} [forceExtraction] If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.
         * @param {boolean} [analyze] If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extractRecipeFromWebsite(url: string, forceExtraction?: boolean, analyze?: boolean, options?: any): AxiosPromise<object> {
            return localVarFp.extractRecipeFromWebsite(url, forceExtraction, analyze, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
         * @summary Generate Meal Plan
         * @param {string} [timeFrame] Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;.
         * @param {number} [targetCalories] What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.
         * @param {string} [diet] Enter a diet that the meal plan has to adhere to. See a full list of supported diets.
         * @param {string} [exclude] A comma-separated list of allergens or ingredients that must be excluded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateMealPlan(timeFrame?: string, targetCalories?: number, diet?: string, exclude?: string, options?: any): AxiosPromise<object> {
            return localVarFp.generateMealPlan(timeFrame, targetCalories, diet, exclude, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate the shopping list for a user from the meal planner in a given time frame.
         * @summary Generate Shopping List
         * @param {string} username The username.
         * @param {string} startDate The start date in the format yyyy-mm-dd.
         * @param {string} endDate The end date in the format yyyy-mm-dd.
         * @param {string} hash The private hash for the username.
         * @param {InlineObject13} inlineObject13 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateShoppingList(username: string, startDate: string, endDate: string, hash: string, inlineObject13: InlineObject13, options?: any): AxiosPromise<object> {
            return localVarFp.generateShoppingList(username, startDate, endDate, hash, inlineObject13, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a random joke that is related to food. Caution: this is an endpoint for adults!
         * @summary Get a Random Food Joke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getARandomFoodJoke(options?: any): AxiosPromise<object> {
            return localVarFp.getARandomFoodJoke(options).then((request) => request(axios, basePath));
        },
        /**
         * Get an analyzed breakdown of a recipe\'s instructions. Each step is enriched with the ingredients and equipment required.
         * @summary Get Analyzed Recipe Instructions
         * @param {number} id The recipe id.
         * @param {boolean} [stepBreakdown] Whether to break down the recipe steps even more.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalyzedRecipeInstructions(id: number, stepBreakdown?: boolean, options?: any): AxiosPromise<object> {
            return localVarFp.getAnalyzedRecipeInstructions(id, stepBreakdown, options).then((request) => request(axios, basePath));
        },
        /**
         * Find comparable products to the given one.
         * @summary Get Comparable Products
         * @param {number} upc The UPC of the product for which you want to find comparable products.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComparableProducts(upc: number, options?: any): AxiosPromise<object> {
            return localVarFp.getComparableProducts(upc, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns suggestions for things the user can say or ask the chatbot.
         * @summary Get Conversation Suggests
         * @param {string} query A (partial) query from the user. The endpoint will return if it matches topics it can talk about.
         * @param {number} [number] The number of suggestions to return (between 1 and 25).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationSuggests(query: string, number?: number, options?: any): AxiosPromise<object> {
            return localVarFp.getConversationSuggests(query, number, options).then((request) => request(axios, basePath));
        },
        /**
         * Find a dish that goes well with a given wine.
         * @summary Get Dish Pairing for Wine
         * @param {string} wine The type of wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDishPairingForWine(wine: string, options?: any): AxiosPromise<object> {
            return localVarFp.getDishPairingForWine(wine, options).then((request) => request(axios, basePath));
        },
        /**
         * Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
         * @summary Get Ingredient Information
         * @param {number} id The ingredient id.
         * @param {number} [amount] The amount of this ingredient.
         * @param {string} [unit] The unit for the given amount.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientInformation(id: number, amount?: number, unit?: string, options?: any): AxiosPromise<object> {
            return localVarFp.getIngredientInformation(id, amount, unit, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for substitutes for a given ingredient.
         * @summary Get Ingredient Substitutes
         * @param {string} ingredientName The name of the ingredient you want to replace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientSubstitutes(ingredientName: string, options?: any): AxiosPromise<object> {
            return localVarFp.getIngredientSubstitutes(ingredientName, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for substitutes for a given ingredient.
         * @summary Get Ingredient Substitutes by ID
         * @param {number} id The id of the ingredient you want substitutes for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientSubstitutesByID(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.getIngredientSubstitutesByID(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a meal plan template.
         * @summary Get Meal Plan Template
         * @param {string} username The username.
         * @param {number} id The shopping list item id.
         * @param {string} hash The private hash for the username.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMealPlanTemplate(username: string, id: number, hash: string, options?: any): AxiosPromise<object> {
            return localVarFp.getMealPlanTemplate(username, id, hash, options).then((request) => request(axios, basePath));
        },
        /**
         * Get meal plan templates from user or public ones.
         * @summary Get Meal Plan Templates
         * @param {string} username The username.
         * @param {string} hash The private hash for the username.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMealPlanTemplates(username: string, hash: string, options?: any): AxiosPromise<object> {
            return localVarFp.getMealPlanTemplates(username, hash, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user\'s hash that can be found in his/her account.
         * @summary Get Meal Plan Week
         * @param {string} username The username.
         * @param {string} startDate The start date of the meal planned week in the format yyyy-mm-dd.
         * @param {string} hash The private hash for the username.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMealPlanWeek(username: string, startDate: string, hash: string, options?: any): AxiosPromise<object> {
            return localVarFp.getMealPlanWeek(username, startDate, hash, options).then((request) => request(axios, basePath));
        },
        /**
         * Use a menu item id to get all available information about a menu item, such as nutrition.
         * @summary Get Menu Item Information
         * @param {number} id The menu item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenuItemInformation(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.getMenuItemInformation(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
         * @summary Get Product Information
         * @param {number} id The id of the packaged food.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductInformation(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.getProductInformation(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns random food trivia.
         * @summary Get Random Food Trivia
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRandomFoodTrivia(options?: any): AxiosPromise<object> {
            return localVarFp.getRandomFoodTrivia(options).then((request) => request(axios, basePath));
        },
        /**
         * Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
         * @summary Get Random Recipes
         * @param {boolean} [limitLicense] Whether the recipes should have an open license that allows display with proper attribution.
         * @param {string} [tags] The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
         * @param {number} [number] The number of random recipes to be returned (between 1 and 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRandomRecipes(limitLicense?: boolean, tags?: string, number?: number, options?: any): AxiosPromise<object> {
            return localVarFp.getRandomRecipes(limitLicense, tags, number, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a recipe\'s equipment list.
         * @summary Get Recipe Equipment by ID
         * @param {number} id The recipe id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipeEquipmentByID(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.getRecipeEquipmentByID(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
         * @summary Get Recipe Information
         * @param {number} id The id of the recipe.
         * @param {boolean} [includeNutrition] Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipeInformation(id: number, includeNutrition?: boolean, options?: any): AxiosPromise<object> {
            return localVarFp.getRecipeInformation(id, includeNutrition, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
         * @summary Get Recipe Information Bulk
         * @param {string} ids A comma-separated list of recipe ids.
         * @param {boolean} [includeNutrition] Include nutrition data to the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipeInformationBulk(ids: string, includeNutrition?: boolean, options?: any): AxiosPromise<object> {
            return localVarFp.getRecipeInformationBulk(ids, includeNutrition, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a recipe\'s ingredient list.
         * @summary Get Recipe Ingredients by ID
         * @param {number} id The recipe id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipeIngredientsByID(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.getRecipeIngredientsByID(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a recipe\'s nutrition widget data.
         * @summary Get Recipe Nutrition Widget by ID
         * @param {number} id The recipe id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipeNutritionWidgetByID(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.getRecipeNutritionWidgetByID(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a recipe\'s price breakdown data.
         * @summary Get Recipe Price Breakdown by ID
         * @param {number} id The recipe id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipePriceBreakdownByID(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.getRecipePriceBreakdownByID(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a recipe\'s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
         * @summary Get Recipe Taste by ID
         * @param {number} id The recipe id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipeTasteByID(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.getRecipeTasteByID(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current shopping list for the given user.
         * @summary Get Shopping List
         * @param {string} username The username.
         * @param {string} hash The private hash for the username.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShoppingList(username: string, hash: string, options?: any): AxiosPromise<object> {
            return localVarFp.getShoppingList(username, hash, options).then((request) => request(axios, basePath));
        },
        /**
         * Find recipes which are similar to the given one.
         * @summary Get Similar Recipes
         * @param {number} id The id of the source recipe for which similar recipes should be found.
         * @param {number} [number] The number of random recipes to be returned (between 1 and 100).
         * @param {boolean} [limitLicense] Whether the recipes should have an open license that allows display with proper attribution.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilarRecipes(id: number, number?: number, limitLicense?: boolean, options?: any): AxiosPromise<object> {
            return localVarFp.getSimilarRecipes(id, number, limitLicense, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a simple description of a certain wine, e.g. \"malbec\", \"riesling\", or \"merlot\".
         * @summary Get Wine Description
         * @param {string} wine The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWineDescription(wine: string, options?: any): AxiosPromise<object> {
            return localVarFp.getWineDescription(wine, options).then((request) => request(axios, basePath));
        },
        /**
         * Find a wine that goes well with a food. Food can be a dish name (\"steak\"), an ingredient name (\"salmon\"), or a cuisine (\"italian\").
         * @summary Get Wine Pairing
         * @param {string} food The food to get a pairing for. This can be a dish (\&quot;steak\&quot;), an ingredient (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
         * @param {number} [maxPrice] The maximum price for the specific wine recommendation in USD.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWinePairing(food: string, maxPrice?: number, options?: any): AxiosPromise<object> {
            return localVarFp.getWinePairing(food, maxPrice, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific wine recommendation (concrete product) for a given wine type, e.g. \"merlot\".
         * @summary Get Wine Recommendation
         * @param {string} wine The type of wine to get a specific product recommendation for.
         * @param {number} [maxPrice] The maximum price for the specific wine recommendation in USD.
         * @param {number} [minRating] The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars.
         * @param {number} [number] The number of wine recommendations expected (between 1 and 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWineRecommendation(wine: string, maxPrice?: number, minRating?: number, number?: number, options?: any): AxiosPromise<object> {
            return localVarFp.getWineRecommendation(wine, maxPrice, minRating, number, options).then((request) => request(axios, basePath));
        },
        /**
         * Estimate the macronutrients of a dish based on its title.
         * @summary Guess Nutrition by Dish Name
         * @param {string} title The title of the dish.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guessNutritionByDishName(title: string, options?: any): AxiosPromise<object> {
            return localVarFp.guessNutritionByDishName(title, options).then((request) => request(axios, basePath));
        },
        /**
         * Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes. You can play around with that endpoint!
         * @summary Image Analysis by URL
         * @param {string} imageUrl The URL of the image to be analyzed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageAnalysisByURL(imageUrl: string, options?: any): AxiosPromise<object> {
            return localVarFp.imageAnalysisByURL(imageUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * Classify a food image. You can play around with that endpoint!
         * @summary Image Classification by URL
         * @param {string} imageUrl The URL of the image to be classified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageClassificationByURL(imageUrl: string, options?: any): AxiosPromise<object> {
            return localVarFp.imageClassificationByURL(imageUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).
         * @summary Ingredient Search
         * @param {string} query The partial or full ingredient name.
         * @param {boolean} [addChildren] Whether to add children of found foods.
         * @param {number} [minProteinPercent] The minimum percentage of protein the food must have (between 0 and 100).
         * @param {number} [maxProteinPercent] The maximum percentage of protein the food can have (between 0 and 100).
         * @param {number} [minFatPercent] The minimum percentage of fat the food must have (between 0 and 100).
         * @param {number} [maxFatPercent] The maximum percentage of fat the food can have (between 0 and 100).
         * @param {number} [minCarbsPercent] The minimum percentage of carbs the food must have (between 0 and 100).
         * @param {number} [maxCarbsPercent] The maximum percentage of carbs the food can have (between 0 and 100).
         * @param {boolean} [metaInformation] Whether to return more meta information about the ingredients.
         * @param {string} [intolerances] A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
         * @param {string} [sort] The strategy to sort recipes by. See a full list of supported sorting options.
         * @param {string} [sortDirection] The direction in which to sort. Must be either \&#39;asc\&#39; (ascending) or \&#39;desc\&#39; (descending).
         * @param {number} [offset] The number of results to skip (between 0 and 990).
         * @param {number} [number] The number of expected results (between 1 and 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ingredientSearch(query: string, addChildren?: boolean, minProteinPercent?: number, maxProteinPercent?: number, minFatPercent?: number, maxFatPercent?: number, minCarbsPercent?: number, maxCarbsPercent?: number, metaInformation?: boolean, intolerances?: string, sort?: string, sortDirection?: string, offset?: number, number?: number, options?: any): AxiosPromise<object> {
            return localVarFp.ingredientSearch(query, addChildren, minProteinPercent, maxProteinPercent, minFatPercent, maxFatPercent, minCarbsPercent, maxCarbsPercent, metaInformation, intolerances, sort, sortDirection, offset, number, options).then((request) => request(axios, basePath));
        },
        /**
         * Map a set of ingredients to products you can buy in the grocery store.
         * @summary Map Ingredients to Grocery Products
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapIngredientsToGroceryProducts(body: object, options?: any): AxiosPromise<object> {
            return localVarFp.mapIngredientsToGroceryProducts(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Extract an ingredient from plain text.
         * @summary Parse Ingredients
         * @param {string} ingredientList The ingredient list of the recipe, one ingredient per line.
         * @param {number} servings The number of servings that you can make from the ingredients.
         * @param {boolean} [includeNutrition] Whether nutrition data should be added to correctly parsed ingredients.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parseIngredients(ingredientList: string, servings: number, includeNutrition?: boolean, options?: any): AxiosPromise<object> {
            return localVarFp.parseIngredients(ingredientList, servings, includeNutrition, options).then((request) => request(axios, basePath));
        },
        /**
         * Answer a nutrition related natural language question.
         * @summary Quick Answer
         * @param {string} q The nutrition related question.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quickAnswer(q: string, options?: any): AxiosPromise<object> {
            return localVarFp.quickAnswer(q, options).then((request) => request(axios, basePath));
        },
        /**
         * Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.
         * @summary Search All Food
         * @param {string} query The search query.
         * @param {number} [offset] The number of results to skip (between 0 and 990).
         * @param {number} [number] The number of expected results (between 1 and 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAllFood(query: string, offset?: number, number?: number, options?: any): AxiosPromise<object> {
            return localVarFp.searchAllFood(query, offset, number, options).then((request) => request(axios, basePath));
        },
        /**
         * Search custom foods in a user\'s account.
         * @summary Search Custom Foods
         * @param {string} query The search query.
         * @param {string} username The username.
         * @param {string} hash The private hash for the username.
         * @param {number} [offset] The number of results to skip (between 0 and 990).
         * @param {number} [number] The number of expected results (between 1 and 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCustomFoods(query: string, username: string, hash: string, offset?: number, number?: number, options?: any): AxiosPromise<object> {
            return localVarFp.searchCustomFoods(query, username, hash, offset, number, options).then((request) => request(axios, basePath));
        },
        /**
         * Find recipe and other food related videos.
         * @summary Search Food Videos
         * @param {string} query The search query.
         * @param {string} [type] The type of the recipes. See a full list of supported meal types.
         * @param {string} [cuisine] The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines.
         * @param {string} [diet] The diet for which the recipes must be suitable. See a full list of supported diets.
         * @param {string} [includeIngredients] A comma-separated list of ingredients that the recipes should contain.
         * @param {string} [excludeIngredients] A comma-separated list of ingredients or ingredient types that the recipes must not contain.
         * @param {number} [minLength] Minimum video length in seconds.
         * @param {number} [maxLength] Maximum video length in seconds.
         * @param {number} [offset] The number of results to skip (between 0 and 900).
         * @param {number} [number] The number of results to return (between 1 and 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchFoodVideos(query: string, type?: string, cuisine?: string, diet?: string, includeIngredients?: string, excludeIngredients?: string, minLength?: number, maxLength?: number, offset?: number, number?: number, options?: any): AxiosPromise<object> {
            return localVarFp.searchFoodVideos(query, type, cuisine, diet, includeIngredients, excludeIngredients, minLength, maxLength, offset, number, options).then((request) => request(axios, basePath));
        },
        /**
         * Search packaged food products, such as frozen pizza or Greek yogurt.
         * @summary Search Grocery Products
         * @param {string} query The search query.
         * @param {number} [minCalories] The minimum amount of calories the product must have.
         * @param {number} [maxCalories] The maximum amount of calories the product can have.
         * @param {number} [minCarbs] The minimum amount of carbohydrates in grams the product must have.
         * @param {number} [maxCarbs] The maximum amount of carbohydrates in grams the product can have.
         * @param {number} [minProtein] The minimum amount of protein in grams the product must have.
         * @param {number} [maxProtein] The maximum amount of protein in grams the product can have.
         * @param {number} [minFat] The minimum amount of fat in grams the product must have.
         * @param {number} [maxFat] The maximum amount of fat in grams the product can have.
         * @param {number} [offset] The number of results to skip (between 0 and 990).
         * @param {number} [number] The number of expected results (between 1 and 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchGroceryProducts(query: string, minCalories?: number, maxCalories?: number, minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minFat?: number, maxFat?: number, offset?: number, number?: number, options?: any): AxiosPromise<object> {
            return localVarFp.searchGroceryProducts(query, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, offset, number, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a packaged food using its UPC.
         * @summary Search Grocery Products by UPC
         * @param {number} upc The product\&#39;s UPC.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchGroceryProductsByUPC(upc: number, options?: any): AxiosPromise<object> {
            return localVarFp.searchGroceryProductsByUPC(upc, options).then((request) => request(axios, basePath));
        },
        /**
         * Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald\'s Big Mac or Starbucks Mocha.
         * @summary Search Menu Items
         * @param {string} query The search query.
         * @param {number} [minCalories] The minimum amount of calories the menu item must have.
         * @param {number} [maxCalories] The maximum amount of calories the menu item can have.
         * @param {number} [minCarbs] The minimum amount of carbohydrates in grams the menu item must have.
         * @param {number} [maxCarbs] The maximum amount of carbohydrates in grams the menu item can have.
         * @param {number} [minProtein] The minimum amount of protein in grams the menu item must have.
         * @param {number} [maxProtein] The maximum amount of protein in grams the menu item can have.
         * @param {number} [minFat] The minimum amount of fat in grams the menu item must have.
         * @param {number} [maxFat] The maximum amount of fat in grams the menu item can have.
         * @param {number} [offset] The offset number for paging (between 0 and 990).
         * @param {number} [number] The number of expected results (between 1 and 10).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMenuItems(query: string, minCalories?: number, maxCalories?: number, minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minFat?: number, maxFat?: number, offset?: number, number?: number, options?: any): AxiosPromise<object> {
            return localVarFp.searchMenuItems(query, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, offset, number, options).then((request) => request(axios, basePath));
        },
        /**
         * Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
         * @summary Search Recipes
         * @param {string} query The (natural language) recipe search query.
         * @param {string} [cuisine] The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as \&#39;OR\&#39;). See a full list of supported cuisines.
         * @param {string} [excludeCuisine] The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as \&#39;AND\&#39;). See a full list of supported cuisines.
         * @param {string} [diet] The diet for which the recipes must be suitable. See a full list of supported diets.
         * @param {string} [intolerances] A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
         * @param {string} [equipment] The equipment required. Multiple values will be interpreted as \&#39;or\&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;.
         * @param {string} [includeIngredients] A comma-separated list of ingredients that should/must be used in the recipes.
         * @param {string} [excludeIngredients] A comma-separated list of ingredients or ingredient types that the recipes must not contain.
         * @param {string} [type] The type of recipe. See a full list of supported meal types.
         * @param {boolean} [instructionsRequired] Whether the recipes must have instructions.
         * @param {boolean} [fillIngredients] Add information about the ingredients and whether they are used or missing in relation to the query.
         * @param {boolean} [addRecipeInformation] If set to true, you get more information about the recipes returned.
         * @param {boolean} [addRecipeNutrition] If set to true, you get nutritional information about each recipes returned.
         * @param {string} [author] The username of the recipe author.
         * @param {string} [tags] User defined tags that have to match. The author param has to be set.
         * @param {number} [recipeBoxId] The id of the recipe box to which the search should be limited to.
         * @param {string} [titleMatch] Enter text that must be found in the title of the recipes.
         * @param {number} [maxReadyTime] The maximum time in minutes it should take to prepare and cook the recipe.
         * @param {boolean} [ignorePantry] Whether to ignore typical pantry items, such as water, salt, flour, etc.
         * @param {string} [sort] The strategy to sort recipes by. See a full list of supported sorting options.
         * @param {string} [sortDirection] The direction in which to sort. Must be either \&#39;asc\&#39; (ascending) or \&#39;desc\&#39; (descending).
         * @param {number} [minCarbs] The minimum amount of carbohydrates in grams the recipe must have.
         * @param {number} [maxCarbs] The maximum amount of carbohydrates in grams the recipe can have.
         * @param {number} [minProtein] The minimum amount of protein in grams the recipe must have.
         * @param {number} [maxProtein] The maximum amount of protein in grams the recipe can have.
         * @param {number} [minCalories] The minimum amount of calories the recipe must have.
         * @param {number} [maxCalories] The maximum amount of calories the recipe can have.
         * @param {number} [minFat] The minimum amount of fat in grams the recipe must have.
         * @param {number} [maxFat] The maximum amount of fat in grams the recipe can have.
         * @param {number} [minAlcohol] The minimum amount of alcohol in grams the recipe must have.
         * @param {number} [maxAlcohol] The maximum amount of alcohol in grams the recipe can have.
         * @param {number} [minCaffeine] The minimum amount of caffeine in milligrams the recipe must have.
         * @param {number} [maxCaffeine] The maximum amount of caffeine in milligrams the recipe can have.
         * @param {number} [minCopper] The minimum amount of copper in milligrams the recipe must have.
         * @param {number} [maxCopper] The maximum amount of copper in milligrams the recipe can have.
         * @param {number} [minCalcium] The minimum amount of calcium in milligrams the recipe must have.
         * @param {number} [maxCalcium] The maximum amount of calcium in milligrams the recipe can have.
         * @param {number} [minCholine] The minimum amount of choline in milligrams the recipe must have.
         * @param {number} [maxCholine] The maximum amount of choline in milligrams the recipe can have.
         * @param {number} [minCholesterol] The minimum amount of cholesterol in milligrams the recipe must have.
         * @param {number} [maxCholesterol] The maximum amount of cholesterol in milligrams the recipe can have.
         * @param {number} [minFluoride] The minimum amount of fluoride in milligrams the recipe must have.
         * @param {number} [maxFluoride] The maximum amount of fluoride in milligrams the recipe can have.
         * @param {number} [minSaturatedFat] The minimum amount of saturated fat in grams the recipe must have.
         * @param {number} [maxSaturatedFat] The maximum amount of saturated fat in grams the recipe can have.
         * @param {number} [minVitaminA] The minimum amount of Vitamin A in IU the recipe must have.
         * @param {number} [maxVitaminA] The maximum amount of Vitamin A in IU the recipe can have.
         * @param {number} [minVitaminC] The minimum amount of Vitamin C milligrams the recipe must have.
         * @param {number} [maxVitaminC] The maximum amount of Vitamin C in milligrams the recipe can have.
         * @param {number} [minVitaminD] The minimum amount of Vitamin D in micrograms the recipe must have.
         * @param {number} [maxVitaminD] The maximum amount of Vitamin D in micrograms the recipe can have.
         * @param {number} [minVitaminE] The minimum amount of Vitamin E in milligrams the recipe must have.
         * @param {number} [maxVitaminE] The maximum amount of Vitamin E in milligrams the recipe can have.
         * @param {number} [minVitaminK] The minimum amount of Vitamin K in micrograms the recipe must have.
         * @param {number} [maxVitaminK] The maximum amount of Vitamin K in micrograms the recipe can have.
         * @param {number} [minVitaminB1] The minimum amount of Vitamin B1 in milligrams the recipe must have.
         * @param {number} [maxVitaminB1] The maximum amount of Vitamin B1 in milligrams the recipe can have.
         * @param {number} [minVitaminB2] The minimum amount of Vitamin B2 in milligrams the recipe must have.
         * @param {number} [maxVitaminB2] The maximum amount of Vitamin B2 in milligrams the recipe can have.
         * @param {number} [minVitaminB5] The minimum amount of Vitamin B5 in milligrams the recipe must have.
         * @param {number} [maxVitaminB5] The maximum amount of Vitamin B5 in milligrams the recipe can have.
         * @param {number} [minVitaminB3] The minimum amount of Vitamin B3 in milligrams the recipe must have.
         * @param {number} [maxVitaminB3] The maximum amount of Vitamin B3 in milligrams the recipe can have.
         * @param {number} [minVitaminB6] The minimum amount of Vitamin B6 in milligrams the recipe must have.
         * @param {number} [maxVitaminB6] The maximum amount of Vitamin B6 in milligrams the recipe can have.
         * @param {number} [minVitaminB12] The minimum amount of Vitamin B12 in micrograms the recipe must have.
         * @param {number} [maxVitaminB12] The maximum amount of Vitamin B12 in micrograms the recipe can have.
         * @param {number} [minFiber] The minimum amount of fiber in grams the recipe must have.
         * @param {number} [maxFiber] The maximum amount of fiber in grams the recipe can have.
         * @param {number} [minFolate] The minimum amount of folate in micrograms the recipe must have.
         * @param {number} [maxFolate] The maximum amount of folate in micrograms the recipe can have.
         * @param {number} [minFolicAcid] The minimum amount of folic acid in micrograms the recipe must have.
         * @param {number} [maxFolicAcid] The maximum amount of folic acid in micrograms the recipe can have.
         * @param {number} [minIodine] The minimum amount of iodine in micrograms the recipe must have.
         * @param {number} [maxIodine] The maximum amount of iodine in micrograms the recipe can have.
         * @param {number} [minIron] The minimum amount of iron in milligrams the recipe must have.
         * @param {number} [maxIron] The maximum amount of iron in milligrams the recipe can have.
         * @param {number} [minMagnesium] The minimum amount of magnesium in milligrams the recipe must have.
         * @param {number} [maxMagnesium] The maximum amount of magnesium in milligrams the recipe can have.
         * @param {number} [minManganese] The minimum amount of manganese in milligrams the recipe must have.
         * @param {number} [maxManganese] The maximum amount of manganese in milligrams the recipe can have.
         * @param {number} [minPhosphorus] The minimum amount of phosphorus in milligrams the recipe must have.
         * @param {number} [maxPhosphorus] The maximum amount of phosphorus in milligrams the recipe can have.
         * @param {number} [minPotassium] The minimum amount of potassium in milligrams the recipe must have.
         * @param {number} [maxPotassium] The maximum amount of potassium in milligrams the recipe can have.
         * @param {number} [minSelenium] The minimum amount of selenium in micrograms the recipe must have.
         * @param {number} [maxSelenium] The maximum amount of selenium in micrograms the recipe can have.
         * @param {number} [minSodium] The minimum amount of sodium in milligrams the recipe must have.
         * @param {number} [maxSodium] The maximum amount of sodium in milligrams the recipe can have.
         * @param {number} [minSugar] The minimum amount of sugar in grams the recipe must have.
         * @param {number} [maxSugar] The maximum amount of sugar in grams the recipe can have.
         * @param {number} [minZinc] The minimum amount of zinc in milligrams the recipe must have.
         * @param {number} [maxZinc] The maximum amount of zinc in milligrams the recipe can have.
         * @param {number} [offset] The number of results to skip (between 0 and 900).
         * @param {number} [number] The number of expected results (between 1 and 100).
         * @param {boolean} [limitLicense] Whether the recipes should have an open license that allows display with proper attribution.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRecipes(query: string, cuisine?: string, excludeCuisine?: string, diet?: string, intolerances?: string, equipment?: string, includeIngredients?: string, excludeIngredients?: string, type?: string, instructionsRequired?: boolean, fillIngredients?: boolean, addRecipeInformation?: boolean, addRecipeNutrition?: boolean, author?: string, tags?: string, recipeBoxId?: number, titleMatch?: string, maxReadyTime?: number, ignorePantry?: boolean, sort?: string, sortDirection?: string, minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minCalories?: number, maxCalories?: number, minFat?: number, maxFat?: number, minAlcohol?: number, maxAlcohol?: number, minCaffeine?: number, maxCaffeine?: number, minCopper?: number, maxCopper?: number, minCalcium?: number, maxCalcium?: number, minCholine?: number, maxCholine?: number, minCholesterol?: number, maxCholesterol?: number, minFluoride?: number, maxFluoride?: number, minSaturatedFat?: number, maxSaturatedFat?: number, minVitaminA?: number, maxVitaminA?: number, minVitaminC?: number, maxVitaminC?: number, minVitaminD?: number, maxVitaminD?: number, minVitaminE?: number, maxVitaminE?: number, minVitaminK?: number, maxVitaminK?: number, minVitaminB1?: number, maxVitaminB1?: number, minVitaminB2?: number, maxVitaminB2?: number, minVitaminB5?: number, maxVitaminB5?: number, minVitaminB3?: number, maxVitaminB3?: number, minVitaminB6?: number, maxVitaminB6?: number, minVitaminB12?: number, maxVitaminB12?: number, minFiber?: number, maxFiber?: number, minFolate?: number, maxFolate?: number, minFolicAcid?: number, maxFolicAcid?: number, minIodine?: number, maxIodine?: number, minIron?: number, maxIron?: number, minMagnesium?: number, maxMagnesium?: number, minManganese?: number, maxManganese?: number, minPhosphorus?: number, maxPhosphorus?: number, minPotassium?: number, maxPotassium?: number, minSelenium?: number, maxSelenium?: number, minSodium?: number, maxSodium?: number, minSugar?: number, maxSugar?: number, minZinc?: number, maxZinc?: number, offset?: number, number?: number, limitLicense?: boolean, options?: any): AxiosPromise<object> {
            return localVarFp.searchRecipes(query, cuisine, excludeCuisine, diet, intolerances, equipment, includeIngredients, excludeIngredients, type, instructionsRequired, fillIngredients, addRecipeInformation, addRecipeNutrition, author, tags, recipeBoxId, titleMatch, maxReadyTime, ignorePantry, sort, sortDirection, minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, limitLicense, options).then((request) => request(axios, basePath));
        },
        /**
         *              Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don\'t currently have (post shopping).         
         * @summary Search Recipes by Ingredients
         * @param {string} ingredients A comma-separated list of ingredients that the recipes should contain.
         * @param {number} [number] The maximum number of recipes to return (between 1 and 100). Defaults to 10.
         * @param {boolean} [limitLicense] Whether the recipes should have an open license that allows display with proper attribution.
         * @param {number} [ranking] Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
         * @param {boolean} [ignorePantry] Whether to ignore typical pantry items, such as water, salt, flour, etc.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRecipesByIngredients(ingredients: string, number?: number, limitLicense?: boolean, ranking?: number, ignorePantry?: boolean, options?: any): AxiosPromise<object> {
            return localVarFp.searchRecipesByIngredients(ingredients, number, limitLicense, ranking, ignorePantry, options).then((request) => request(axios, basePath));
        },
        /**
         * Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
         * @summary Search Recipes by Nutrients
         * @param {number} [minCarbs] The minimum amount of carbohydrates in grams the recipe must have.
         * @param {number} [maxCarbs] The maximum amount of carbohydrates in grams the recipe can have.
         * @param {number} [minProtein] The minimum amount of protein in grams the recipe must have.
         * @param {number} [maxProtein] The maximum amount of protein in grams the recipe can have.
         * @param {number} [minCalories] The minimum amount of calories the recipe must have.
         * @param {number} [maxCalories] The maximum amount of calories the recipe can have.
         * @param {number} [minFat] The minimum amount of fat in grams the recipe must have.
         * @param {number} [maxFat] The maximum amount of fat in grams the recipe can have.
         * @param {number} [minAlcohol] The minimum amount of alcohol in grams the recipe must have.
         * @param {number} [maxAlcohol] The maximum amount of alcohol in grams the recipe can have.
         * @param {number} [minCaffeine] The minimum amount of caffeine in milligrams the recipe must have.
         * @param {number} [maxCaffeine] The maximum amount of caffeine in milligrams the recipe can have.
         * @param {number} [minCopper] The minimum amount of copper in milligrams the recipe must have.
         * @param {number} [maxCopper] The maximum amount of copper in milligrams the recipe can have.
         * @param {number} [minCalcium] The minimum amount of calcium in milligrams the recipe must have.
         * @param {number} [maxCalcium] The maximum amount of calcium in milligrams the recipe can have.
         * @param {number} [minCholine] The minimum amount of choline in milligrams the recipe must have.
         * @param {number} [maxCholine] The maximum amount of choline in milligrams the recipe can have.
         * @param {number} [minCholesterol] The minimum amount of cholesterol in milligrams the recipe must have.
         * @param {number} [maxCholesterol] The maximum amount of cholesterol in milligrams the recipe can have.
         * @param {number} [minFluoride] The minimum amount of fluoride in milligrams the recipe must have.
         * @param {number} [maxFluoride] The maximum amount of fluoride in milligrams the recipe can have.
         * @param {number} [minSaturatedFat] The minimum amount of saturated fat in grams the recipe must have.
         * @param {number} [maxSaturatedFat] The maximum amount of saturated fat in grams the recipe can have.
         * @param {number} [minVitaminA] The minimum amount of Vitamin A in IU the recipe must have.
         * @param {number} [maxVitaminA] The maximum amount of Vitamin A in IU the recipe can have.
         * @param {number} [minVitaminC] The minimum amount of Vitamin C in milligrams the recipe must have.
         * @param {number} [maxVitaminC] The maximum amount of Vitamin C in milligrams the recipe can have.
         * @param {number} [minVitaminD] The minimum amount of Vitamin D in micrograms the recipe must have.
         * @param {number} [maxVitaminD] The maximum amount of Vitamin D in micrograms the recipe can have.
         * @param {number} [minVitaminE] The minimum amount of Vitamin E in milligrams the recipe must have.
         * @param {number} [maxVitaminE] The maximum amount of Vitamin E in milligrams the recipe can have.
         * @param {number} [minVitaminK] The minimum amount of Vitamin K in micrograms the recipe must have.
         * @param {number} [maxVitaminK] The maximum amount of Vitamin K in micrograms the recipe can have.
         * @param {number} [minVitaminB1] The minimum amount of Vitamin B1 in milligrams the recipe must have.
         * @param {number} [maxVitaminB1] The maximum amount of Vitamin B1 in milligrams the recipe can have.
         * @param {number} [minVitaminB2] The minimum amount of Vitamin B2 in milligrams the recipe must have.
         * @param {number} [maxVitaminB2] The maximum amount of Vitamin B2 in milligrams the recipe can have.
         * @param {number} [minVitaminB5] The minimum amount of Vitamin B5 in milligrams the recipe must have.
         * @param {number} [maxVitaminB5] The maximum amount of Vitamin B5 in milligrams the recipe can have.
         * @param {number} [minVitaminB3] The minimum amount of Vitamin B3 in milligrams the recipe must have.
         * @param {number} [maxVitaminB3] The maximum amount of Vitamin B3 in milligrams the recipe can have.
         * @param {number} [minVitaminB6] The minimum amount of Vitamin B6 in milligrams the recipe must have.
         * @param {number} [maxVitaminB6] The maximum amount of Vitamin B6 in milligrams the recipe can have.
         * @param {number} [minVitaminB12] The minimum amount of Vitamin B12 in micrograms the recipe must have.
         * @param {number} [maxVitaminB12] The maximum amount of Vitamin B12 in micrograms the recipe can have.
         * @param {number} [minFiber] The minimum amount of fiber in grams the recipe must have.
         * @param {number} [maxFiber] The maximum amount of fiber in grams the recipe can have.
         * @param {number} [minFolate] The minimum amount of folate in micrograms the recipe must have.
         * @param {number} [maxFolate] The maximum amount of folate in micrograms the recipe can have.
         * @param {number} [minFolicAcid] The minimum amount of folic acid in micrograms the recipe must have.
         * @param {number} [maxFolicAcid] The maximum amount of folic acid in micrograms the recipe can have.
         * @param {number} [minIodine] The minimum amount of iodine in micrograms the recipe must have.
         * @param {number} [maxIodine] The maximum amount of iodine in micrograms the recipe can have.
         * @param {number} [minIron] The minimum amount of iron in milligrams the recipe must have.
         * @param {number} [maxIron] The maximum amount of iron in milligrams the recipe can have.
         * @param {number} [minMagnesium] The minimum amount of magnesium in milligrams the recipe must have.
         * @param {number} [maxMagnesium] The maximum amount of magnesium in milligrams the recipe can have.
         * @param {number} [minManganese] The minimum amount of manganese in milligrams the recipe must have.
         * @param {number} [maxManganese] The maximum amount of manganese in milligrams the recipe can have.
         * @param {number} [minPhosphorus] The minimum amount of phosphorus in milligrams the recipe must have.
         * @param {number} [maxPhosphorus] The maximum amount of phosphorus in milligrams the recipe can have.
         * @param {number} [minPotassium] The minimum amount of potassium in milligrams the recipe must have.
         * @param {number} [maxPotassium] The maximum amount of potassium in milligrams the recipe can have.
         * @param {number} [minSelenium] The minimum amount of selenium in micrograms the recipe must have.
         * @param {number} [maxSelenium] The maximum amount of selenium in micrograms the recipe can have.
         * @param {number} [minSodium] The minimum amount of sodium in milligrams the recipe must have.
         * @param {number} [maxSodium] The maximum amount of sodium in milligrams the recipe can have.
         * @param {number} [minSugar] The minimum amount of sugar in grams the recipe must have.
         * @param {number} [maxSugar] The maximum amount of sugar in grams the recipe can have.
         * @param {number} [minZinc] The minimum amount of zinc in milligrams the recipe must have.
         * @param {number} [maxZinc] The maximum amount of zinc in milligrams the recipe can have.
         * @param {number} [offset] The number of results to skip (between 0 and 900).
         * @param {number} [number] The number of expected results (between 1 and 100).
         * @param {boolean} [random] If true, every request will give you a random set of recipes within the requested limits.
         * @param {boolean} [limitLicense] Whether the recipes should have an open license that allows display with proper attribution.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRecipesByNutrients(minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minCalories?: number, maxCalories?: number, minFat?: number, maxFat?: number, minAlcohol?: number, maxAlcohol?: number, minCaffeine?: number, maxCaffeine?: number, minCopper?: number, maxCopper?: number, minCalcium?: number, maxCalcium?: number, minCholine?: number, maxCholine?: number, minCholesterol?: number, maxCholesterol?: number, minFluoride?: number, maxFluoride?: number, minSaturatedFat?: number, maxSaturatedFat?: number, minVitaminA?: number, maxVitaminA?: number, minVitaminC?: number, maxVitaminC?: number, minVitaminD?: number, maxVitaminD?: number, minVitaminE?: number, maxVitaminE?: number, minVitaminK?: number, maxVitaminK?: number, minVitaminB1?: number, maxVitaminB1?: number, minVitaminB2?: number, maxVitaminB2?: number, minVitaminB5?: number, maxVitaminB5?: number, minVitaminB3?: number, maxVitaminB3?: number, minVitaminB6?: number, maxVitaminB6?: number, minVitaminB12?: number, maxVitaminB12?: number, minFiber?: number, maxFiber?: number, minFolate?: number, maxFolate?: number, minFolicAcid?: number, maxFolicAcid?: number, minIodine?: number, maxIodine?: number, minIron?: number, maxIron?: number, minMagnesium?: number, maxMagnesium?: number, minManganese?: number, maxManganese?: number, minPhosphorus?: number, maxPhosphorus?: number, minPotassium?: number, maxPotassium?: number, minSelenium?: number, maxSelenium?: number, minSodium?: number, maxSodium?: number, minSugar?: number, maxSugar?: number, minZinc?: number, maxZinc?: number, offset?: number, number?: number, random?: boolean, limitLicense?: boolean, options?: any): AxiosPromise<object> {
            return localVarFp.searchRecipesByNutrients(minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, random, limitLicense, options).then((request) => request(axios, basePath));
        },
        /**
         * Search spoonacular\'s site content. You\'ll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.
         * @summary Search Site Content
         * @param {string} query The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSiteContent(query: string, options?: any): AxiosPromise<object> {
            return localVarFp.searchSiteContent(query, options).then((request) => request(axios, basePath));
        },
        /**
         * Automatically generate a short description that summarizes key information about the recipe.
         * @summary Summarize Recipe
         * @param {number} id The recipe id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        summarizeRecipe(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.summarizeRecipe(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \"Get Conversation Suggests\" endpoint to show your user what he or she can say.
         * @summary Talk to Chatbot
         * @param {string} text The request / question / answer from the user to the chatbot.
         * @param {string} [contextId] An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        talkToChatbot(text: string, contextId?: string, options?: any): AxiosPromise<object> {
            return localVarFp.talkToChatbot(text, contextId, options).then((request) => request(axios, basePath));
        },
        /**
         * Visualize the equipment used to make a recipe. You can play around with that endpoint!
         * @summary Visualize Equipment
         * @param {string} instructions The recipe\\\&#39;s instructions.
         * @param {string} [view] How to visualize the equipment, either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot;.
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {boolean} [showBacklink] Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizeEquipment(instructions: string, view?: string, defaultCss?: boolean, showBacklink?: boolean, options?: any): AxiosPromise<string> {
            return localVarFp.visualizeEquipment(instructions, view, defaultCss, showBacklink, options).then((request) => request(axios, basePath));
        },
        /**
         * Visualize ingredients of a recipe. You can play around with that endpoint!
         * @summary Visualize Ingredients
         * @param {string} ingredientList The ingredient list of the recipe, one ingredient per line.
         * @param {number} servings The number of servings.
         * @param {string} [measure] The original system of measurement, either \\\&quot;metric\\\&quot; or \\\&quot;us\\\&quot;.
         * @param {string} [view] How to visualize the ingredients, either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot;.
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {boolean} [showBacklink] Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizeIngredients(ingredientList: string, servings: number, measure?: string, view?: string, defaultCss?: boolean, showBacklink?: boolean, options?: any): AxiosPromise<string> {
            return localVarFp.visualizeIngredients(ingredientList, servings, measure, view, defaultCss, showBacklink, options).then((request) => request(axios, basePath));
        },
        /**
         * Visualize a menu item\'s nutritional information as HTML including CSS.
         * @summary Visualize Menu Item Nutrition by ID
         * @param {number} id The menu item id.
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizeMenuItemNutritionByID(id: number, defaultCss?: boolean, options?: any): AxiosPromise<string> {
            return localVarFp.visualizeMenuItemNutritionByID(id, defaultCss, options).then((request) => request(axios, basePath));
        },
        /**
         * Visualize the price breakdown of a recipe. You can play around with that endpoint!
         * @summary Visualize Price Breakdown
         * @param {string} ingredientList The ingredient list of the recipe, one ingredient per line.
         * @param {number} servings The number of servings.
         * @param {number} [mode] The mode in which the widget should be delivered. 1 &#x3D; separate views (compact), 2 &#x3D; all in one view (full).
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {boolean} [showBacklink] Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizePriceBreakdown(ingredientList: string, servings: number, mode?: number, defaultCss?: boolean, showBacklink?: boolean, options?: any): AxiosPromise<string> {
            return localVarFp.visualizePriceBreakdown(ingredientList, servings, mode, defaultCss, showBacklink, options).then((request) => request(axios, basePath));
        },
        /**
         * Visualize a product\'s nutritional information as HTML including CSS.
         * @summary Visualize Product Nutrition by ID
         * @param {number} id The id of the product.
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizeProductNutritionByID(id: number, defaultCss?: boolean, options?: any): AxiosPromise<string> {
            return localVarFp.visualizeProductNutritionByID(id, defaultCss, options).then((request) => request(axios, basePath));
        },
        /**
         * Visualize a recipe\'s equipment list.
         * @summary Visualize Recipe Equipment by ID
         * @param {number} id The recipe id.
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizeRecipeEquipmentByID(id: number, defaultCss?: boolean, options?: any): AxiosPromise<string> {
            return localVarFp.visualizeRecipeEquipmentByID(id, defaultCss, options).then((request) => request(axios, basePath));
        },
        /**
         * Visualize a recipe\'s ingredient list.
         * @summary Visualize Recipe Ingredients by ID
         * @param {number} id The recipe id.
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizeRecipeIngredientsByID(id: number, defaultCss?: boolean, options?: any): AxiosPromise<string> {
            return localVarFp.visualizeRecipeIngredientsByID(id, defaultCss, options).then((request) => request(axios, basePath));
        },
        /**
         * Visualize a recipe\'s nutritional information as HTML including CSS. You can play around with that endpoint!
         * @summary Visualize Recipe Nutrition
         * @param {string} ingredientList The ingredient list of the recipe, one ingredient per line.
         * @param {number} servings The number of servings.
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {boolean} [showBacklink] Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizeRecipeNutrition(ingredientList: string, servings: number, defaultCss?: boolean, showBacklink?: boolean, options?: any): AxiosPromise<string> {
            return localVarFp.visualizeRecipeNutrition(ingredientList, servings, defaultCss, showBacklink, options).then((request) => request(axios, basePath));
        },
        /**
         * Visualize a recipe\'s nutritional information as HTML including CSS.
         * @summary Visualize Recipe Nutrition by ID
         * @param {number} id The recipe id.
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizeRecipeNutritionByID(id: number, defaultCss?: boolean, options?: any): AxiosPromise<string> {
            return localVarFp.visualizeRecipeNutritionByID(id, defaultCss, options).then((request) => request(axios, basePath));
        },
        /**
         * Visualize a recipe\'s price breakdown.
         * @summary Visualize Recipe Price Breakdown by ID
         * @param {number} id The recipe id.
         * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizeRecipePriceBreakdownByID(id: number, defaultCss?: boolean, options?: any): AxiosPromise<string> {
            return localVarFp.visualizeRecipePriceBreakdownByID(id, defaultCss, options).then((request) => request(axios, basePath));
        },
        /**
         * Visualize a recipe\'s taste information as HTML including CSS. You can play around with that endpoint!
         * @summary Visualize Recipe Taste
         * @param {string} ingredientList The ingredient list of the recipe, one ingredient per line.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizeRecipeTaste(ingredientList: string, options?: any): AxiosPromise<string> {
            return localVarFp.visualizeRecipeTaste(ingredientList, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a recipe\'s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
         * @summary Visualize Recipe Taste by ID
         * @param {number} id The recipe id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizeRecipeTasteByID(id: number, options?: any): AxiosPromise<string> {
            return localVarFp.visualizeRecipeTasteByID(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Add an item to the user\'s meal plan.
     * @summary Add to Meal Plan
     * @param {string} username The username.
     * @param {string} hash The private hash for the username.
     * @param {InlineObject11} inlineObject11 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addToMealPlan(username: string, hash: string, inlineObject11: InlineObject11, options?: any) {
        return DefaultApiFp(this.configuration).addToMealPlan(username, hash, inlineObject11, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add an item to the current shopping list of a user.
     * @summary Add to Shopping List
     * @param {string} username The username.
     * @param {string} hash The private hash for the username.
     * @param {InlineObject14} inlineObject14 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addToShoppingList(username: string, hash: string, inlineObject14: InlineObject14, options?: any) {
        return DefaultApiFp(this.configuration).addToShoppingList(username, hash, inlineObject14, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Parse a recipe search query to find out its intention.
     * @summary Analyze a Recipe Search Query
     * @param {string} q The recipe search query.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public analyzeARecipeSearchQuery(q: string, options?: any) {
        return DefaultApiFp(this.configuration).analyzeARecipeSearchQuery(q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe\'s instructions will be extracted independently of the step they\'re used in.
     * @summary Analyze Recipe Instructions
     * @param {string} instructions The instructions to be analyzed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public analyzeRecipeInstructions(instructions: string, options?: any) {
        return DefaultApiFp(this.configuration).analyzeRecipeInstructions(instructions, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Autocomplete the entry of an ingredient.
     * @summary Autocomplete Ingredient Search
     * @param {string} query The partial or full ingredient name.
     * @param {number} [number] The number of results to return (between 1 and 100).
     * @param {boolean} [metaInformation] Whether to return more meta information about the ingredients.
     * @param {string} [intolerances] A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public autocompleteIngredientSearch(query: string, number?: number, metaInformation?: boolean, intolerances?: string, options?: any) {
        return DefaultApiFp(this.configuration).autocompleteIngredientSearch(query, number, metaInformation, intolerances, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
     * @summary Autocomplete Menu Item Search
     * @param {string} query The (partial) search query.
     * @param {number} [number] The number of results to return (between 1 and 25).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public autocompleteMenuItemSearch(query: string, number?: number, options?: any) {
        return DefaultApiFp(this.configuration).autocompleteMenuItemSearch(query, number, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
     * @summary Autocomplete Product Search
     * @param {string} query The (partial) search query.
     * @param {number} [number] The number of results to return (between 1 and 25).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public autocompleteProductSearch(query: string, number?: number, options?: any) {
        return DefaultApiFp(this.configuration).autocompleteProductSearch(query, number, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Autocomplete a partial input to suggest possible recipe names.
     * @summary Autocomplete Recipe Search
     * @param {string} query The query to be autocompleted.
     * @param {number} [number] The number of results to return (between 1 and 25).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public autocompleteRecipeSearch(query: string, number?: number, options?: any) {
        return DefaultApiFp(this.configuration).autocompleteRecipeSearch(query, number, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Classify the recipe\'s cuisine.
     * @summary Classify Cuisine
     * @param {string} title The title of the recipe.
     * @param {string} ingredientList The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public classifyCuisine(title: string, ingredientList: string, options?: any) {
        return DefaultApiFp(this.configuration).classifyCuisine(title, ingredientList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
     * @summary Classify Grocery Product
     * @param {InlineObject9} inlineObject9 
     * @param {string} [locale] The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public classifyGroceryProduct(inlineObject9: InlineObject9, locale?: string, options?: any) {
        return DefaultApiFp(this.configuration).classifyGroceryProduct(inlineObject9, locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provide a set of product jsons, get back classified products.
     * @summary Classify Grocery Product Bulk
     * @param {Array<any>} requestBody 
     * @param {string} [locale] The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public classifyGroceryProductBulk(requestBody: Array<any>, locale?: string, options?: any) {
        return DefaultApiFp(this.configuration).classifyGroceryProductBulk(requestBody, locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete all planned items from the user\'s meal plan for a specific day.
     * @summary Clear Meal Plan Day
     * @param {string} username The username.
     * @param {string} date The date in the format yyyy-mm-dd.
     * @param {string} hash The private hash for the username.
     * @param {InlineObject10} inlineObject10 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public clearMealPlanDay(username: string, date: string, hash: string, inlineObject10: InlineObject10, options?: any) {
        return DefaultApiFp(this.configuration).clearMealPlanDay(username, date, hash, inlineObject10, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
     * @summary Compute Glycemic Load
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public computeGlycemicLoad(body: object, options?: any) {
        return DefaultApiFp(this.configuration).computeGlycemicLoad(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * In order to call user-specific endpoints, you need to connect your app\'s users to spoonacular users.
     * @summary Connect User
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public connectUser(body: object, options?: any) {
        return DefaultApiFp(this.configuration).connectUser(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Convert amounts like \"2 cups of flour to grams\".
     * @summary Convert Amounts
     * @param {string} ingredientName The ingredient which you want to convert.
     * @param {number} sourceAmount The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.
     * @param {string} sourceUnit The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
     * @param {string} targetUnit The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public convertAmounts(ingredientName: string, sourceAmount: number, sourceUnit: string, targetUnit: string, options?: any) {
        return DefaultApiFp(this.configuration).convertAmounts(ingredientName, sourceAmount, sourceUnit, targetUnit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate a recipe card for a recipe.
     * @summary Create Recipe Card
     * @param {string} title The title of the recipe.
     * @param {any} image The binary image of the recipe as jpg.
     * @param {string} ingredients The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
     * @param {string} instructions The instructions to make the recipe. One step per line (separate lines with \\\\n).
     * @param {number} readyInMinutes The number of minutes it takes to get the recipe on the table.
     * @param {number} servings The number of servings the recipe makes.
     * @param {string} mask The mask to put over the recipe image (\\\&quot;ellipseMask\\\&quot;, \\\&quot;diamondMask\\\&quot;, \\\&quot;starMask\\\&quot;, \\\&quot;heartMask\\\&quot;, \\\&quot;potMask\\\&quot;, \\\&quot;fishMask\\\&quot;).
     * @param {string} backgroundImage The background image (\\\&quot;none\\\&quot;,\\\&quot;background1\\\&quot;, or \\\&quot;background2\\\&quot;).
     * @param {string} [author] The author of the recipe.
     * @param {string} [backgroundColor] The background color for the recipe card as a hex-string.
     * @param {string} [fontColor] The font color for the recipe card as a hex-string.
     * @param {string} [source] The source of the recipe.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createRecipeCard(title: string, image: any, ingredients: string, instructions: string, readyInMinutes: number, servings: number, mask: string, backgroundImage: string, author?: string, backgroundColor?: string, fontColor?: string, source?: string, options?: any) {
        return DefaultApiFp(this.configuration).createRecipeCard(title, image, ingredients, instructions, readyInMinutes, servings, mask, backgroundImage, author, backgroundColor, fontColor, source, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an item from the user\'s meal plan.
     * @summary Delete from Meal Plan
     * @param {string} username The username.
     * @param {number} id The shopping list item id.
     * @param {string} hash The private hash for the username.
     * @param {InlineObject12} inlineObject12 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteFromMealPlan(username: string, id: number, hash: string, inlineObject12: InlineObject12, options?: any) {
        return DefaultApiFp(this.configuration).deleteFromMealPlan(username, id, hash, inlineObject12, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an item from the current shopping list of the user.
     * @summary Delete from Shopping List
     * @param {string} username The username.
     * @param {number} id The shopping list item id.
     * @param {string} hash The private hash for the username.
     * @param {InlineObject15} inlineObject15 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteFromShoppingList(username: string, id: number, hash: string, inlineObject15: InlineObject15, options?: any) {
        return DefaultApiFp(this.configuration).deleteFromShoppingList(username, id, hash, inlineObject15, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.
     * @summary Detect Food in Text
     * @param {string} text The text in which food items, such as dish names and ingredients, should be detected in.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public detectFoodInText(text: string, options?: any) {
        return DefaultApiFp(this.configuration).detectFoodInText(text, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
     * @summary Extract Recipe from Website
     * @param {string} url The URL of the recipe page.
     * @param {boolean} [forceExtraction] If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.
     * @param {boolean} [analyze] If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public extractRecipeFromWebsite(url: string, forceExtraction?: boolean, analyze?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).extractRecipeFromWebsite(url, forceExtraction, analyze, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
     * @summary Generate Meal Plan
     * @param {string} [timeFrame] Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;.
     * @param {number} [targetCalories] What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.
     * @param {string} [diet] Enter a diet that the meal plan has to adhere to. See a full list of supported diets.
     * @param {string} [exclude] A comma-separated list of allergens or ingredients that must be excluded.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public generateMealPlan(timeFrame?: string, targetCalories?: number, diet?: string, exclude?: string, options?: any) {
        return DefaultApiFp(this.configuration).generateMealPlan(timeFrame, targetCalories, diet, exclude, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate the shopping list for a user from the meal planner in a given time frame.
     * @summary Generate Shopping List
     * @param {string} username The username.
     * @param {string} startDate The start date in the format yyyy-mm-dd.
     * @param {string} endDate The end date in the format yyyy-mm-dd.
     * @param {string} hash The private hash for the username.
     * @param {InlineObject13} inlineObject13 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public generateShoppingList(username: string, startDate: string, endDate: string, hash: string, inlineObject13: InlineObject13, options?: any) {
        return DefaultApiFp(this.configuration).generateShoppingList(username, startDate, endDate, hash, inlineObject13, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a random joke that is related to food. Caution: this is an endpoint for adults!
     * @summary Get a Random Food Joke
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getARandomFoodJoke(options?: any) {
        return DefaultApiFp(this.configuration).getARandomFoodJoke(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an analyzed breakdown of a recipe\'s instructions. Each step is enriched with the ingredients and equipment required.
     * @summary Get Analyzed Recipe Instructions
     * @param {number} id The recipe id.
     * @param {boolean} [stepBreakdown] Whether to break down the recipe steps even more.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAnalyzedRecipeInstructions(id: number, stepBreakdown?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).getAnalyzedRecipeInstructions(id, stepBreakdown, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Find comparable products to the given one.
     * @summary Get Comparable Products
     * @param {number} upc The UPC of the product for which you want to find comparable products.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getComparableProducts(upc: number, options?: any) {
        return DefaultApiFp(this.configuration).getComparableProducts(upc, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns suggestions for things the user can say or ask the chatbot.
     * @summary Get Conversation Suggests
     * @param {string} query A (partial) query from the user. The endpoint will return if it matches topics it can talk about.
     * @param {number} [number] The number of suggestions to return (between 1 and 25).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getConversationSuggests(query: string, number?: number, options?: any) {
        return DefaultApiFp(this.configuration).getConversationSuggests(query, number, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Find a dish that goes well with a given wine.
     * @summary Get Dish Pairing for Wine
     * @param {string} wine The type of wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDishPairingForWine(wine: string, options?: any) {
        return DefaultApiFp(this.configuration).getDishPairingForWine(wine, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
     * @summary Get Ingredient Information
     * @param {number} id The ingredient id.
     * @param {number} [amount] The amount of this ingredient.
     * @param {string} [unit] The unit for the given amount.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getIngredientInformation(id: number, amount?: number, unit?: string, options?: any) {
        return DefaultApiFp(this.configuration).getIngredientInformation(id, amount, unit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for substitutes for a given ingredient.
     * @summary Get Ingredient Substitutes
     * @param {string} ingredientName The name of the ingredient you want to replace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getIngredientSubstitutes(ingredientName: string, options?: any) {
        return DefaultApiFp(this.configuration).getIngredientSubstitutes(ingredientName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for substitutes for a given ingredient.
     * @summary Get Ingredient Substitutes by ID
     * @param {number} id The id of the ingredient you want substitutes for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getIngredientSubstitutesByID(id: number, options?: any) {
        return DefaultApiFp(this.configuration).getIngredientSubstitutesByID(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a meal plan template.
     * @summary Get Meal Plan Template
     * @param {string} username The username.
     * @param {number} id The shopping list item id.
     * @param {string} hash The private hash for the username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMealPlanTemplate(username: string, id: number, hash: string, options?: any) {
        return DefaultApiFp(this.configuration).getMealPlanTemplate(username, id, hash, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get meal plan templates from user or public ones.
     * @summary Get Meal Plan Templates
     * @param {string} username The username.
     * @param {string} hash The private hash for the username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMealPlanTemplates(username: string, hash: string, options?: any) {
        return DefaultApiFp(this.configuration).getMealPlanTemplates(username, hash, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user\'s hash that can be found in his/her account.
     * @summary Get Meal Plan Week
     * @param {string} username The username.
     * @param {string} startDate The start date of the meal planned week in the format yyyy-mm-dd.
     * @param {string} hash The private hash for the username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMealPlanWeek(username: string, startDate: string, hash: string, options?: any) {
        return DefaultApiFp(this.configuration).getMealPlanWeek(username, startDate, hash, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use a menu item id to get all available information about a menu item, such as nutrition.
     * @summary Get Menu Item Information
     * @param {number} id The menu item id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMenuItemInformation(id: number, options?: any) {
        return DefaultApiFp(this.configuration).getMenuItemInformation(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
     * @summary Get Product Information
     * @param {number} id The id of the packaged food.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProductInformation(id: number, options?: any) {
        return DefaultApiFp(this.configuration).getProductInformation(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns random food trivia.
     * @summary Get Random Food Trivia
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRandomFoodTrivia(options?: any) {
        return DefaultApiFp(this.configuration).getRandomFoodTrivia(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
     * @summary Get Random Recipes
     * @param {boolean} [limitLicense] Whether the recipes should have an open license that allows display with proper attribution.
     * @param {string} [tags] The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
     * @param {number} [number] The number of random recipes to be returned (between 1 and 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRandomRecipes(limitLicense?: boolean, tags?: string, number?: number, options?: any) {
        return DefaultApiFp(this.configuration).getRandomRecipes(limitLicense, tags, number, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a recipe\'s equipment list.
     * @summary Get Recipe Equipment by ID
     * @param {number} id The recipe id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRecipeEquipmentByID(id: number, options?: any) {
        return DefaultApiFp(this.configuration).getRecipeEquipmentByID(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
     * @summary Get Recipe Information
     * @param {number} id The id of the recipe.
     * @param {boolean} [includeNutrition] Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRecipeInformation(id: number, includeNutrition?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).getRecipeInformation(id, includeNutrition, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
     * @summary Get Recipe Information Bulk
     * @param {string} ids A comma-separated list of recipe ids.
     * @param {boolean} [includeNutrition] Include nutrition data to the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRecipeInformationBulk(ids: string, includeNutrition?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).getRecipeInformationBulk(ids, includeNutrition, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a recipe\'s ingredient list.
     * @summary Get Recipe Ingredients by ID
     * @param {number} id The recipe id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRecipeIngredientsByID(id: number, options?: any) {
        return DefaultApiFp(this.configuration).getRecipeIngredientsByID(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a recipe\'s nutrition widget data.
     * @summary Get Recipe Nutrition Widget by ID
     * @param {number} id The recipe id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRecipeNutritionWidgetByID(id: number, options?: any) {
        return DefaultApiFp(this.configuration).getRecipeNutritionWidgetByID(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a recipe\'s price breakdown data.
     * @summary Get Recipe Price Breakdown by ID
     * @param {number} id The recipe id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRecipePriceBreakdownByID(id: number, options?: any) {
        return DefaultApiFp(this.configuration).getRecipePriceBreakdownByID(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a recipe\'s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     * @summary Get Recipe Taste by ID
     * @param {number} id The recipe id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRecipeTasteByID(id: number, options?: any) {
        return DefaultApiFp(this.configuration).getRecipeTasteByID(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the current shopping list for the given user.
     * @summary Get Shopping List
     * @param {string} username The username.
     * @param {string} hash The private hash for the username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getShoppingList(username: string, hash: string, options?: any) {
        return DefaultApiFp(this.configuration).getShoppingList(username, hash, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Find recipes which are similar to the given one.
     * @summary Get Similar Recipes
     * @param {number} id The id of the source recipe for which similar recipes should be found.
     * @param {number} [number] The number of random recipes to be returned (between 1 and 100).
     * @param {boolean} [limitLicense] Whether the recipes should have an open license that allows display with proper attribution.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSimilarRecipes(id: number, number?: number, limitLicense?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).getSimilarRecipes(id, number, limitLicense, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a simple description of a certain wine, e.g. \"malbec\", \"riesling\", or \"merlot\".
     * @summary Get Wine Description
     * @param {string} wine The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWineDescription(wine: string, options?: any) {
        return DefaultApiFp(this.configuration).getWineDescription(wine, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Find a wine that goes well with a food. Food can be a dish name (\"steak\"), an ingredient name (\"salmon\"), or a cuisine (\"italian\").
     * @summary Get Wine Pairing
     * @param {string} food The food to get a pairing for. This can be a dish (\&quot;steak\&quot;), an ingredient (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
     * @param {number} [maxPrice] The maximum price for the specific wine recommendation in USD.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWinePairing(food: string, maxPrice?: number, options?: any) {
        return DefaultApiFp(this.configuration).getWinePairing(food, maxPrice, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific wine recommendation (concrete product) for a given wine type, e.g. \"merlot\".
     * @summary Get Wine Recommendation
     * @param {string} wine The type of wine to get a specific product recommendation for.
     * @param {number} [maxPrice] The maximum price for the specific wine recommendation in USD.
     * @param {number} [minRating] The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars.
     * @param {number} [number] The number of wine recommendations expected (between 1 and 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWineRecommendation(wine: string, maxPrice?: number, minRating?: number, number?: number, options?: any) {
        return DefaultApiFp(this.configuration).getWineRecommendation(wine, maxPrice, minRating, number, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Estimate the macronutrients of a dish based on its title.
     * @summary Guess Nutrition by Dish Name
     * @param {string} title The title of the dish.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public guessNutritionByDishName(title: string, options?: any) {
        return DefaultApiFp(this.configuration).guessNutritionByDishName(title, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes. You can play around with that endpoint!
     * @summary Image Analysis by URL
     * @param {string} imageUrl The URL of the image to be analyzed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public imageAnalysisByURL(imageUrl: string, options?: any) {
        return DefaultApiFp(this.configuration).imageAnalysisByURL(imageUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Classify a food image. You can play around with that endpoint!
     * @summary Image Classification by URL
     * @param {string} imageUrl The URL of the image to be classified.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public imageClassificationByURL(imageUrl: string, options?: any) {
        return DefaultApiFp(this.configuration).imageClassificationByURL(imageUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).
     * @summary Ingredient Search
     * @param {string} query The partial or full ingredient name.
     * @param {boolean} [addChildren] Whether to add children of found foods.
     * @param {number} [minProteinPercent] The minimum percentage of protein the food must have (between 0 and 100).
     * @param {number} [maxProteinPercent] The maximum percentage of protein the food can have (between 0 and 100).
     * @param {number} [minFatPercent] The minimum percentage of fat the food must have (between 0 and 100).
     * @param {number} [maxFatPercent] The maximum percentage of fat the food can have (between 0 and 100).
     * @param {number} [minCarbsPercent] The minimum percentage of carbs the food must have (between 0 and 100).
     * @param {number} [maxCarbsPercent] The maximum percentage of carbs the food can have (between 0 and 100).
     * @param {boolean} [metaInformation] Whether to return more meta information about the ingredients.
     * @param {string} [intolerances] A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
     * @param {string} [sort] The strategy to sort recipes by. See a full list of supported sorting options.
     * @param {string} [sortDirection] The direction in which to sort. Must be either \&#39;asc\&#39; (ascending) or \&#39;desc\&#39; (descending).
     * @param {number} [offset] The number of results to skip (between 0 and 990).
     * @param {number} [number] The number of expected results (between 1 and 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public ingredientSearch(query: string, addChildren?: boolean, minProteinPercent?: number, maxProteinPercent?: number, minFatPercent?: number, maxFatPercent?: number, minCarbsPercent?: number, maxCarbsPercent?: number, metaInformation?: boolean, intolerances?: string, sort?: string, sortDirection?: string, offset?: number, number?: number, options?: any) {
        return DefaultApiFp(this.configuration).ingredientSearch(query, addChildren, minProteinPercent, maxProteinPercent, minFatPercent, maxFatPercent, minCarbsPercent, maxCarbsPercent, metaInformation, intolerances, sort, sortDirection, offset, number, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Map a set of ingredients to products you can buy in the grocery store.
     * @summary Map Ingredients to Grocery Products
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public mapIngredientsToGroceryProducts(body: object, options?: any) {
        return DefaultApiFp(this.configuration).mapIngredientsToGroceryProducts(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Extract an ingredient from plain text.
     * @summary Parse Ingredients
     * @param {string} ingredientList The ingredient list of the recipe, one ingredient per line.
     * @param {number} servings The number of servings that you can make from the ingredients.
     * @param {boolean} [includeNutrition] Whether nutrition data should be added to correctly parsed ingredients.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public parseIngredients(ingredientList: string, servings: number, includeNutrition?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).parseIngredients(ingredientList, servings, includeNutrition, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Answer a nutrition related natural language question.
     * @summary Quick Answer
     * @param {string} q The nutrition related question.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public quickAnswer(q: string, options?: any) {
        return DefaultApiFp(this.configuration).quickAnswer(q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.
     * @summary Search All Food
     * @param {string} query The search query.
     * @param {number} [offset] The number of results to skip (between 0 and 990).
     * @param {number} [number] The number of expected results (between 1 and 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchAllFood(query: string, offset?: number, number?: number, options?: any) {
        return DefaultApiFp(this.configuration).searchAllFood(query, offset, number, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search custom foods in a user\'s account.
     * @summary Search Custom Foods
     * @param {string} query The search query.
     * @param {string} username The username.
     * @param {string} hash The private hash for the username.
     * @param {number} [offset] The number of results to skip (between 0 and 990).
     * @param {number} [number] The number of expected results (between 1 and 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchCustomFoods(query: string, username: string, hash: string, offset?: number, number?: number, options?: any) {
        return DefaultApiFp(this.configuration).searchCustomFoods(query, username, hash, offset, number, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Find recipe and other food related videos.
     * @summary Search Food Videos
     * @param {string} query The search query.
     * @param {string} [type] The type of the recipes. See a full list of supported meal types.
     * @param {string} [cuisine] The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines.
     * @param {string} [diet] The diet for which the recipes must be suitable. See a full list of supported diets.
     * @param {string} [includeIngredients] A comma-separated list of ingredients that the recipes should contain.
     * @param {string} [excludeIngredients] A comma-separated list of ingredients or ingredient types that the recipes must not contain.
     * @param {number} [minLength] Minimum video length in seconds.
     * @param {number} [maxLength] Maximum video length in seconds.
     * @param {number} [offset] The number of results to skip (between 0 and 900).
     * @param {number} [number] The number of results to return (between 1 and 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchFoodVideos(query: string, type?: string, cuisine?: string, diet?: string, includeIngredients?: string, excludeIngredients?: string, minLength?: number, maxLength?: number, offset?: number, number?: number, options?: any) {
        return DefaultApiFp(this.configuration).searchFoodVideos(query, type, cuisine, diet, includeIngredients, excludeIngredients, minLength, maxLength, offset, number, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search packaged food products, such as frozen pizza or Greek yogurt.
     * @summary Search Grocery Products
     * @param {string} query The search query.
     * @param {number} [minCalories] The minimum amount of calories the product must have.
     * @param {number} [maxCalories] The maximum amount of calories the product can have.
     * @param {number} [minCarbs] The minimum amount of carbohydrates in grams the product must have.
     * @param {number} [maxCarbs] The maximum amount of carbohydrates in grams the product can have.
     * @param {number} [minProtein] The minimum amount of protein in grams the product must have.
     * @param {number} [maxProtein] The maximum amount of protein in grams the product can have.
     * @param {number} [minFat] The minimum amount of fat in grams the product must have.
     * @param {number} [maxFat] The maximum amount of fat in grams the product can have.
     * @param {number} [offset] The number of results to skip (between 0 and 990).
     * @param {number} [number] The number of expected results (between 1 and 100).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchGroceryProducts(query: string, minCalories?: number, maxCalories?: number, minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minFat?: number, maxFat?: number, offset?: number, number?: number, options?: any) {
        return DefaultApiFp(this.configuration).searchGroceryProducts(query, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, offset, number, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a packaged food using its UPC.
     * @summary Search Grocery Products by UPC
     * @param {number} upc The product\&#39;s UPC.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchGroceryProductsByUPC(upc: number, options?: any) {
        return DefaultApiFp(this.configuration).searchGroceryProductsByUPC(upc, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald\'s Big Mac or Starbucks Mocha.
     * @summary Search Menu Items
     * @param {string} query The search query.
     * @param {number} [minCalories] The minimum amount of calories the menu item must have.
     * @param {number} [maxCalories] The maximum amount of calories the menu item can have.
     * @param {number} [minCarbs] The minimum amount of carbohydrates in grams the menu item must have.
     * @param {number} [maxCarbs] The maximum amount of carbohydrates in grams the menu item can have.
     * @param {number} [minProtein] The minimum amount of protein in grams the menu item must have.
     * @param {number} [maxProtein] The maximum amount of protein in grams the menu item can have.
     * @param {number} [minFat] The minimum amount of fat in grams the menu item must have.
     * @param {number} [maxFat] The maximum amount of fat in grams the menu item can have.
     * @param {number} [offset] The offset number for paging (between 0 and 990).
     * @param {number} [number] The number of expected results (between 1 and 10).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchMenuItems(query: string, minCalories?: number, maxCalories?: number, minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minFat?: number, maxFat?: number, offset?: number, number?: number, options?: any) {
        return DefaultApiFp(this.configuration).searchMenuItems(query, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, offset, number, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
     * @summary Search Recipes
     * @param {string} query The (natural language) recipe search query.
     * @param {string} [cuisine] The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as \&#39;OR\&#39;). See a full list of supported cuisines.
     * @param {string} [excludeCuisine] The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as \&#39;AND\&#39;). See a full list of supported cuisines.
     * @param {string} [diet] The diet for which the recipes must be suitable. See a full list of supported diets.
     * @param {string} [intolerances] A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
     * @param {string} [equipment] The equipment required. Multiple values will be interpreted as \&#39;or\&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;.
     * @param {string} [includeIngredients] A comma-separated list of ingredients that should/must be used in the recipes.
     * @param {string} [excludeIngredients] A comma-separated list of ingredients or ingredient types that the recipes must not contain.
     * @param {string} [type] The type of recipe. See a full list of supported meal types.
     * @param {boolean} [instructionsRequired] Whether the recipes must have instructions.
     * @param {boolean} [fillIngredients] Add information about the ingredients and whether they are used or missing in relation to the query.
     * @param {boolean} [addRecipeInformation] If set to true, you get more information about the recipes returned.
     * @param {boolean} [addRecipeNutrition] If set to true, you get nutritional information about each recipes returned.
     * @param {string} [author] The username of the recipe author.
     * @param {string} [tags] User defined tags that have to match. The author param has to be set.
     * @param {number} [recipeBoxId] The id of the recipe box to which the search should be limited to.
     * @param {string} [titleMatch] Enter text that must be found in the title of the recipes.
     * @param {number} [maxReadyTime] The maximum time in minutes it should take to prepare and cook the recipe.
     * @param {boolean} [ignorePantry] Whether to ignore typical pantry items, such as water, salt, flour, etc.
     * @param {string} [sort] The strategy to sort recipes by. See a full list of supported sorting options.
     * @param {string} [sortDirection] The direction in which to sort. Must be either \&#39;asc\&#39; (ascending) or \&#39;desc\&#39; (descending).
     * @param {number} [minCarbs] The minimum amount of carbohydrates in grams the recipe must have.
     * @param {number} [maxCarbs] The maximum amount of carbohydrates in grams the recipe can have.
     * @param {number} [minProtein] The minimum amount of protein in grams the recipe must have.
     * @param {number} [maxProtein] The maximum amount of protein in grams the recipe can have.
     * @param {number} [minCalories] The minimum amount of calories the recipe must have.
     * @param {number} [maxCalories] The maximum amount of calories the recipe can have.
     * @param {number} [minFat] The minimum amount of fat in grams the recipe must have.
     * @param {number} [maxFat] The maximum amount of fat in grams the recipe can have.
     * @param {number} [minAlcohol] The minimum amount of alcohol in grams the recipe must have.
     * @param {number} [maxAlcohol] The maximum amount of alcohol in grams the recipe can have.
     * @param {number} [minCaffeine] The minimum amount of caffeine in milligrams the recipe must have.
     * @param {number} [maxCaffeine] The maximum amount of caffeine in milligrams the recipe can have.
     * @param {number} [minCopper] The minimum amount of copper in milligrams the recipe must have.
     * @param {number} [maxCopper] The maximum amount of copper in milligrams the recipe can have.
     * @param {number} [minCalcium] The minimum amount of calcium in milligrams the recipe must have.
     * @param {number} [maxCalcium] The maximum amount of calcium in milligrams the recipe can have.
     * @param {number} [minCholine] The minimum amount of choline in milligrams the recipe must have.
     * @param {number} [maxCholine] The maximum amount of choline in milligrams the recipe can have.
     * @param {number} [minCholesterol] The minimum amount of cholesterol in milligrams the recipe must have.
     * @param {number} [maxCholesterol] The maximum amount of cholesterol in milligrams the recipe can have.
     * @param {number} [minFluoride] The minimum amount of fluoride in milligrams the recipe must have.
     * @param {number} [maxFluoride] The maximum amount of fluoride in milligrams the recipe can have.
     * @param {number} [minSaturatedFat] The minimum amount of saturated fat in grams the recipe must have.
     * @param {number} [maxSaturatedFat] The maximum amount of saturated fat in grams the recipe can have.
     * @param {number} [minVitaminA] The minimum amount of Vitamin A in IU the recipe must have.
     * @param {number} [maxVitaminA] The maximum amount of Vitamin A in IU the recipe can have.
     * @param {number} [minVitaminC] The minimum amount of Vitamin C milligrams the recipe must have.
     * @param {number} [maxVitaminC] The maximum amount of Vitamin C in milligrams the recipe can have.
     * @param {number} [minVitaminD] The minimum amount of Vitamin D in micrograms the recipe must have.
     * @param {number} [maxVitaminD] The maximum amount of Vitamin D in micrograms the recipe can have.
     * @param {number} [minVitaminE] The minimum amount of Vitamin E in milligrams the recipe must have.
     * @param {number} [maxVitaminE] The maximum amount of Vitamin E in milligrams the recipe can have.
     * @param {number} [minVitaminK] The minimum amount of Vitamin K in micrograms the recipe must have.
     * @param {number} [maxVitaminK] The maximum amount of Vitamin K in micrograms the recipe can have.
     * @param {number} [minVitaminB1] The minimum amount of Vitamin B1 in milligrams the recipe must have.
     * @param {number} [maxVitaminB1] The maximum amount of Vitamin B1 in milligrams the recipe can have.
     * @param {number} [minVitaminB2] The minimum amount of Vitamin B2 in milligrams the recipe must have.
     * @param {number} [maxVitaminB2] The maximum amount of Vitamin B2 in milligrams the recipe can have.
     * @param {number} [minVitaminB5] The minimum amount of Vitamin B5 in milligrams the recipe must have.
     * @param {number} [maxVitaminB5] The maximum amount of Vitamin B5 in milligrams the recipe can have.
     * @param {number} [minVitaminB3] The minimum amount of Vitamin B3 in milligrams the recipe must have.
     * @param {number} [maxVitaminB3] The maximum amount of Vitamin B3 in milligrams the recipe can have.
     * @param {number} [minVitaminB6] The minimum amount of Vitamin B6 in milligrams the recipe must have.
     * @param {number} [maxVitaminB6] The maximum amount of Vitamin B6 in milligrams the recipe can have.
     * @param {number} [minVitaminB12] The minimum amount of Vitamin B12 in micrograms the recipe must have.
     * @param {number} [maxVitaminB12] The maximum amount of Vitamin B12 in micrograms the recipe can have.
     * @param {number} [minFiber] The minimum amount of fiber in grams the recipe must have.
     * @param {number} [maxFiber] The maximum amount of fiber in grams the recipe can have.
     * @param {number} [minFolate] The minimum amount of folate in micrograms the recipe must have.
     * @param {number} [maxFolate] The maximum amount of folate in micrograms the recipe can have.
     * @param {number} [minFolicAcid] The minimum amount of folic acid in micrograms the recipe must have.
     * @param {number} [maxFolicAcid] The maximum amount of folic acid in micrograms the recipe can have.
     * @param {number} [minIodine] The minimum amount of iodine in micrograms the recipe must have.
     * @param {number} [maxIodine] The maximum amount of iodine in micrograms the recipe can have.
     * @param {number} [minIron] The minimum amount of iron in milligrams the recipe must have.
     * @param {number} [maxIron] The maximum amount of iron in milligrams the recipe can have.
     * @param {number} [minMagnesium] The minimum amount of magnesium in milligrams the recipe must have.
     * @param {number} [maxMagnesium] The maximum amount of magnesium in milligrams the recipe can have.
     * @param {number} [minManganese] The minimum amount of manganese in milligrams the recipe must have.
     * @param {number} [maxManganese] The maximum amount of manganese in milligrams the recipe can have.
     * @param {number} [minPhosphorus] The minimum amount of phosphorus in milligrams the recipe must have.
     * @param {number} [maxPhosphorus] The maximum amount of phosphorus in milligrams the recipe can have.
     * @param {number} [minPotassium] The minimum amount of potassium in milligrams the recipe must have.
     * @param {number} [maxPotassium] The maximum amount of potassium in milligrams the recipe can have.
     * @param {number} [minSelenium] The minimum amount of selenium in micrograms the recipe must have.
     * @param {number} [maxSelenium] The maximum amount of selenium in micrograms the recipe can have.
     * @param {number} [minSodium] The minimum amount of sodium in milligrams the recipe must have.
     * @param {number} [maxSodium] The maximum amount of sodium in milligrams the recipe can have.
     * @param {number} [minSugar] The minimum amount of sugar in grams the recipe must have.
     * @param {number} [maxSugar] The maximum amount of sugar in grams the recipe can have.
     * @param {number} [minZinc] The minimum amount of zinc in milligrams the recipe must have.
     * @param {number} [maxZinc] The maximum amount of zinc in milligrams the recipe can have.
     * @param {number} [offset] The number of results to skip (between 0 and 900).
     * @param {number} [number] The number of expected results (between 1 and 100).
     * @param {boolean} [limitLicense] Whether the recipes should have an open license that allows display with proper attribution.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchRecipes(query: string, cuisine?: string, excludeCuisine?: string, diet?: string, intolerances?: string, equipment?: string, includeIngredients?: string, excludeIngredients?: string, type?: string, instructionsRequired?: boolean, fillIngredients?: boolean, addRecipeInformation?: boolean, addRecipeNutrition?: boolean, author?: string, tags?: string, recipeBoxId?: number, titleMatch?: string, maxReadyTime?: number, ignorePantry?: boolean, sort?: string, sortDirection?: string, minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minCalories?: number, maxCalories?: number, minFat?: number, maxFat?: number, minAlcohol?: number, maxAlcohol?: number, minCaffeine?: number, maxCaffeine?: number, minCopper?: number, maxCopper?: number, minCalcium?: number, maxCalcium?: number, minCholine?: number, maxCholine?: number, minCholesterol?: number, maxCholesterol?: number, minFluoride?: number, maxFluoride?: number, minSaturatedFat?: number, maxSaturatedFat?: number, minVitaminA?: number, maxVitaminA?: number, minVitaminC?: number, maxVitaminC?: number, minVitaminD?: number, maxVitaminD?: number, minVitaminE?: number, maxVitaminE?: number, minVitaminK?: number, maxVitaminK?: number, minVitaminB1?: number, maxVitaminB1?: number, minVitaminB2?: number, maxVitaminB2?: number, minVitaminB5?: number, maxVitaminB5?: number, minVitaminB3?: number, maxVitaminB3?: number, minVitaminB6?: number, maxVitaminB6?: number, minVitaminB12?: number, maxVitaminB12?: number, minFiber?: number, maxFiber?: number, minFolate?: number, maxFolate?: number, minFolicAcid?: number, maxFolicAcid?: number, minIodine?: number, maxIodine?: number, minIron?: number, maxIron?: number, minMagnesium?: number, maxMagnesium?: number, minManganese?: number, maxManganese?: number, minPhosphorus?: number, maxPhosphorus?: number, minPotassium?: number, maxPotassium?: number, minSelenium?: number, maxSelenium?: number, minSodium?: number, maxSodium?: number, minSugar?: number, maxSugar?: number, minZinc?: number, maxZinc?: number, offset?: number, number?: number, limitLicense?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).searchRecipes(query, cuisine, excludeCuisine, diet, intolerances, equipment, includeIngredients, excludeIngredients, type, instructionsRequired, fillIngredients, addRecipeInformation, addRecipeNutrition, author, tags, recipeBoxId, titleMatch, maxReadyTime, ignorePantry, sort, sortDirection, minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, limitLicense, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *              Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don\'t currently have (post shopping).         
     * @summary Search Recipes by Ingredients
     * @param {string} ingredients A comma-separated list of ingredients that the recipes should contain.
     * @param {number} [number] The maximum number of recipes to return (between 1 and 100). Defaults to 10.
     * @param {boolean} [limitLicense] Whether the recipes should have an open license that allows display with proper attribution.
     * @param {number} [ranking] Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
     * @param {boolean} [ignorePantry] Whether to ignore typical pantry items, such as water, salt, flour, etc.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchRecipesByIngredients(ingredients: string, number?: number, limitLicense?: boolean, ranking?: number, ignorePantry?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).searchRecipesByIngredients(ingredients, number, limitLicense, ranking, ignorePantry, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
     * @summary Search Recipes by Nutrients
     * @param {number} [minCarbs] The minimum amount of carbohydrates in grams the recipe must have.
     * @param {number} [maxCarbs] The maximum amount of carbohydrates in grams the recipe can have.
     * @param {number} [minProtein] The minimum amount of protein in grams the recipe must have.
     * @param {number} [maxProtein] The maximum amount of protein in grams the recipe can have.
     * @param {number} [minCalories] The minimum amount of calories the recipe must have.
     * @param {number} [maxCalories] The maximum amount of calories the recipe can have.
     * @param {number} [minFat] The minimum amount of fat in grams the recipe must have.
     * @param {number} [maxFat] The maximum amount of fat in grams the recipe can have.
     * @param {number} [minAlcohol] The minimum amount of alcohol in grams the recipe must have.
     * @param {number} [maxAlcohol] The maximum amount of alcohol in grams the recipe can have.
     * @param {number} [minCaffeine] The minimum amount of caffeine in milligrams the recipe must have.
     * @param {number} [maxCaffeine] The maximum amount of caffeine in milligrams the recipe can have.
     * @param {number} [minCopper] The minimum amount of copper in milligrams the recipe must have.
     * @param {number} [maxCopper] The maximum amount of copper in milligrams the recipe can have.
     * @param {number} [minCalcium] The minimum amount of calcium in milligrams the recipe must have.
     * @param {number} [maxCalcium] The maximum amount of calcium in milligrams the recipe can have.
     * @param {number} [minCholine] The minimum amount of choline in milligrams the recipe must have.
     * @param {number} [maxCholine] The maximum amount of choline in milligrams the recipe can have.
     * @param {number} [minCholesterol] The minimum amount of cholesterol in milligrams the recipe must have.
     * @param {number} [maxCholesterol] The maximum amount of cholesterol in milligrams the recipe can have.
     * @param {number} [minFluoride] The minimum amount of fluoride in milligrams the recipe must have.
     * @param {number} [maxFluoride] The maximum amount of fluoride in milligrams the recipe can have.
     * @param {number} [minSaturatedFat] The minimum amount of saturated fat in grams the recipe must have.
     * @param {number} [maxSaturatedFat] The maximum amount of saturated fat in grams the recipe can have.
     * @param {number} [minVitaminA] The minimum amount of Vitamin A in IU the recipe must have.
     * @param {number} [maxVitaminA] The maximum amount of Vitamin A in IU the recipe can have.
     * @param {number} [minVitaminC] The minimum amount of Vitamin C in milligrams the recipe must have.
     * @param {number} [maxVitaminC] The maximum amount of Vitamin C in milligrams the recipe can have.
     * @param {number} [minVitaminD] The minimum amount of Vitamin D in micrograms the recipe must have.
     * @param {number} [maxVitaminD] The maximum amount of Vitamin D in micrograms the recipe can have.
     * @param {number} [minVitaminE] The minimum amount of Vitamin E in milligrams the recipe must have.
     * @param {number} [maxVitaminE] The maximum amount of Vitamin E in milligrams the recipe can have.
     * @param {number} [minVitaminK] The minimum amount of Vitamin K in micrograms the recipe must have.
     * @param {number} [maxVitaminK] The maximum amount of Vitamin K in micrograms the recipe can have.
     * @param {number} [minVitaminB1] The minimum amount of Vitamin B1 in milligrams the recipe must have.
     * @param {number} [maxVitaminB1] The maximum amount of Vitamin B1 in milligrams the recipe can have.
     * @param {number} [minVitaminB2] The minimum amount of Vitamin B2 in milligrams the recipe must have.
     * @param {number} [maxVitaminB2] The maximum amount of Vitamin B2 in milligrams the recipe can have.
     * @param {number} [minVitaminB5] The minimum amount of Vitamin B5 in milligrams the recipe must have.
     * @param {number} [maxVitaminB5] The maximum amount of Vitamin B5 in milligrams the recipe can have.
     * @param {number} [minVitaminB3] The minimum amount of Vitamin B3 in milligrams the recipe must have.
     * @param {number} [maxVitaminB3] The maximum amount of Vitamin B3 in milligrams the recipe can have.
     * @param {number} [minVitaminB6] The minimum amount of Vitamin B6 in milligrams the recipe must have.
     * @param {number} [maxVitaminB6] The maximum amount of Vitamin B6 in milligrams the recipe can have.
     * @param {number} [minVitaminB12] The minimum amount of Vitamin B12 in micrograms the recipe must have.
     * @param {number} [maxVitaminB12] The maximum amount of Vitamin B12 in micrograms the recipe can have.
     * @param {number} [minFiber] The minimum amount of fiber in grams the recipe must have.
     * @param {number} [maxFiber] The maximum amount of fiber in grams the recipe can have.
     * @param {number} [minFolate] The minimum amount of folate in micrograms the recipe must have.
     * @param {number} [maxFolate] The maximum amount of folate in micrograms the recipe can have.
     * @param {number} [minFolicAcid] The minimum amount of folic acid in micrograms the recipe must have.
     * @param {number} [maxFolicAcid] The maximum amount of folic acid in micrograms the recipe can have.
     * @param {number} [minIodine] The minimum amount of iodine in micrograms the recipe must have.
     * @param {number} [maxIodine] The maximum amount of iodine in micrograms the recipe can have.
     * @param {number} [minIron] The minimum amount of iron in milligrams the recipe must have.
     * @param {number} [maxIron] The maximum amount of iron in milligrams the recipe can have.
     * @param {number} [minMagnesium] The minimum amount of magnesium in milligrams the recipe must have.
     * @param {number} [maxMagnesium] The maximum amount of magnesium in milligrams the recipe can have.
     * @param {number} [minManganese] The minimum amount of manganese in milligrams the recipe must have.
     * @param {number} [maxManganese] The maximum amount of manganese in milligrams the recipe can have.
     * @param {number} [minPhosphorus] The minimum amount of phosphorus in milligrams the recipe must have.
     * @param {number} [maxPhosphorus] The maximum amount of phosphorus in milligrams the recipe can have.
     * @param {number} [minPotassium] The minimum amount of potassium in milligrams the recipe must have.
     * @param {number} [maxPotassium] The maximum amount of potassium in milligrams the recipe can have.
     * @param {number} [minSelenium] The minimum amount of selenium in micrograms the recipe must have.
     * @param {number} [maxSelenium] The maximum amount of selenium in micrograms the recipe can have.
     * @param {number} [minSodium] The minimum amount of sodium in milligrams the recipe must have.
     * @param {number} [maxSodium] The maximum amount of sodium in milligrams the recipe can have.
     * @param {number} [minSugar] The minimum amount of sugar in grams the recipe must have.
     * @param {number} [maxSugar] The maximum amount of sugar in grams the recipe can have.
     * @param {number} [minZinc] The minimum amount of zinc in milligrams the recipe must have.
     * @param {number} [maxZinc] The maximum amount of zinc in milligrams the recipe can have.
     * @param {number} [offset] The number of results to skip (between 0 and 900).
     * @param {number} [number] The number of expected results (between 1 and 100).
     * @param {boolean} [random] If true, every request will give you a random set of recipes within the requested limits.
     * @param {boolean} [limitLicense] Whether the recipes should have an open license that allows display with proper attribution.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchRecipesByNutrients(minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minCalories?: number, maxCalories?: number, minFat?: number, maxFat?: number, minAlcohol?: number, maxAlcohol?: number, minCaffeine?: number, maxCaffeine?: number, minCopper?: number, maxCopper?: number, minCalcium?: number, maxCalcium?: number, minCholine?: number, maxCholine?: number, minCholesterol?: number, maxCholesterol?: number, minFluoride?: number, maxFluoride?: number, minSaturatedFat?: number, maxSaturatedFat?: number, minVitaminA?: number, maxVitaminA?: number, minVitaminC?: number, maxVitaminC?: number, minVitaminD?: number, maxVitaminD?: number, minVitaminE?: number, maxVitaminE?: number, minVitaminK?: number, maxVitaminK?: number, minVitaminB1?: number, maxVitaminB1?: number, minVitaminB2?: number, maxVitaminB2?: number, minVitaminB5?: number, maxVitaminB5?: number, minVitaminB3?: number, maxVitaminB3?: number, minVitaminB6?: number, maxVitaminB6?: number, minVitaminB12?: number, maxVitaminB12?: number, minFiber?: number, maxFiber?: number, minFolate?: number, maxFolate?: number, minFolicAcid?: number, maxFolicAcid?: number, minIodine?: number, maxIodine?: number, minIron?: number, maxIron?: number, minMagnesium?: number, maxMagnesium?: number, minManganese?: number, maxManganese?: number, minPhosphorus?: number, maxPhosphorus?: number, minPotassium?: number, maxPotassium?: number, minSelenium?: number, maxSelenium?: number, minSodium?: number, maxSodium?: number, minSugar?: number, maxSugar?: number, minZinc?: number, maxZinc?: number, offset?: number, number?: number, random?: boolean, limitLicense?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).searchRecipesByNutrients(minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, random, limitLicense, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search spoonacular\'s site content. You\'ll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.
     * @summary Search Site Content
     * @param {string} query The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchSiteContent(query: string, options?: any) {
        return DefaultApiFp(this.configuration).searchSiteContent(query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Automatically generate a short description that summarizes key information about the recipe.
     * @summary Summarize Recipe
     * @param {number} id The recipe id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public summarizeRecipe(id: number, options?: any) {
        return DefaultApiFp(this.configuration).summarizeRecipe(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \"Get Conversation Suggests\" endpoint to show your user what he or she can say.
     * @summary Talk to Chatbot
     * @param {string} text The request / question / answer from the user to the chatbot.
     * @param {string} [contextId] An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public talkToChatbot(text: string, contextId?: string, options?: any) {
        return DefaultApiFp(this.configuration).talkToChatbot(text, contextId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Visualize the equipment used to make a recipe. You can play around with that endpoint!
     * @summary Visualize Equipment
     * @param {string} instructions The recipe\\\&#39;s instructions.
     * @param {string} [view] How to visualize the equipment, either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot;.
     * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
     * @param {boolean} [showBacklink] Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visualizeEquipment(instructions: string, view?: string, defaultCss?: boolean, showBacklink?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).visualizeEquipment(instructions, view, defaultCss, showBacklink, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Visualize ingredients of a recipe. You can play around with that endpoint!
     * @summary Visualize Ingredients
     * @param {string} ingredientList The ingredient list of the recipe, one ingredient per line.
     * @param {number} servings The number of servings.
     * @param {string} [measure] The original system of measurement, either \\\&quot;metric\\\&quot; or \\\&quot;us\\\&quot;.
     * @param {string} [view] How to visualize the ingredients, either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot;.
     * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
     * @param {boolean} [showBacklink] Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visualizeIngredients(ingredientList: string, servings: number, measure?: string, view?: string, defaultCss?: boolean, showBacklink?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).visualizeIngredients(ingredientList, servings, measure, view, defaultCss, showBacklink, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Visualize a menu item\'s nutritional information as HTML including CSS.
     * @summary Visualize Menu Item Nutrition by ID
     * @param {number} id The menu item id.
     * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visualizeMenuItemNutritionByID(id: number, defaultCss?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).visualizeMenuItemNutritionByID(id, defaultCss, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Visualize the price breakdown of a recipe. You can play around with that endpoint!
     * @summary Visualize Price Breakdown
     * @param {string} ingredientList The ingredient list of the recipe, one ingredient per line.
     * @param {number} servings The number of servings.
     * @param {number} [mode] The mode in which the widget should be delivered. 1 &#x3D; separate views (compact), 2 &#x3D; all in one view (full).
     * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
     * @param {boolean} [showBacklink] Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visualizePriceBreakdown(ingredientList: string, servings: number, mode?: number, defaultCss?: boolean, showBacklink?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).visualizePriceBreakdown(ingredientList, servings, mode, defaultCss, showBacklink, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Visualize a product\'s nutritional information as HTML including CSS.
     * @summary Visualize Product Nutrition by ID
     * @param {number} id The id of the product.
     * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visualizeProductNutritionByID(id: number, defaultCss?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).visualizeProductNutritionByID(id, defaultCss, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Visualize a recipe\'s equipment list.
     * @summary Visualize Recipe Equipment by ID
     * @param {number} id The recipe id.
     * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visualizeRecipeEquipmentByID(id: number, defaultCss?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).visualizeRecipeEquipmentByID(id, defaultCss, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Visualize a recipe\'s ingredient list.
     * @summary Visualize Recipe Ingredients by ID
     * @param {number} id The recipe id.
     * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visualizeRecipeIngredientsByID(id: number, defaultCss?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).visualizeRecipeIngredientsByID(id, defaultCss, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Visualize a recipe\'s nutritional information as HTML including CSS. You can play around with that endpoint!
     * @summary Visualize Recipe Nutrition
     * @param {string} ingredientList The ingredient list of the recipe, one ingredient per line.
     * @param {number} servings The number of servings.
     * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
     * @param {boolean} [showBacklink] Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visualizeRecipeNutrition(ingredientList: string, servings: number, defaultCss?: boolean, showBacklink?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).visualizeRecipeNutrition(ingredientList, servings, defaultCss, showBacklink, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Visualize a recipe\'s nutritional information as HTML including CSS.
     * @summary Visualize Recipe Nutrition by ID
     * @param {number} id The recipe id.
     * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visualizeRecipeNutritionByID(id: number, defaultCss?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).visualizeRecipeNutritionByID(id, defaultCss, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Visualize a recipe\'s price breakdown.
     * @summary Visualize Recipe Price Breakdown by ID
     * @param {number} id The recipe id.
     * @param {boolean} [defaultCss] Whether the default CSS should be added to the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visualizeRecipePriceBreakdownByID(id: number, defaultCss?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).visualizeRecipePriceBreakdownByID(id, defaultCss, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Visualize a recipe\'s taste information as HTML including CSS. You can play around with that endpoint!
     * @summary Visualize Recipe Taste
     * @param {string} ingredientList The ingredient list of the recipe, one ingredient per line.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visualizeRecipeTaste(ingredientList: string, options?: any) {
        return DefaultApiFp(this.configuration).visualizeRecipeTaste(ingredientList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a recipe\'s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     * @summary Visualize Recipe Taste by ID
     * @param {number} id The recipe id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visualizeRecipeTasteByID(id: number, options?: any) {
        return DefaultApiFp(this.configuration).visualizeRecipeTasteByID(id, options).then((request) => request(this.axios, this.basePath));
    }
}


